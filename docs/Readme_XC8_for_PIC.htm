<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns:m="http://schemas.microsoft.com/office/2004/12/omml"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 15">
<meta name=Originator content="Microsoft Word 15">
<link rel=File-List href="Readme_XC8_for_PIC.fld/filelist.xml">
<link rel=Edit-Time-Data href="Readme_XC8_for_PIC.fld/editdata.mso">
<!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]-->
<link rel=themeData href="Readme_XC8_for_PIC.fld/themedata.thmx">
<link rel=colorSchemeMapping
href="Readme_XC8_for_PIC.fld/colorschememapping.xml">
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DisplayBackgroundShape/>
  <w:TrackMoves>false</w:TrackMoves>
  <w:TrackFormatting/>
  <w:AutoHyphenation/>
  <w:PunctuationKerning/>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>EN-AU</w:LidThemeOther>
  <w:LidThemeAsian>X-NONE</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
   <w:DontGrowAutofit/>
   <w:SplitPgBreakAndParaMark/>
   <w:EnableOpenTypeKerning/>
   <w:DontFlipMirrorIndents/>
   <w:OverrideTableStyleHps/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:DoNotOptimizeForBrowser/>
  <m:mathPr>
   <m:mathFont m:val="Cambria Math"/>
   <m:brkBin m:val="before"/>
   <m:brkBinSub m:val="&#45;-"/>
   <m:smallFrac m:val="off"/>
   <m:dispDef/>
   <m:lMargin m:val="0"/>
   <m:rMargin m:val="0"/>
   <m:defJc m:val="centerGroup"/>
   <m:wrapIndent m:val="1440"/>
   <m:intLim m:val="subSup"/>
   <m:naryLim m:val="undOvr"/>
  </m:mathPr></w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="false"
  DefSemiHidden="false" DefQFormat="false" DefPriority="99"
  LatentStyleCount="376">
  <w:LsdException Locked="false" Priority="0" QFormat="true" Name="Normal"/>
  <w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 1"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 2"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 3"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 4"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 5"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 6"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 7"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 8"/>
  <w:LsdException Locked="false" Priority="9" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="heading 9"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index 9"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 1"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 2"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 3"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 4"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 5"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 6"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 7"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 8"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" Name="toc 9"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Normal Indent"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="footnote text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="annotation text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="header"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="footer"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="index heading"/>
  <w:LsdException Locked="false" Priority="35" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="caption"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="table of figures"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="envelope address"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="envelope return"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="footnote reference"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="annotation reference"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="line number"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="page number"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="endnote reference"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="endnote text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="table of authorities"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="macro"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="toa heading"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Bullet 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Number 5"/>
  <w:LsdException Locked="false" Priority="10" QFormat="true" Name="Title"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Closing"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Signature"/>
  <w:LsdException Locked="false" Priority="1" SemiHidden="true"
   UnhideWhenUsed="true" Name="Default Paragraph Font"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text Indent"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="List Continue 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Message Header"/>
  <w:LsdException Locked="false" Priority="11" QFormat="true" Name="Subtitle"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Salutation"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Date"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text First Indent"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text First Indent 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Note Heading"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text Indent 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Body Text Indent 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Block Text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Hyperlink"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="FollowedHyperlink"/>
  <w:LsdException Locked="false" Priority="22" QFormat="true" Name="Strong"/>
  <w:LsdException Locked="false" Priority="20" QFormat="true" Name="Emphasis"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Document Map"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Plain Text"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="E-mail Signature"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Top of Form"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Bottom of Form"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Normal (Web)"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Acronym"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Address"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Cite"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Code"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Definition"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Keyboard"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Preformatted"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Sample"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Typewriter"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="HTML Variable"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Normal Table"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="annotation subject"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="No List"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Outline List 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Outline List 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Outline List 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Simple 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Simple 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Simple 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Classic 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Colorful 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Colorful 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Colorful 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Columns 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Grid 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 4"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 5"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 7"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table List 8"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table 3D effects 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table 3D effects 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table 3D effects 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Contemporary"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Elegant"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Professional"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Subtle 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Subtle 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Web 1"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Web 2"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Web 3"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Balloon Text"/>
  <w:LsdException Locked="false" Priority="39" Name="Table Grid"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Table Theme"/>
  <w:LsdException Locked="false" SemiHidden="true" Name="Placeholder Text"/>
  <w:LsdException Locked="false" Priority="1" QFormat="true" Name="No Spacing"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 1"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 1"/>
  <w:LsdException Locked="false" SemiHidden="true" Name="Revision"/>
  <w:LsdException Locked="false" Priority="34" QFormat="true"
   Name="List Paragraph"/>
  <w:LsdException Locked="false" Priority="29" QFormat="true" Name="Quote"/>
  <w:LsdException Locked="false" Priority="30" QFormat="true"
   Name="Intense Quote"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 1"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 1"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 1"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 1"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 1"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 2"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 2"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 2"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 2"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 2"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 2"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 3"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 3"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 3"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 3"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 3"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 3"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 4"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 4"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 4"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 4"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 4"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 4"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 5"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 5"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 5"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 5"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 5"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 5"/>
  <w:LsdException Locked="false" Priority="60" Name="Light Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="61" Name="Light List Accent 6"/>
  <w:LsdException Locked="false" Priority="62" Name="Light Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="63" Name="Medium Shading 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="64" Name="Medium Shading 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="65" Name="Medium List 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="66" Name="Medium List 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="67" Name="Medium Grid 1 Accent 6"/>
  <w:LsdException Locked="false" Priority="68" Name="Medium Grid 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="69" Name="Medium Grid 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="70" Name="Dark List Accent 6"/>
  <w:LsdException Locked="false" Priority="71" Name="Colorful Shading Accent 6"/>
  <w:LsdException Locked="false" Priority="72" Name="Colorful List Accent 6"/>
  <w:LsdException Locked="false" Priority="73" Name="Colorful Grid Accent 6"/>
  <w:LsdException Locked="false" Priority="19" QFormat="true"
   Name="Subtle Emphasis"/>
  <w:LsdException Locked="false" Priority="21" QFormat="true"
   Name="Intense Emphasis"/>
  <w:LsdException Locked="false" Priority="31" QFormat="true"
   Name="Subtle Reference"/>
  <w:LsdException Locked="false" Priority="32" QFormat="true"
   Name="Intense Reference"/>
  <w:LsdException Locked="false" Priority="33" QFormat="true" Name="Book Title"/>
  <w:LsdException Locked="false" Priority="37" SemiHidden="true"
   UnhideWhenUsed="true" Name="Bibliography"/>
  <w:LsdException Locked="false" Priority="39" SemiHidden="true"
   UnhideWhenUsed="true" QFormat="true" Name="TOC Heading"/>
  <w:LsdException Locked="false" Priority="41" Name="Plain Table 1"/>
  <w:LsdException Locked="false" Priority="42" Name="Plain Table 2"/>
  <w:LsdException Locked="false" Priority="43" Name="Plain Table 3"/>
  <w:LsdException Locked="false" Priority="44" Name="Plain Table 4"/>
  <w:LsdException Locked="false" Priority="45" Name="Plain Table 5"/>
  <w:LsdException Locked="false" Priority="40" Name="Grid Table Light"/>
  <w:LsdException Locked="false" Priority="46" Name="Grid Table 1 Light"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark"/>
  <w:LsdException Locked="false" Priority="51" Name="Grid Table 6 Colorful"/>
  <w:LsdException Locked="false" Priority="52" Name="Grid Table 7 Colorful"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 1"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 1"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 1"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 2"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 2"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 2"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 3"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 3"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 3"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 4"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 4"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 4"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 5"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 5"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 5"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="46"
   Name="Grid Table 1 Light Accent 6"/>
  <w:LsdException Locked="false" Priority="47" Name="Grid Table 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="48" Name="Grid Table 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="49" Name="Grid Table 4 Accent 6"/>
  <w:LsdException Locked="false" Priority="50" Name="Grid Table 5 Dark Accent 6"/>
  <w:LsdException Locked="false" Priority="51"
   Name="Grid Table 6 Colorful Accent 6"/>
  <w:LsdException Locked="false" Priority="52"
   Name="Grid Table 7 Colorful Accent 6"/>
  <w:LsdException Locked="false" Priority="46" Name="List Table 1 Light"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark"/>
  <w:LsdException Locked="false" Priority="51" Name="List Table 6 Colorful"/>
  <w:LsdException Locked="false" Priority="52" Name="List Table 7 Colorful"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 1"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 1"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 1"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 1"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 1"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 1"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 2"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 2"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 2"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 2"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 2"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 2"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 3"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 3"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 3"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 3"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 3"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 3"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 4"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 4"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 4"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 4"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 4"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 4"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 5"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 5"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 5"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 5"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 5"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 5"/>
  <w:LsdException Locked="false" Priority="46"
   Name="List Table 1 Light Accent 6"/>
  <w:LsdException Locked="false" Priority="47" Name="List Table 2 Accent 6"/>
  <w:LsdException Locked="false" Priority="48" Name="List Table 3 Accent 6"/>
  <w:LsdException Locked="false" Priority="49" Name="List Table 4 Accent 6"/>
  <w:LsdException Locked="false" Priority="50" Name="List Table 5 Dark Accent 6"/>
  <w:LsdException Locked="false" Priority="51"
   Name="List Table 6 Colorful Accent 6"/>
  <w:LsdException Locked="false" Priority="52"
   Name="List Table 7 Colorful Accent 6"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Mention"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Smart Hyperlink"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Hashtag"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Unresolved Mention"/>
  <w:LsdException Locked="false" SemiHidden="true" UnhideWhenUsed="true"
   Name="Smart Link"/>
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:-536870145 1342208091 0 0 415 0;}
@font-face
	{font-family:Courier;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Helv;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"New York";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:System;
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;
	mso-font-alt:"ＭＳ 明朝";
	mso-font-charset:128;
	mso-generic-font-family:roman;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Batang;
	panose-1:2 3 6 0 0 1 1 1 1 1;
	mso-font-alt:바탕;
	mso-font-charset:129;
	mso-generic-font-family:auto;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:宋体;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 2 5 0 0 0 0 0 0 0;
	mso-font-alt:新細明體;
	mso-font-charset:136;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:1 134742016 16 0 1048576 0;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;
	mso-font-alt:"ＭＳ ゴシック";
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Dotum;
	panose-1:2 11 6 0 0 1 1 1 1 1;
	mso-font-alt:돋움;
	mso-font-charset:129;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:SimHei;
	panose-1:2 1 6 9 6 1 1 1 1 1;
	mso-font-alt:黑体;
	mso-font-charset:134;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:MingLiU;
	panose-1:2 2 5 9 0 0 0 0 0 0;
	mso-font-alt:細明體;
	mso-font-charset:136;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 134742016 16 0 1048576 0;}
@font-face
	{font-family:Mincho;
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-alt:明朝;
	mso-font-charset:128;
	mso-generic-font-family:roman;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:Gulim;
	panose-1:2 11 6 0 0 1 1 1 1 1;
	mso-font-alt:굴림;
	mso-font-charset:129;
	mso-generic-font-family:roman;
	mso-font-pitch:fixed;
	mso-font-signature:1 151388160 16 0 524288 0;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Angsana New";
	panose-1:2 2 6 3 5 4 5 2 3 4;
	mso-font-charset:222;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:16777217 0 0 0 65536 0;}
@font-face
	{font-family:"Cordia New";
	panose-1:2 11 3 4 2 2 2 2 2 4;
	mso-font-charset:222;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:16777217 0 0 0 65536 0;}
@font-face
	{font-family:Mangal;
	panose-1:2 4 5 3 5 2 3 3 2 2;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:8192 0 0 0 0 0;}
@font-face
	{font-family:Latha;
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:262144 0 0 0 0 0;}
@font-face
	{font-family:Sylfaen;
	panose-1:1 10 5 2 5 3 6 3 3 3;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:67110535 0 0 0 159 0;}
@font-face
	{font-family:Vrinda;
	panose-1:2 11 5 2 4 2 4 2 2 3;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Raavi;
	panose-1:2 11 5 2 4 2 4 2 2 3;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Shruti;
	panose-1:2 11 5 2 4 2 4 2 2 3;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Sendnya;
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:2 11 5 2 4 2 4 2 2 3;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Tunga;
	panose-1:2 11 5 2 4 2 4 2 2 3;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Yu Gothic";
	panose-1:2 11 4 0 0 0 0 0 0 0;
	mso-font-alt:游ゴシック;
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 134676480 16 0 131072 0;}
@font-face
	{font-family:DengXian;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:等线;
	mso-font-charset:134;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-536859905 -1073732485 9 0 511 0;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Palatino Linotype";
	panose-1:2 4 5 2 5 5 5 3 3 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-pitch:variable;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-134238209 -371195905 63 0 4129279 0;}
@font-face
	{font-family:"Times Roman";
	panose-1:0 0 5 0 0 0 0 2 0 0;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:-536870145 1342185562 0 0 415 0;}
@font-face
	{font-family:"Helvetica Neue";
	panose-1:2 0 5 3 0 0 0 2 0 4;
	mso-font-charset:0;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:-452984065 1342208475 16 0 1 0;}
@font-face
	{font-family:"\@Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;
	mso-font-charset:128;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-134238209 -371195905 63 0 4129279 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin:0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;
	mso-fareast-font-family:"Arial Unicode MS";
	border:none;
	mso-ansi-language:EN-US;
	mso-fareast-language:EN-US;}
h1
	{mso-style-priority:9;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin-top:16.0pt;
	margin-right:0cm;
	margin-bottom:8.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:16.0pt;
	font-family:Helvetica;
	mso-fareast-font-family:Helvetica;
	mso-bidi-font-family:Helvetica;
	color:black;
	border:none;
	mso-font-kerning:0pt;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;}
h2
	{mso-style-priority:9;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:13.0pt;
	font-family:Helvetica;
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;
	mso-ansi-language:FR;}
h3
	{mso-style-priority:9;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin-top:6.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:3;
	font-size:12.0pt;
	font-family:Helvetica;
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;
	mso-ansi-language:EN-US;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-priority:10;
	mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	mso-style-next:Body;
	margin-top:24.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	text-align:center;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:28.0pt;
	font-family:Helvetica;
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;
	font-weight:bold;}
a:link, span.MsoHyperlink
	{mso-style-unhide:no;
	mso-style-parent:"";
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{mso-style-noshow:yes;
	mso-style-priority:99;
	color:fuchsia;
	mso-themecolor:followedhyperlink;
	text-decoration:underline;
	text-underline:single;}
em
	{mso-style-unhide:no;
	mso-style-parent:"";
	mso-ansi-font-size:12.0pt;
	mso-bidi-font-size:12.0pt;
	font-family:"Times Roman";
	mso-ascii-font-family:"Times Roman";
	mso-fareast-font-family:"Arial Unicode MS";
	mso-hansi-font-family:"Times Roman";
	mso-bidi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	color:black;
	mso-style-textfill-fill-color:black;
	mso-style-textfill-fill-alpha:100.0%;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	text-effect:none;
	mso-ansi-language:EN-US;
	font-weight:normal;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
p.FreeForm, li.FreeForm, div.FreeForm
	{mso-style-name:"Free Form";
	mso-style-unhide:no;
	mso-style-parent:"";
	margin:0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Helvetica;
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;}
p.HeaderFooter, li.HeaderFooter, div.HeaderFooter
	{mso-style-name:"Header & Footer";
	mso-style-unhide:no;
	mso-style-parent:"";
	margin:0cm;
	mso-pagination:widow-orphan;
	tab-stops:right 468.0pt;
	font-size:11.0pt;
	font-family:Helvetica;
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;}
p.Body, li.Body, div.Body
	{mso-style-name:Body;
	mso-style-unhide:no;
	mso-style-parent:"";
	margin-top:4.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times Roman";
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;}
p.Announcement, li.Announcement, div.Announcement
	{mso-style-name:Announcement;
	mso-style-unhide:no;
	mso-style-parent:"";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:12.0pt;
	margin-left:0cm;
	text-align:center;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	font-variant:small-caps;
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;
	mso-ansi-language:EN-US;
	font-weight:bold;}
span.Link
	{mso-style-name:Link;
	mso-style-unhide:no;
	mso-style-parent:"";
	color:#000099;
	mso-style-textfill-fill-color:#000099;
	mso-style-textfill-fill-alpha:100.0%;
	text-effect:none;
	text-decoration:underline;
	text-underline:single;}
span.Hyperlink0
	{mso-style-name:"Hyperlink\.0";
	mso-style-unhide:no;
	mso-style-parent:Link;
	color:#021EAA;
	mso-style-textfill-fill-color:#021EAA;
	mso-style-textfill-fill-alpha:100.0%;
	text-effect:none;
	text-decoration:underline;
	text-underline:single;}
span.Code
	{mso-style-name:Code;
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-ansi-font-size:11.0pt;
	mso-bidi-font-size:11.0pt;
	font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Arial Unicode MS";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	color:black;
	mso-style-textfill-fill-color:black;
	mso-style-textfill-fill-alpha:100.0%;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:-.3pt;
	text-effect:none;
	mso-ansi-language:EN-US;
	font-weight:normal;
	font-style:normal;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
p.BodyBullet, li.BodyBullet, div.BodyBullet
	{mso-style-name:"Body Bullet";
	mso-style-unhide:no;
	mso-style-parent:"";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times Roman";
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;
	mso-ansi-language:EN-US;}
span.Codeitalic
	{mso-style-name:"Code italic";
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-ansi-font-size:11.0pt;
	mso-bidi-font-size:11.0pt;
	font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Arial Unicode MS";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	color:black;
	mso-style-textfill-fill-color:black;
	mso-style-textfill-fill-alpha:100.0%;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:-.3pt;
	text-effect:none;
	mso-ansi-language:EN-US;
	font-weight:normal;
	font-style:italic;
	text-decoration:none;
	text-underline:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
p.Code0, li.Code0, div.Code0
	{mso-style-name:Code;
	mso-style-unhide:no;
	mso-style-parent:"";
	margin-top:0cm;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:1.0cm;
	line-height:80%;
	mso-pagination:widow-orphan;
	font-size:11.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	letter-spacing:-.2pt;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;
	mso-ansi-language:ES-TRAD;}
p.DescriptiveList, li.DescriptiveList, div.DescriptiveList
	{mso-style-name:"Descriptive List";
	mso-style-unhide:no;
	mso-style-parent:"";
	margin-top:4.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:1.0cm;
	text-indent:-1.0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times Roman";
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;
	mso-ansi-language:EN-US;}
p.DescriptiveListcont, li.DescriptiveListcont, div.DescriptiveListcont
	{mso-style-name:"Descriptive List cont";
	mso-style-unhide:no;
	mso-style-parent:"";
	margin-top:4.0pt;
	margin-right:0cm;
	margin-bottom:4.0pt;
	margin-left:1.0cm;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman",serif;
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;
	mso-ansi-language:EN-US;}
p.Heading2noTOC, li.Heading2noTOC, div.Heading2noTOC
	{mso-style-name:"Heading 2 no TOC";
	mso-style-unhide:no;
	mso-style-parent:"";
	mso-style-next:Body;
	margin-top:10.0pt;
	margin-right:0cm;
	margin-bottom:5.0pt;
	margin-left:0cm;
	mso-pagination:widow-orphan;
	mso-outline-level:2;
	font-size:13.0pt;
	font-family:Helvetica;
	mso-fareast-font-family:"Arial Unicode MS";
	mso-bidi-font-family:"Arial Unicode MS";
	color:black;
	border:none;
	mso-style-textoutline-type:none;
	mso-style-textoutline-outlinestyle-dpiwidth:0pt;
	mso-style-textoutline-outlinestyle-linecap:flat;
	mso-style-textoutline-outlinestyle-join:bevel;
	mso-style-textoutline-outlinestyle-pctmiterlimit:0%;
	mso-style-textoutline-outlinestyle-dash:solid;
	mso-style-textoutline-outlinestyle-align:center;
	mso-style-textoutline-outlinestyle-compound:simple;
	mso-ansi-language:DE;
	font-weight:bold;}
span.msoIns
	{mso-style-type:export-only;
	mso-style-name:"";
	text-decoration:underline;
	text-underline:single;
	color:#65B4B4;}
span.msoDel
	{mso-style-type:export-only;
	mso-style-name:"";
	text-decoration:line-through;
	color:#FF4B4B;}
.MsoChpDefault
	{mso-style-type:export-only;
	mso-default-props:yes;
	font-size:10.0pt;
	mso-ansi-font-size:10.0pt;
	mso-bidi-font-size:10.0pt;
	mso-fareast-font-family:"Arial Unicode MS";
	border:none;}
.MsoPapDefault
	{mso-style-type:export-only;}
 /* Page Definitions */
 @page
	{mso-footnote-separator:url("Readme_XC8_for_PIC.fld/header.htm") fs;
	mso-footnote-continuation-separator:url("Readme_XC8_for_PIC.fld/header.htm") fcs;
	mso-endnote-separator:url("Readme_XC8_for_PIC.fld/header.htm") es;
	mso-endnote-continuation-separator:url("Readme_XC8_for_PIC.fld/header.htm") ecs;}
@page WordSection1
	{size:612.0pt 792.0pt;
	margin:72.0pt 72.0pt 72.0pt 72.0pt;
	mso-header-margin:36.0pt;
	mso-footer-margin:43.2pt;
	mso-header:url("Readme_XC8_for_PIC.fld/header.htm") h1;
	mso-footer:url("Readme_XC8_for_PIC.fld/header.htm") f1;
	mso-paper-source:0;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 @list l0
	{mso-list-id:96367950;
	mso-list-type:hybrid;
	mso-list-template-ids:140019326 2058376246 52831452 1927154534 -1064389330 764293344 1728734720 -1775073790 1585339374 842830922;
	mso-list-style-id:702484664;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:9.0pt;
	mso-level-number-position:left;
	margin-left:37.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level2
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:29.1pt;
	mso-level-number-position:left;
	margin-left:57.45pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level3
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:45.8pt;
	mso-level-number-position:left;
	margin-left:74.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level4
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:63.8pt;
	mso-level-number-position:left;
	margin-left:92.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level5
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:81.8pt;
	mso-level-number-position:left;
	margin-left:110.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level6
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:99.8pt;
	mso-level-number-position:left;
	margin-left:128.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level7
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:117.8pt;
	mso-level-number-position:left;
	margin-left:146.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level8
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:135.8pt;
	mso-level-number-position:left;
	margin-left:164.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l0:level9
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:153.8pt;
	mso-level-number-position:left;
	margin-left:182.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1
	{mso-list-id:289553946;
	mso-list-type:hybrid;
	mso-list-template-ids:1837126858 546578804 -1300597746 -1413989184 -101702830 1376827754 -1419229654 376760580 67691494 -2001556146;
	mso-list-style-name:Bullet;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:37.35pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level2
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:27.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level3
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:45.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level4
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:63.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level5
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:81.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level6
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:99.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level7
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:117.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level8
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:135.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l1:level9
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:153.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2
	{mso-list-id:429549612;
	mso-list-template-ids:2000077672;
	mso-list-style-name:Legal;}
@list l2:level1
	{mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level2
	{mso-level-text:"%1\.%2\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:32.4pt;
	text-indent:-32.4pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level3
	{mso-level-text:"%1\.%2\.%3\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:39.9pt;
	text-indent:-39.9pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level4
	{mso-level-text:"%1\.%2\.%3\.%4\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:102.5pt;
	text-indent:-48.5pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level5
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:129.8pt;
	text-indent:-57.8pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level6
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:156.45pt;
	text-indent:-66.45pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level7
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:184.45pt;
	text-indent:-76.45pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level8
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:211.05pt;
	text-indent:-3.0cm;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l2:level9
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.%9\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:239.05pt;
	text-indent:-95.05pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3
	{mso-list-id:702484664;
	mso-list-type:hybrid;
	mso-list-template-ids:140019326 690362614 475816814 -783394678 547802310 1503320768 -1912146228 -2116123742 1459920734 -1972185578;
	mso-list-style-name:"Descriptive bullet";}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:9.0pt;
	mso-level-number-position:left;
	margin-left:37.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level2
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:29.1pt;
	mso-level-number-position:left;
	margin-left:57.45pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level3
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:45.8pt;
	mso-level-number-position:left;
	margin-left:74.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level4
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:63.8pt;
	mso-level-number-position:left;
	margin-left:92.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level5
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:81.8pt;
	mso-level-number-position:left;
	margin-left:110.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level6
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:99.8pt;
	mso-level-number-position:left;
	margin-left:128.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level7
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:117.8pt;
	mso-level-number-position:left;
	margin-left:146.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level8
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:135.8pt;
	mso-level-number-position:left;
	margin-left:164.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l3:level9
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:153.8pt;
	mso-level-number-position:left;
	margin-left:182.15pt;
	text-indent:-38.15pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4
	{mso-list-id:864557014;
	mso-list-type:hybrid;
	mso-list-template-ids:1837126858 1604085918 -399880226 -2100921578 2068850156 574248404 625525400 -250712354 -660589222 573184500;
	mso-list-style-id:289553946;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:37.35pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level2
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:27.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level3
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:45.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level4
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:63.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level5
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:81.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level6
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:99.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level7
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:117.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level8
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:135.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level9
	{mso-level-number-format:bullet;
	mso-level-text:•;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:153.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5
	{mso-list-id:1079523945;
	mso-list-template-ids:2000077672;
	mso-list-style-id:429549612;}
@list l5:level1
	{mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level2
	{mso-level-text:"%1\.%2\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:32.4pt;
	text-indent:-32.4pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level3
	{mso-level-text:"%1\.%2\.%3\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:39.9pt;
	text-indent:-39.9pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level4
	{mso-level-text:"%1\.%2\.%3\.%4\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:102.5pt;
	text-indent:-48.5pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level5
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:129.8pt;
	text-indent:-57.8pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level6
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:156.45pt;
	text-indent:-66.45pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level7
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:184.45pt;
	text-indent:-76.45pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level8
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:211.05pt;
	text-indent:-3.0cm;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level9
	{mso-level-text:"%1\.%2\.%3\.%4\.%5\.%6\.%7\.%8\.%9\.";
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:239.05pt;
	text-indent:-95.05pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level1 lfo5
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level2 lfo5
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:29.9pt;
	text-indent:-29.9pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level3 lfo5
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:39.9pt;
	text-indent:-39.9pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level4 lfo5
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:102.5pt;
	text-indent:-48.5pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level5 lfo5
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:129.8pt;
	text-indent:-57.8pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level6 lfo5
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:156.45pt;
	text-indent:-66.45pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level7 lfo5
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:184.45pt;
	text-indent:-76.45pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level8 lfo5
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:211.05pt;
	text-indent:-3.0cm;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level9 lfo5
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:239.05pt;
	text-indent:-95.05pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level1 lfo7
	{mso-level-numbering:continue;
	mso-level-tab-stop:26.85pt;
	mso-level-number-position:left;
	margin-left:55.2pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level2 lfo7
	{mso-level-numbering:continue;
	mso-level-tab-stop:27.0pt;
	mso-level-number-position:left;
	margin-left:55.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level3 lfo7
	{mso-level-numbering:continue;
	mso-level-tab-stop:45.0pt;
	mso-level-number-position:left;
	margin-left:73.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level4 lfo7
	{mso-level-numbering:continue;
	mso-level-tab-stop:63.0pt;
	mso-level-number-position:left;
	margin-left:91.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level5 lfo7
	{mso-level-numbering:continue;
	mso-level-tab-stop:81.0pt;
	mso-level-number-position:left;
	margin-left:109.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level6 lfo7
	{mso-level-numbering:continue;
	mso-level-tab-stop:99.0pt;
	mso-level-number-position:left;
	margin-left:127.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level7 lfo7
	{mso-level-numbering:continue;
	mso-level-tab-stop:117.0pt;
	mso-level-number-position:left;
	margin-left:145.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level8 lfo7
	{mso-level-numbering:continue;
	mso-level-tab-stop:135.0pt;
	mso-level-number-position:left;
	margin-left:163.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level9 lfo7
	{mso-level-numbering:continue;
	mso-level-tab-stop:153.0pt;
	mso-level-number-position:left;
	margin-left:181.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level1 lfo8
	{mso-level-numbering:continue;
	mso-level-tab-stop:26.85pt;
	mso-level-number-position:left;
	margin-left:55.2pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level2 lfo8
	{mso-level-numbering:continue;
	mso-level-tab-stop:27.0pt;
	mso-level-number-position:left;
	margin-left:55.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level3 lfo8
	{mso-level-numbering:continue;
	mso-level-tab-stop:45.0pt;
	mso-level-number-position:left;
	margin-left:73.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level4 lfo8
	{mso-level-numbering:continue;
	mso-level-tab-stop:63.0pt;
	mso-level-number-position:left;
	margin-left:91.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level5 lfo8
	{mso-level-numbering:continue;
	mso-level-tab-stop:81.0pt;
	mso-level-number-position:left;
	margin-left:109.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level6 lfo8
	{mso-level-numbering:continue;
	mso-level-tab-stop:99.0pt;
	mso-level-number-position:left;
	margin-left:127.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level7 lfo8
	{mso-level-numbering:continue;
	mso-level-tab-stop:117.0pt;
	mso-level-number-position:left;
	margin-left:145.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level8 lfo8
	{mso-level-numbering:continue;
	mso-level-tab-stop:135.0pt;
	mso-level-number-position:left;
	margin-left:163.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level9 lfo8
	{mso-level-numbering:continue;
	mso-level-tab-stop:153.0pt;
	mso-level-number-position:left;
	margin-left:181.35pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level1 lfo10
	{mso-level-numbering:continue;
	mso-level-tab-stop:26.85pt;
	mso-level-number-position:left;
	margin-left:55.2pt;
	text-indent:-37.35pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level2 lfo10
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:27.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level3 lfo10
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:45.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level4 lfo10
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:63.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level5 lfo10
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:81.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level6 lfo10
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:99.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level7 lfo10
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:117.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level8 lfo10
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:135.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l4:level9 lfo10
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:153.0pt;
	text-indent:-9.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:1.0pt;
	mso-text-raise:-1.0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level1 lfo14
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:18.0pt;
	text-indent:-18.0pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level2 lfo14
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:29.9pt;
	text-indent:-29.9pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level3 lfo14
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:75.9pt;
	text-indent:-39.9pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level4 lfo14
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:102.5pt;
	text-indent:-48.5pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level5 lfo14
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:129.8pt;
	text-indent:-57.8pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level6 lfo14
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:156.45pt;
	text-indent:-66.45pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level7 lfo14
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:184.45pt;
	text-indent:-76.45pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level8 lfo14
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:211.05pt;
	text-indent:-3.0cm;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
@list l5:level9 lfo14
	{mso-level-numbering:continue;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:239.05pt;
	text-indent:-95.05pt;
	mso-hansi-font-family:"Arial Unicode MS";
	font-variant:normal !important;
	text-transform:none;
	position:relative;
	top:0pt;
	mso-text-raise:0pt;
	letter-spacing:0pt;
	background:windowtext;
	mso-highlight:windowtext;
	mso-font-width:100%;
	mso-font-kerning:0pt;
	text-effect:none;
	text-effect:none;
	text-effect:none;
	mso-ansi-font-weight:bold;
	mso-bidi-font-weight:bold;
	text-decoration:none;
	text-line-through:none;
	vertical-align:baseline;}
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-parent:"";
	mso-padding-alt:0cm 5.4pt 0cm 5.4pt;
	mso-para-margin:0cm;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman",serif;
	border:none;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-AU link="#000000" vlink=fuchsia style='tab-interval:36.0pt;
word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoTitle>MPLAB<sup>®</sup><span lang=IT style='mso-ansi-language:IT'>
XC8 C Compiler</span><br>
<span lang=DE style='mso-ansi-language:DE'>Version </span><span lang=EN-US
style='mso-ansi-language:EN-US'>2.36</span>&nbsp;<span lang=EN-US
style='mso-ansi-language:EN-US'>Release Notes</span><br>
<span lang=EN-US style='mso-ansi-language:EN-US'>for PIC</span><sup>®</sup><span
lang=EN-US style='mso-ansi-language:EN-US'> MCU</span></p>

<p class=MsoTitle><span lang=EN-US style='font-size:14.0pt;mso-ansi-language:
EN-US'>Includes the MPLAB XC8 PIC Assembler</span><span style='font-size:14.0pt'><o:p></o:p></span></p>

<p class=Body align=center style='text-align:center'><o:p>&nbsp;</o:p></p>

<p class=Body align=center style='text-align:center'><o:p>&nbsp;</o:p></p>

<p class=Body align=center style='text-align:center'><o:p>&nbsp;</o:p></p>

<p class=Announcement><span lang=EN-US>This document contains important
information<br>
relating to the </span><span lang=EN-US style='font-size:11.0pt'>MPLAB XC8 C</span><span
lang=EN-US> compiler when targeting microchip </span><span lang=EN-US
style='font-size:11.0pt'>PIC</span><span lang=IT style='mso-ansi-language:IT'>
devices.</span><span lang=EN-US><br>
Please read it before running this software.</span></p>

<p class=Announcement><span lang=EN-US>See the<br>
</span><span lang=EN-US style='font-size:11.0pt'>MPLAB XC8 C</span><span
lang=EN-US> compiler release notes for </span><span lang=EN-US
style='font-size:11.0pt'>AVR</span><span lang=PT style='mso-ansi-language:PT'>
document</span><span lang=EN-US><br>
if you are using the compiler for </span><span lang=EN-US style='font-size:
11.0pt'>8</span><span lang=EN-US>-bit </span><span lang=EN-US style='font-size:
11.0pt'>AVR</span><span lang=EN-US> devices</span></p>

<p class=Announcement><span lang=EN-US style='font-family:"Times Roman";
mso-fareast-font-family:"Times Roman";mso-bidi-font-family:"Times Roman"'><o:p>&nbsp;</o:p></span></p>

<p class=Announcement><span lang=EN-US style='font-family:"Times Roman";
mso-fareast-font-family:"Times Roman";mso-bidi-font-family:"Times Roman"'><o:p>&nbsp;</o:p></span></p>

<h2 align=center style='text-align:center'><span lang=FR><o:p>&nbsp;</o:p></span></h2>

<p class=Body align=center style='text-align:center'><span class=Hyperlink0><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#TOC_Overview"><span lang=NL style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%;mso-ansi-language:NL'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>Overview</span></span></a></span></span></p>

<p class=Body align=center style='text-align:center'><span class=Hyperlink0><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#TOC_Documentation"><span lang=EN-US style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%;
mso-ansi-language:EN-US'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>Documentation Updates</span></span></a></span></span></p>

<p class=Body align=center style='text-align:center'><span class=Hyperlink0><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#Toc_WhatsNew"><span lang=EN-US style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%;mso-ansi-language:EN-US'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>What</span></span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman";color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span dir=RTL></span><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>’</span></span><span lang=EN-US style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%;mso-ansi-language:EN-US'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>s New</span></span></a></span></span></p>

<p class=Body align=center style='text-align:center'><span class=Hyperlink0><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#Toc_MigrationIssues"><span lang=EN-US style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%;
mso-ansi-language:EN-US'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>Migration Issues</span></span></a></span></span></p>

<p class=Body align=center style='text-align:center'><span class=Hyperlink0><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#Toc_FixedIssues"><span lang=EN-US style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%;
mso-ansi-language:EN-US'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>Fixed Issues</span></span></a></span></span></p>

<p class=Body align=center style='text-align:center'><span class=Hyperlink0><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#Toc_KnownIssues"><span lang=EN-US style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%;
mso-ansi-language:EN-US'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>Known Issues</span></span></a></span></span></p>

<p class=Body align=center style='text-align:center'><span class=Hyperlink0><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#Toc_MicrochipErrata"><span lang=IT style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%;
mso-ansi-language:IT'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>Microchip Errata</span></span></a></span></span></p>

<span style='font-size:12.0pt;font-family:"Arial Unicode MS",sans-serif;
color:black;mso-style-textoutline-type:none;mso-style-textoutline-outlinestyle-dpiwidth:
0pt;mso-style-textoutline-outlinestyle-linecap:flat;mso-style-textoutline-outlinestyle-join:
bevel;mso-style-textoutline-outlinestyle-pctmiterlimit:0%;mso-style-textoutline-outlinestyle-dash:
solid;mso-style-textoutline-outlinestyle-align:center;mso-style-textoutline-outlinestyle-compound:
simple;mso-ansi-language:EN-AU;mso-fareast-language:EN-GB;mso-bidi-language:
AR-SA'><br clear=all style='mso-special-character:line-break;page-break-before:
always'>
</span>

<p class=Body><o:p>&nbsp;</o:p></p>

<h1 style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l5 level1 lfo2'><a
name="TOC_Overview"><![if !supportLists]><span style='mso-hansi-font-family:
"Arial Unicode MS"'><span style='mso-list:Ignore'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=NL style='mso-fareast-font-family:
"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:
NL'>Overview</span></a></h1>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=FR>Introduction</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>This release of
the Microchip MPLAB</span><sup>®</sup><span lang=IT style='mso-ansi-language:
IT'> XC8 C compiler </span><span lang=EN-US style='mso-ansi-language:EN-US'>implements
minor bug fixes and installer changes.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Release Date</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The official
release date of this compiler version is the 27 January 2022. </span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Previous Version</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The previous
MPLAB XC8 C compiler version was 2.35, released 16 December 2021</span>.</p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Functional Safety Manual</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>A Functional
Safety Manual for the MPLAB XC compilers is available in the documentation
package when you purchase a functional safety license.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Component Licenses </span><span
lang=DE style='mso-ansi-language:DE'>and Versions</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Components of
the</span> MPLAB<sup>®</sup> XC<span lang=EN-US style='mso-ansi-language:EN-US'>8</span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>C </span>Compiler
for <span lang=EN-US style='mso-ansi-language:EN-US'>PIC MCUs tools are written
and distributed under the LLVM</span><span lang=EN-US> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>Release License, detailed in the file named </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>LLVM_LICENSE.txt</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>, located the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>docs</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> subdirectory of your install
directory.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>This compiler
uses an implementation of Clang version 4.0.1 based upon LLVM 4.0.1.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>System Requirements</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The MPLAB XC8 C
compiler and the licensing software it utilizes are available for a variety of
operating systems, including 64-bit versions of the following: Professional
editions of Microsoft </span><span lang=IT style='mso-ansi-language:IT'>Windows
10; Ubuntu </span><span lang=EN-US style='mso-ansi-language:EN-US'>18.04; and
mac</span>OS 10.<span lang=EN-US style='mso-ansi-language:EN-US'>15.5</span>.<span
lang=EN-US style='mso-ansi-language:EN-US'> Binaries for Windows have been
code-signed. Binaries for macOS have been code-signed and notarized.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>If you are
running a network license server, only computers with operating systems
supported by the compilers may be used to host the license server. As of xclm
version 2.0, the network license server can be installed on a Microsoft Windows
Server platform, but the license server does not need to run on a server
version of the operating system.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.7.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Devices Supported</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>This compiler
supports all known 8-bit PIC</span><sup>®</sup><span lang=EN-US
style='mso-ansi-language:EN-US'> MCU devices at the time of release. See </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>pic_chipinfo.html</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (in the compiler's </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>doc</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> directory) for a list of all
supported baseline and mid-range devices and </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>pic18_chipinfo.html</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> for a list of all supported PIC18 devices.
These files also list configuration bit settings for each device.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.8.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Editions and License Upgrades</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The MPLAB XC8
compiler can be activated as a</span><span lang=EN-US> </span><span lang=EN-US
style='mso-ansi-language:EN-US'>licensed (PRO) or unlicensed (Free) product</span>.
<span lang=EN-US style='mso-ansi-language:EN-US'>You need to purchase an
activation key to license your compiler.</span><span lang=EN-US> </span><span
lang=EN-US style='mso-ansi-language:EN-US'>A license allows for a higher level
of optimization compared to the Free product</span>. A<span lang=EN-US
style='mso-ansi-language:EN-US'>n unlicensed compiler can be operated
indefinitely without a license.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>An MPLAB XC8
Functional Safety c</span>ompiler <span lang=EN-US style='mso-ansi-language:
EN-US'>must be activated with a functional safety license purchased from
Microchip. The compiler will not operate without this license. Once activated,
you can select any optimization level and use all the compiler features.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.9.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Installation and Activation</span></h2>

<p class=Body><i><span lang=EN-US style='mso-ansi-language:EN-US'>See also the
Migration Issues and Limitations sections for important information about the
latest license manager included with this compiler.</span><o:p></o:p></i></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>If using MPLAB
IDE, be sure to install the latest MPLAB X IDE before installing this tool.
Quit the IDE before installing the compiler. Run the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.exe</span></span></span><span
lang=IT style='mso-ansi-language:IT'> (Windows), </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.run</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (Linux) or </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.app</span></span></span>
(<span lang=EN-US style='mso-ansi-language:EN-US'>macOS</span><span lang=IT
style='mso-ansi-language:IT'>) compiler installer application, e.g. </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>XC8-1.00.11403-windows.exe</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> and follow the directions on the
screen. The default installation directory is recommended. If you are using
Linux, you must install the compiler using a terminal and from a root account.
Install using a macOS account with administrator privileges.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Activation is
now carried out separately to installation. See the document <i>License Manager
for MPLAB</i></span><i><sup>®</sup></i><i><span lang=IT style='mso-ansi-language:
IT'> XC C Compilers</span></i><span lang=EN-US style='mso-ansi-language:EN-US'>
(DS52059) for more information.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>If you choose to
run the compiler under the evaluation license, you will now get a warning
during compilation when you are within 14 days of the end of your evaluation
period. The same warning is issued if you are within 14 days of the end of your
HPA subscription.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Note that as of
MPLAB XC8 version 1.34, the XC Network License Server is a separate installer
and is not included in the single-user compiler installer.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Note also that
the use of MPLAB XC8 version 1.34 with MPLAB IDE v8 is now deprecated. DLL
files needed by this IDE are no longer installed with the compiler.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The XC License
Manager now supports roaming of floating network licenses. Aimed at mobile
users, this feature allows a floating license to go off network for a short
period of time. Using this feature, you can disconnect from the network and
still use your MPLAB XC compiler. See the doc folder of the XCLM install for
more on this feature.</span><br>
<span lang=EN-US style='mso-ansi-language:EN-US'>MPLAB X IDE v1.40 includes a
Licenses window (Tools &gt; Licenses) to visually manage roaming.</span></p>

<h3 style='margin-left:39.9pt;text-indent:-39.9pt;mso-list:l5 level3 lfo2'><![if !supportLists]><span
lang=EN-US style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.9.1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>Resolving Installation Issues</span></h3>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>If you
experience difficulties installing the compiler under any of the Windows
operating systems, try the following suggestions.</span></p>

<p class=BodyBullet style='margin-left:37.35pt;text-indent:-9.0pt;mso-list:
l4 level1 lfo4'><![if !supportLists]><span lang=EN-US style='mso-hansi-font-family:
"Arial Unicode MS";position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span
style='mso-list:Ignore'>•<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US>Run the install as an administrator.</span></p>

<p class=BodyBullet style='margin-left:37.35pt;text-indent:-9.0pt;mso-list:
l4 level1 lfo4'><![if !supportLists]><span lang=EN-US style='mso-hansi-font-family:
"Arial Unicode MS";position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span
style='mso-list:Ignore'>•<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US>Set the permissions of the installer application to 'Full control'.
(Right-click the file, select Properties, Security tab, select user, edit.)</span></p>

<p class=BodyBullet style='margin-top:0cm;margin-right:0cm;margin-bottom:0cm;
margin-left:37.35pt;text-indent:-9.0pt;mso-list:l4 level1 lfo4'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US>Set permissions of the temp folder to </span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>‘</span><span
lang=IT style='mso-ansi-language:IT'>Full Control</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
dir=LTR></span><span lang=EN-US><span dir=LTR></span>.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>To determine the
location of the temp folder, type </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>%temp%</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> into the Run command (Windows logo
key + R). This will open a file explorer dialog showing that directory and will
allow you to determine the path of that folder.</span></p>

<h3 style='margin-left:29.9pt;text-indent:-29.9pt;mso-list:l5 level2 lfo5'><![if !supportLists]><span
lang=EN-US style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.10.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US>Compiler Documentation</span></h3>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>There are
several versions of the compiler user's guide, each custom</span>ize<span
lang=EN-US style='mso-ansi-language:EN-US'>d for a particular use of the
compiler. The guides described below can be opened from the HTML page that opens
in your browser when clicking the blue help button in MPLAB X IDE dashboard, as
indicated in the screenshot.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>If you are
building for 8-bit PIC targets and you are using the new</span><!--[if gte vml 1]><v:shapetype
 id="_x0000_t75" coordsize="21600,21600" o:spt="75" o:preferrelative="t"
 path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="officeArt_x0020_object" o:spid="_x0000_s1026"
 type="#_x0000_t75" style='position:absolute;margin-left:357.35pt;margin-top:87.7pt;
 width:110.15pt;height:102.2pt;z-index:251659264;visibility:visible;
 mso-wrap-style:square;mso-wrap-distance-left:12pt;mso-wrap-distance-top:12pt;
 mso-wrap-distance-right:12pt;mso-wrap-distance-bottom:12pt;
 mso-position-horizontal:absolute;mso-position-horizontal-relative:margin;
 mso-position-vertical:absolute;mso-position-vertical-relative:page'
 wrapcoords="-10 -11 21590 -11 21590 21589 -10 21589 -10 -11" strokeweight="1pt">
 <v:stroke miterlimit="4"/>
 <v:imagedata src="Readme_XC8_for_PIC.fld/image001.png" o:title=""/>
 <w:wrap type="through" anchorx="margin" anchory="page"/>
</v:shape><![endif]--><![if !vml]><img width=110 height=102
src="Readme_XC8_for_PIC.fld/image002.jpg" align=left hspace=16 vspace=16
v:shapes="officeArt_x0020_object"><![endif]><span style='mso-ansi-language:
EN-US'> </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xc8-cc</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> driver, the MPLAB</span><sup>®</sup><span
lang=EN-US style='mso-ansi-language:EN-US'> XC8 C Compiler User's Guide for PIC</span><sup>®</sup><span
lang=EN-US style='mso-ansi-language:EN-US'> MCU contains information on the
new-format compiler options and C99 features that are applicable to this
architecture.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>If you are
building legacy projects for 8-bit PIC targets or you using the original</span><span
lang=EN-US> </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> driver, the legacy</span> MPLAB<sup>®</sup>
XC8 C <span lang=EN-US style='mso-ansi-language:EN-US'>Legacy Compiler User's
Guide contains information on the old-style compiler options and C90 features
that are applicable to this architecture.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>1.11.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Customer Support</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Common problems
are explained in the </span><span class=Hyperlink0><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><a
href="https://www.microchip.com/stellent/idcplg?IdcService=SS_GET_PAGE&amp;nodeId=2903&amp;param=en549920"><span
lang=ES-TRAD style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%;mso-ansi-language:ES-TRAD'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>FAQ list</span></span></a></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>. You can also ask questions of
other users of this product in the </span><span class=Hyperlink0><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="https://www.microchip.com/forums/f249.aspx"><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>XC8 Forum</span></span></a></span></span>.</p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Microchip
welcomes bug reports, suggestions or comments regarding this compiler version.
Please direct any bug reports or feature requests via the </span><span
class=Hyperlink0><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><a
href="https://www.microchip.com/technical-support/hot-topics"><span lang=EN-US
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%;mso-ansi-language:EN-US'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>Support System</span></span></a></span></span>.</p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>At times,
advisory message 1395 may be issued by the compiler. This message is part of a
new testing process. The compiler will display this message if it encounters a
specific code sequence that results in internal compiler templates being used
in a unique way. This message does not imply a bug in the generated code; however,
the code sequence encountered could be used to further improve the compiler's
performance. If you wish to participate by contributing the code that generated
this message, you are welcome to send the project to </span><span
class=Hyperlink0><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><a
href="https://www.microchip.com/technical-support/hot-topics"><span lang=IT
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%;mso-ansi-language:IT'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>Support</span></span></a></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>; otherwise, you may ignore this
message.</span><span style='font-family:"Arial Unicode MS",sans-serif'><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</span></p>

<h1 style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l5 level1 lfo2'><a
name="TOC_Documentation"></a><![if !supportLists]><span style='mso-hansi-font-family:
"Arial Unicode MS"'><span style='mso-list:Ignore'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span style='mso-fareast-font-family:"Arial Unicode MS";
mso-bidi-font-family:"Arial Unicode MS"'>D</span><span lang=EN-US
style='mso-fareast-font-family:"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS";
mso-ansi-language:EN-US'>ocumentation Updates</span></h1>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>For on-line and
up-to-date versions of MPLAB XC8 documentation, please visit Microchip's </span><span
class=Link><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><a href="https://onlinedocs.microchip.com"><span
lang=EN-US style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%;mso-ansi-language:EN-US'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>Online Technical D<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>ocumentation</span></span></span></a></span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> website.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>New or updated
PIC documentation in this release:</span></p>

<p class=Body style='margin-left:37.35pt;text-indent:-9.0pt;mso-list:l4 level1 lfo4'><![if !supportLists]><span
style='mso-hansi-font-family:"Arial Unicode MS";position:relative;top:1.0pt;
mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span></span><![endif]><span lang=EN-US style='mso-ansi-language:EN-US'>Installing
and Licensing MPLAB</span>® <span lang=EN-US style='mso-ansi-language:EN-US'>XC
C Compilers (DS50002059</span><span lang=FR style='mso-ansi-language:FR'>)
revision </span><span lang=EN-US style='mso-ansi-language:EN-US'>L</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The </span><i>MPLAB<sup>®</sup></i><i><span
lang=DE style='mso-ansi-language:DE'> XC8 C Compiler User</span></i><span
dir=RTL></span><i><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span></i><i><span lang=IT style='mso-ansi-language:IT'>s
Guide</span></i><i><span lang=EN-US style='mso-ansi-language:EN-US'> for PIC</span><sup>®</sup></i><i><span
lang=EN-US style='mso-ansi-language:EN-US'> MCU</span></i><span lang=EN-US
style='mso-ansi-language:EN-US'> describes the operation and options associated
with the new </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xc8-cc</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> driver and the C99 compliant
compiler features. If you need assistance with the options for the previous </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> driver or with C90-specific
information, the </span><i>MPLAB<sup>®</sup> XC8 C </i><i><span lang=EN-US
style='mso-ansi-language:EN-US'>Legacy </span></i><i><span lang=DE
style='mso-ansi-language:DE'>Compiler User</span></i><span dir=RTL></span><i><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></i><i><span
lang=IT style='mso-ansi-language:IT'>s Guide</span></i><span lang=EN-US
style='mso-ansi-language:EN-US'> (</span>DS50002053<span lang=EN-US
style='mso-ansi-language:EN-US'>) is available.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The <i>Microchip
Unified Standard Library Reference Guide</i> describes the behavior of and
interface to the functions defined by the Microchip Unified Standard Library,
as well as the intended use of the library types and macros. Some of this
information was formerly contained in the </span><i>MPLAB<sup>®</sup></i><i><span
lang=DE style='mso-ansi-language:DE'> XC8 C Compiler User</span></i><span
dir=RTL></span><i><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span></i><i><span lang=IT style='mso-ansi-language:IT'>s
Guide</span></i><i><span lang=EN-US style='mso-ansi-language:EN-US'> for PIC</span><sup>®</sup></i><i><span
lang=EN-US style='mso-ansi-language:EN-US'> MCU.</span></i><span lang=EN-US
style='mso-ansi-language:EN-US'> Device-specific library information is still
contained in this compiler guide.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>If you are just
starting out with 8-bit PIC devices and the MPLAB XC8 C Compiler, the </span><i>MPLAB<sup>®</sup></i><i><span
lang=EN-US style='mso-ansi-language:EN-US'> XC8 User</span></i><span dir=RTL></span><i><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></i><i><span
lang=EN-US style='mso-ansi-language:EN-US'>s Guide for Embedded Engineers - PIC</span><sup>®</sup></i><i><span
lang=ES-TRAD style='mso-ansi-language:ES-TRAD'> MCUs</span></i><span
lang=EN-US style='mso-ansi-language:EN-US'> (DS50002400) has information on
setting up projects in the MPLAB X IDE and writing code for your first MPLAB
XC8 C project. This guide is available on Microchip's website.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The </span><i>MPLAB<sup>®</sup></i><i><span
lang=DE style='mso-ansi-language:DE'> XC8 PIC</span><sup>®</sup></i><i><span
lang=EN-US style='mso-ansi-language:EN-US'> Assembler User's Guide</span></i><span
lang=EN-US style='mso-ansi-language:EN-US'> is intended for those written
assembly-only projects. If you are using assembly with C code, instead refer to
the Assembler section in the </span><i>MPLAB<sup>®</sup></i><i><span lang=DE
style='mso-ansi-language:DE'> XC8 C Compiler User</span></i><span dir=RTL></span><i><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></i><i><span
lang=IT style='mso-ansi-language:IT'>s Guide</span></i><i><span lang=EN-US
style='mso-ansi-language:EN-US'> for PIC</span><sup>®</sup></i><i><span
lang=EN-US style='mso-ansi-language:EN-US'> MCU.</span></i></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The <i>Hexmate
User's Guide</i> is intended for those running Hexmate as a stand-alone
application. If you are using Hexmate as part of the MPLAB XC8 C compiler,
instead refer to the Hexmate section in the </span><i>MPLAB<sup>®</sup></i><i><span
lang=DE style='mso-ansi-language:DE'> XC8 C Compiler User</span></i><span
dir=RTL></span><i><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span></i><i><span lang=IT style='mso-ansi-language:IT'>s
Guide</span></i><i><span lang=EN-US style='mso-ansi-language:EN-US'> for PIC</span><sup>®</sup></i><i><span
lang=EN-US style='mso-ansi-language:EN-US'> MCU.</span></i></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The following
sections provide corrections and additional information to that found in the
user's guides shipped with the compiler.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><a
name=smart></a><![if !supportLists]><span lang=FR style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>2.1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></span><![endif]><span lang=FR>smart-io-format</span><span
lang=EN-US style='mso-ansi-language:EN-US'> Option</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-msmart-io-format=</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>fmt</span></span></span><span lang=EN-US style='mso-ansi-language:EN-US'>
option, where </span><span class=Codeitalic><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>fmt</span></span></span><span lang=EN-US
style='mso-ansi-language:EN-US'> is a string containing formatted IO conversion
specifications, notifies the compiler that the listed specifications are used
by smart IO functions.</span></p>

<p class=Body>T<span lang=EN-US style='mso-ansi-language:EN-US'>o reduce code
size, the compiler customizes library code associated with the print and scan
families of smart IO functions, based on the conversion specifications present
in the format strings collated across all calls to these functions. This
feature is fully automatic and cannot be disabled.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>In some
situations, the compiler is unable to determine usage information from the
formatted IO function call. If the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-msmart-io<span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-format=</span></span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>fmt</span></span></span><span lang=EN-US style='mso-ansi-language:EN-US'>
option has been used, the required conversion specifications for these
functions are obtained from the </span><span class=Codeitalic><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>fmt</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> string; otherwise, the compiler
makes no assumptions about how the functions are used and ensures that fully
functional formatted IO functions are linked into the final program image.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>For example,
consider the following calls to smart IO functions.</span></p>

<p class=Code0><span lang=ES-TRAD>vscanf(&quot;%d:%li&quot;, va_list1);</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>vprintf(&quot;%-s%d&quot;,
va_list2);</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>vprintf(fmt1,
va_list3);</span><span lang=ES-TRAD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='mso-ansi-language:FR'>// ambiguous usage</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>vscanf(fmt2,
va_list4);<span style='mso-spacerun:yes'>         </span>// </span><span
lang=FR style='mso-ansi-language:FR'>ambiguous usage</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>When processing
the last two calls, the compiler cannot deduce any usage information from
either the format strings, nor the arguments. In these instances, the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-msmart-io-format</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> option can be used and will
potentially allow more optimal formatted IO functions to be generated, thus
reducing the program's code size. For example, if the format strings pointed to
by </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>fmt1</span></span></span><span lang=EN-US style='mso-ansi-language:
EN-US'> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>fmt2</span></span></span><span
lang=EN-US> </span><span lang=EN-US style='mso-ansi-language:EN-US'>collectively
use only the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&quot;%d&quot;</span></span></span>, <span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&quot;%i&quot;</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> and </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&quot;%s&quot;</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> conversion specifiers</span>,<span
lang=EN-US style='mso-ansi-language:EN-US'> the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-msmart-io-format=fmt=&quot;%d%i%s&quot;</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> option should be issued.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The </span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>fmt</span></span></span><span lang=EN-US style='mso-ansi-language:EN-US'>
string may contain any valid conversion specification, including flags and
modifiers (for example </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&quot;%-13.9ls&quot;</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>), and should reflect exactly those
used by the functions whose usage is ambiguous. Failure to include a
specification in the </span><span class=Codeitalic><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>fmt</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> argument where it has been used by
the formatted IO functions might result in code failure.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>If </span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>fmt</span></span></span><span lang=EN-US style='mso-ansi-language:EN-US'>
is an empty string or or contain no discernible conversion specifications, a
warning shall be issued and fully functional formatted IO functions are linked
into the final program image.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>This option may
be used multiple times on the command line. The conversion specifications used
with each option are accumulated.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>2.2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Interrupts and Bits Example For
PIC18 Devices</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The example code
shown shown in Section 8, <i>Interrupts and Bits Example For PIC18 Devices</i>,
of the </span><i>MPLAB<sup>®</sup></i><i><span lang=EN-US style='mso-ansi-language:
EN-US'> XC8 User</span></i><span dir=RTL></span><i><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></i><i><span
lang=EN-US style='mso-ansi-language:EN-US'>s Guide for Embedded Engineers - PIC
MCUs</span></i><span lang=EN-US style='mso-ansi-language:EN-US'> uses the wrong
psect for the interrupt function. The address of interrupt functions when using
the interrupt vector table must be a multiple of 4, since this address is
shifted by 2 bits in the vector table.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>In the example,
the interrupt function begins:</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>PSECT code</span></p>

<p class=Code0><span lang=NL style='mso-ansi-language:NL'>tmr0Isr:</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>code</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> psect is a predefined psect with a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>reloc</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> (relocation) value of 2. The </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>reloc</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> value should be 4, so a
user-defined psect must instead be used. For example:</span></p>

<p class=Code0><span lang=PT style='mso-ansi-language:PT'>PSECT
textISR,class=CODE,reloc=4</span></p>

<p class=Code0><span lang=NL style='mso-ansi-language:NL'>tmr0Isr:</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>2.3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Assembler-provided Psects </span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Table 5.2 in the
</span><i>MPLAB<sup>®</sup></i><i><span lang=DE style='mso-ansi-language:DE'>
XC8 PIC</span><sup>®</sup></i><i><span lang=EN-US style='mso-ansi-language:
EN-US'> Assembler User's Guide</span></i><span lang=EN-US style='mso-ansi-language:
EN-US'>, which provides the names and classes of psect that are provided by the
PIC assembler, incorrectly states that the name of the psect that should be
used for EEPROM data is </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>eedata</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>. The provided psect is called </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>edata</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>, but as stated, it is associated
with the class </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>EEDATA</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>2.4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Error and Warning Messages</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The following
messages are absent from the <i>Error and Warning Messages</i> chapter in the </span><i>MPLAB<sup>®</sup></i><i><span
lang=DE style='mso-ansi-language:DE'> XC8 C Compiler User</span></i><span
dir=RTL></span><i><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span></i><i><span lang=IT style='mso-ansi-language:IT'>s
Guide</span></i><i><span lang=EN-US style='mso-ansi-language:EN-US'> for PIC</span><sup>®</sup></i><i><span
lang=EN-US style='mso-ansi-language:EN-US'> MCU.</span></i></p>

<p class=Body><b>1524</b><b><span lang=EN-US style='mso-ansi-language:EN-US'>
unrecognized heap size &quot;*</span></b><b><span lang=RU style='mso-ansi-language:
RU'>&quot;</span></b><b><span lang=EN-US style='mso-ansi-language:EN-US'>
(Driver)</span><o:p></o:p></b></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The argument to
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-mheap</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> option was not a decimal number or
valid keyword (for example, </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>a<span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>uto</span></span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'>).</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>xc8-cc
-mcpu=18f4520 -mheap=0x100 main.c</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Oops, did you
mean to use </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-mheap=256</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> ?</span></p>

<p class=Body><b>1525</b><b><span lang=EN-US style='mso-ansi-language:EN-US'>
selected language standard or device does not support a memory heap (Driver)</span><o:p></o:p></b></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>A heap has been
specified on a device that does not support dynamic memory allocation, or the
C90 language specification was selected with this option. Dynamic memory
allocation is only supported with PIC18 or Enhanced Mid-range devices, and only
when building with the C99 language standard.</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>xc8-cc
-mcpu=12f509 -mheap=0x100 main.c</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Oops, that
device does not support dynamic memory allocation.</span></p>

<p class=Body><b>1526</b><b><span lang=EN-US style='mso-ansi-language:EN-US'>
total software stack(s) and memory heap size specified (* bytes) is greater
than available (*</span> bytes)</b><b><span lang=EN-US style='mso-ansi-language:
EN-US'><span style='mso-spacerun:yes'>  </span>(Driver)</span><o:p></o:p></b></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The size of the
memory requested for the software stack and the heap exceeds the amount of data
memory available on the selected device.</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>xc8-cc
-mcpu=18f4520 main.c -mheap=1000 -mstack=reentrant:4000</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Oops, that
device does not implement 5000 bytes of data memory.</span></p>

<p class=Body><b>1527</b><b><span style='mso-ansi-language:EN-US'> <span
lang=EN-US>auto-sized software stack(s) and/or memory heap will share in *
byte(s) of memory (Driver)</span></span><o:p></o:p></b></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>After allocation
of static objects, the compiled stack, and any software stacks and/or heap that
have a fixed size requested in the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-mstack</span></span></span>/<span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-mheap</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> options, any free memory is then
divided up for those software stacks and/or heap that have used an </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>auto</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> size specification. If the amount
of memory available (as indicated in the message) is very small, this warning
indicates that use of the software stack/heap features might be restricted.</span></p>

<p class=Body><b>1528</b><b><span lang=EN-US style='mso-ansi-language:EN-US'>
no memory can be allocated to software stack(s) and/or memory heap (Driver)</span><o:p></o:p></b></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The compiler was
unable to allocate memory to any of the software stacks and/or heap.</span></p>

<p class=Body><b><span lang=EN-US style='mso-ansi-language:EN-US'>1529 the
-msmart-io-format option has no effect with the currently selected language
standard and will be ignored (Driver)</span><o:p></o:p></b></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-msmart-io-format</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> option can only be specified when
using the C99 language standard, which has full support for smart IO functions.</span></p>

<p class=Code0><span lang=ES-TRAD>xc8-cc -mcpu=18f4520 main.c</span><span
lang=EN-US style='mso-ansi-language:EN-US'> -std=c90 </span><span lang=ES-TRAD>-msmart-io-format=fmt=&quot;%d%</span><span
lang=EN-US style='mso-ansi-language:EN-US'>c</span><span lang=RU
style='mso-ansi-language:RU'>&quot;</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Oops, you cannot
use the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-msmart-io-format</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> with the C90 language standard.</span></p>

<p class=Body><b><span lang=EN-US style='mso-ansi-language:EN-US'>1530
insufficient memory available to allocate to * (Driver)</span><o:p></o:p></b></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The compiler was
unable to allocate memory to the specified software stack/heap.</span></p>

<span style='font-size:12.0pt;font-family:"Arial Unicode MS",sans-serif;
color:black;mso-style-textoutline-type:none;mso-style-textoutline-outlinestyle-dpiwidth:
0pt;mso-style-textoutline-outlinestyle-linecap:flat;mso-style-textoutline-outlinestyle-join:
bevel;mso-style-textoutline-outlinestyle-pctmiterlimit:0%;mso-style-textoutline-outlinestyle-dash:
solid;mso-style-textoutline-outlinestyle-align:center;mso-style-textoutline-outlinestyle-compound:
simple;mso-ansi-language:EN-AU;mso-fareast-language:EN-GB;mso-bidi-language:
AR-SA'><br clear=all style='mso-special-character:line-break;page-break-before:
always'>
</span>

<p class=Body><o:p>&nbsp;</o:p></p>

<h1 style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l5 level1 lfo2'><a
name="Toc_WhatsNew"><![if !supportLists]><span style='mso-hansi-font-family:
"Arial Unicode MS"'><span style='mso-list:Ignore'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-US style='mso-fareast-font-family:
"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:
EN-US'>What's New</span></a></h1>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The following
are new PIC-target features the compiler now supports. The version number in
the subheadings indicates the first compiler version to support the features
that follow.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.36</span></h2>

<p class=DescriptiveList><span lang=EN-US>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.35</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is available for the following PIC parts: 16F15254,
16F15255, 16F15256, 16F15274, 16F15275, and 16F15276.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning for Block Table Read
Protection</span></b><span lang=EN-US> The compiler will now issue a </span><span
lang=DE style='mso-ansi-language:DE'>warn</span><span lang=EN-US>ing when it
detects that any of the Block Table Read Protection configuration bits have
been enabled. Enabling these bits might adversely affect variable
initialization and reading constants from program memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning when enabling Storage Area
Flash</span></b><span lang=EN-US> The compiler will now issue a warning when it
detects that the Storage Area Flash has been enabled via the relevant </span><span
lang=FR style='mso-ansi-language:FR'>configuration bits. </span><span
lang=EN-US>With this area enabled, the user must ensure this memory is not used
for program code, typically done by reserving program memory when building the
project.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Constant caching</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-fcacheconst=[on|off|auto]</span></span></span><span
lang=EN-US> PRO-mode </span><span lang=FR style='mso-ansi-language:FR'>option
enables </span><span lang=EN-US>new optimizations that can automatically cache
objects qualified </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> in any unused data memory, accessing them from this location rather
than from program memory. </span></p>

<p class=DescriptiveList><b><span lang=EN-US>Smarter IO</span></b><span
lang=EN-US> The compiler will now analyze program code for calls to the scanf
family of functions in the same way it has done for the printf family of
functions, customising the available scan functions' features so that it is
optimal for how it will be used in the program. This feature is fully
automatic.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Smart IO assistance option</span></b><span
lang=EN-US> When analyzing calls to smart IO functions (such as </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>scanf()</span></span></span><span
lang=EN-US>), the</span><span lang=IT style='mso-ansi-language:IT'> compiler </span><span
lang=EN-US>cannot always determine from the format string or infer from the
arguments those conversion specifiers required by the call. Previously, the
compiler would always make no assumptions and ensure that fully functional IO
functions were linked into the final program image. A new </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-msmart-io-format=</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>fmt</span></span></span><span lang=EN-US> option has been added so that
the compiler can instead be informed by the user of the conversion specifiers
used by smart IO functions whose usage is ambiguous, preventing excessively
long IO routines from being linked. (See </span><span class=Link><span
lang=EN-US style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#smart"><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>smart-io-format
Option</span></span></a></span></span><span lang=EN-US> for more details.)</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Dynamic memory allocation</span></b><span
lang=EN-US> The compiler now supports dynamic memory allocation onto a heap via
the usual </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&lt;stdlib.h&gt;</span></span></span><span
lang=EN-US> functions, such as </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>malloc()</span></span></span><span
lang=EN-US>. Memory can be released, using the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>free()</span></span></span><span
lang=EN-US> function, but the management of unused memory is rudimentary. A new
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>-mheap</span></span></span><span lang=EN-US> option can be used to
reserve memory for the heap. Only use dynamic memory allocation when required,
and then avoid unnecessary allocation and freeing of memory blocks.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bank selection for indirect access</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>BANKISEL</span></span></span><span
lang=EN-US> assembler directive is now available for Mid-range and Baseline
devices. This directive will set the IRP bit (M</span><span lang=NL
style='mso-ansi-language:NL'>id-range)</span><span lang=EN-US> or STATUS bits
(Baseline) appropriately for a given symbol argument so that indirect access of
that object can be made. For all other devices, this directive will be ignored.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Generation 4 tool support</span></b><span
lang=EN-US> The compiler now supports the selection of all the generation 4
debug tools (e.g. MPLAB ICD4, PICkit 4, and SNAP) through the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-mdebugger</span></span></span><span
lang=EN-US> option. The corresponding predefined macros are indicated in the
User's Guide.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>String support in initialization
directives</span></b><span lang=EN-US> The assembler will now accept a string
argument to the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>DB</span></span></span><span lang=EN-US>,
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>DW</span></span></span><span lang=EN-US>, and </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>DDW</span></span></span><span
lang=EN-US> directives. The string can be specified with either single or
double quote characters with the backslash used to escape special characters,
for example:</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>        </span>DB 'directive\'s usage'</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>        </span>DW &quot;a terminated string&quot;,0</span></p>

<p class=DescriptiveList><b><span lang=EN-US>setjmp/longjmp support</span></b><span
lang=EN-US> The C90 and C99 library functions </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>setjmp()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>longjmp()</span></span></span><span
lang=EN-US> are now available for Enhanced M</span><span lang=IT
style='mso-ansi-language:IT'>id-range devices.</span><span lang=EN-US> PIC18
devices have had support for these functions in the past, but due to device
constraints, the functions are still not implemented for Baseline and other
Mid-range devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>CONFIG assembler examples</span></b><span
lang=EN-US> The chipinfo HTML files have been updated to show example usage of
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>CONFIG</span></span></span><span
lang=EN-US> assembler directives used with the PIC Assembler to set the device
configuration bits.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wider use of reverse-word hashes</span></b><span
lang=EN-US> The Hexmate reverse-word processing hash calculation feature can
now be applied to Fletcher algorithms. This feature was previously applicable
to only CRC and SHA algorithms. It has no affect on the additive or subtractive
algorithms.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Final XOR with Hexmate hashes</span></b><span
lang=EN-US> Hexmate can now be asked to perform an XOR of a hash result with a
specified value. Use </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>o</span></span></span><span lang=EN-US>
or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>O</span></span></span><span lang=EN-US> followed by the value as an
additional argument to Hexmate's </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-CK</span></span></span><span
lang=EN-US> option.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>I16HEX file support in Hexmate</span></b><span
lang=EN-US> Hexmate has been extended to read type 2 records, as well as a new </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ssa</span></span></span><span
lang=EN-US> option to specify the Start Segment Address used by type 3 records.
INHX16 files can be written by using the new </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>inhx16</span></span></span><span
lang=EN-US> argument to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--format</span></span></span><span
lang=EN-US> option.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Hexmate II</span></b><span
lang=EN-US> The Hexmate application shipped with the compiler is now built from
a new code base. Although the application's features and the options that drive
it are mostly identical to those in the previous incarnation, the parsing of
its options is much improved. See also </span><span class=Hyperlink0><span
lang=EN-US style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#Toc_MigrationIssues"><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>Migration
Issues</span></span></a></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Microchip Unified Standard
Libraries</span></b><span lang=EN-US> All MPLAB XC compilers will share a
Microchip Unified Standard Library. The MPLAB XC8 compiler has shipped with
this library for several versions, but with this release, the available
functions have been expanded and the operation of some functions has been
standardized. The <i>MPLAB<sup>®</sup></i></span><i><span lang=DE
style='mso-ansi-language:DE'> XC8 C Compiler User</span></i><span dir=RTL></span><i><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></i><i><span
lang=IT style='mso-ansi-language:IT'>s Guide</span><span lang=EN-US> for PIC<sup>®</sup>
MCU</span></i><span lang=EN-US> no longer includes the documentation for these
standard functions. This information can now be found in the <i>Microchip
Unified Standard Library Reference Guide</i>, included with this release.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.32</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Stack Guidance</span></b><span
lang=EN-US> Available with a PRO compiler license, the compiler's new stack
guidance feature can be used to estimate the maximum depth of the stacks used
by a program. It constructs and analyzes the program's call graph, determines
the stack usage of each function, and produces a report, from which the depth
of the program's stacks can be inferred.<br>
This feature is enabled through the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-mchp-stack-usage</span></span></span><span
lang=EN-US> command-line option. A summary of stack usage is printed after
execution. A detailed stack report is available in the map file, which can be
requested in the usual way.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is available for the following PIC parts: 16F15245, 16F15225,
</span><span lang=IT style='mso-ansi-language:IT'>18F04Q41</span><span
lang=EN-US>, </span><span lang=IT style='mso-ansi-language:IT'>18F04Q40</span><span
lang=EN-US>, </span><span lang=IT style='mso-ansi-language:IT'>18F15Q41</span><span
lang=EN-US>, </span><span lang=IT style='mso-ansi-language:IT'>18F15Q40</span><span
lang=EN-US>, </span><span lang=DE style='mso-ansi-language:DE'>18F05Q40</span><span
lang=EN-US>, </span><span lang=DE style='mso-ansi-language:DE'>18F05Q41</span><span
lang=EN-US>, </span><span lang=IT style='mso-ansi-language:IT'>18F14Q40</span><span
lang=EN-US>, and </span><span lang=IT style='mso-ansi-language:IT'>18F14Q41</span><span
lang=EN-US>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.31</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is available for the following PIC parts: 18F16Q40,
18F06Q40, 18F16Q41, and </span><span lang=IT style='mso-ansi-language:IT'>18F06Q41</span><span
lang=EN-US>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.30</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Hexmate hash calculations</span></b><span
lang=EN-US> Hexmate has two new hash-calculation features. Bytes in the HEX
file can be skipped for the purposes of calculating a hash value by using a new
'</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>s</span></span></span><span lang=EN-US>' argument to Hexmate's </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-CK</span></span></span><span
lang=EN-US> option. This would be useful when there is data in the Hex file
that is not present on the device, such as padding bytes added by the compiler.
Another extension to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-CK</span></span></span><span
lang=EN-US> option's '</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>t</span></span></span><span
lang=EN-US>' argument allows the trailing code sequence to be appended to a
specified number of bytes in the hash, not just to each byte. This would be useful
where the target device cannot read every byte of program memory and the hash
value has to be padded.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.29 (Functional Safety
Release)</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Header file for compiler built-ins</span></b><span
lang=EN-US> To ensure that the compiler can conform to language specifications
such as MISRA, a new </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&lt;builtins.h&gt;</span></span></span><span
lang=EN-US> header file, which is automatically included by </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;xc.h&gt;</span></span></span><span
lang=EN-US>, has been added. This header contains the prototypes for all
in-built functions, such as </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__nop()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_delay()</span></span></span><span
lang=EN-US>. Some built-ins may not be MISRA compliant; these can be omitted by
adding the define </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__XC_STRICT_MISRA</span></span></span><span
lang=EN-US> to the compiler command line. The built-ins and their declarations
have been updated to use fixed-width types.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.7.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.20</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is available for the following PIC parts: 16F15213,
16F15214, 16F15223, 16F15224, 16F15243,16F15244, </span><span lang=IT
style='mso-ansi-language:IT'>18F25Q43</span><span lang=EN-US>, </span><span
lang=IT style='mso-ansi-language:IT'>18F45Q43</span><span lang=EN-US>, </span><span
lang=IT style='mso-ansi-language:IT'>18F55Q43</span><span lang=EN-US>, </span><span
lang=IT style='mso-ansi-language:IT'>18F26Q43</span><span lang=EN-US>, </span><span
lang=IT style='mso-ansi-language:IT'>18F46Q43</span><span lang=EN-US>, and </span><span
lang=IT style='mso-ansi-language:IT'>18F56Q43</span><span lang=EN-US>. The
following device names may now be additionally used for existing devices:
RFPIC12C509AF, RFPIC12C509AG, RFPIC12F675F, RFPIC12F675H, RFPIC12F675K.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Complete 64-bit application set </span></b><span
lang=EN-US>All applications for all platforms are now 64-bit applications. This
covers all compiler and utility applications and on the Windows and Linux
platforms.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Updated XCLM</span></b><span
lang=EN-US> The license manage utilities have been updated to version 2.28.
This version fixes bugs and is a 64-bit build.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>In-built messages </span></b><span
lang=EN-US>The compiler warnings and error messages, which are contained in a
separate file, have now also been built into most compiler applications and
will be used when the message description file cannot be found. This will
mostly benefit the use of applications like Hexmate, which are often run
independently to the compiler driver.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New byte ordering option for
Hexmate hash calculations</span></b><span lang=EN-US> A new </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>revword=</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>n</span></span></span><span lang=FR style='mso-ansi-language:FR'>
suboption </span><span lang=EN-US>to the compiler driver's </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-mchecksu<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>m</span></span></span></span><span lang=EN-US> option requests Hexmate
to read bytes in reverse order within </span><span class=Codeitalic><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>n</span></span></span><span
lang=EN-US>-byte words in the hex file for the purposes of calculating a hash,
such as a checksum or CRC. This allows Hexmate to produce a result that will
match that produced by devices that use the Scanner module to stream data to
the CRC module in order to produce a CRC at runtime. Currently only word widths
of 2 are supported. (Using the suboption but specifying </span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>n</span></span></span><span lang=PT style='mso-ansi-language:PT'> as 0 </span><span
lang=EN-US>will also disable this reverse feature). If you are using Hexmate
directly, use the</span><span lang=PT style='mso-ansi-language:PT'> correspond</span><span
lang=EN-US>ing </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>r</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>n</span></span></span><span lang=EN-US> suboption in Hexmate's </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-CK</span></span></span><span
lang=EN-US> option.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>SHA-ZAM </span></b><span
lang=EN-US>The SHA256 algorithm has been added to Hexmate's suite of hash
algorithms. It is accessible as algorithm #10 from Hexmate's </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-CK</span></span></span><span
lang=EN-US> option, or from the compiler's </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-mchecksum</span></span></span><span
lang=EN-US> option.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Type 3 HEX records</span></b><span
lang=EN-US> Hexmate now</span><span lang=PT style='mso-ansi-language:PT'>
process</span><span lang=EN-US>es type 3 records in HEX files, which might be
produced when writing bootloaders for 8-bit AVR devices. These records are
output verbatim in the final HEX file. A warning will be produced if more than
one type 3 record is encountered and the record data is not consistent.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Replacing compiler-generated
printf routines</span></b><span lang=EN-US> Code for the printf family of
functions is generated with each build by the compiler, based on how those
functions were used in your source code. Previously, it has not been possible
to use your own versions of these functions, but the compiler now places the
generated printf code into a temporary library, so that the usual library
override features of the linker can be used. Any function defined by your code
and whose name matches that of a printf-family function will be used in
preference to the compiler-generated library routine.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>SHA summary</span></b><span
lang=EN-US> The memory summary option </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>sha256</span></span></span><span
lang=EN-US> is now available. It works in the same way as the existing </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sha1</span></span></span><span
lang=EN-US> option, except it uses the SHA256 algorithm when creating a hash of
the HEX file.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Movff errata workaround</span></b><span
lang=EN-US> The PIC18(L)F27/47/57K42 family of devices in silicon revisions A1,
A3 suffer from a fault triggered when the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movff</span></span></span><span
lang=EN-US> instruction is used while BSR is set to 63. The compiler can now
employ work-arounds (via the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-merrata</span></span></span><span
lang=EN-US> option) to avoid this issue when compiling C code. It will also
attempt to detect potential issues in hand-written assembly and issue a
warning.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Multi-content library archives</span></b><span
lang=EN-US> Library archive files (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>.a</span></span></span><span
lang=EN-US> extension) may now </span><span lang=FR style='mso-ansi-language:
FR'>contain </span><span lang=EN-US>any mix of p-code (</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.p1</span></span></span><span
lang=EN-US>) </span><span lang=FR style='mso-ansi-language:FR'>or assembler
object </span><span lang=EN-US>(</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>.o</span></span></span><span
lang=EN-US>) modules. Previously, an archive could contain modules of only one
type.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Exclusion of AVR ASM</span></b><span
lang=EN-US> The AVR ASM</span><span lang=FR style='mso-ansi-language:FR'>
assembler for 8-bit </span><span lang=EN-US>AVR devices is no longer shipped as
part of this compiler distribution.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New stand-alone assembler</span></b><span
lang=EN-US> The MPASM assembler for 8-bit PIC devices is no longer supported
and is not shipped as part of this compiler distribution. In its place is the
new MPLAB XC8 PIC Assembler (PIC Assembler), which is based on the assembler
application used by the XC8 compiler package and which allows assembly-only
projects to be built. The PIC Assembler is not code compatible with MPASM,
although some MPASM features have been added to it to ease migration of MPASM
source code, should that be necessary. It is recommended that you continue to
use MPASM for legacy assembly projects, but that new projects be written for
the PIC Assembler. A new user's guide and example guide for embedded engineers
are now available and are shipped with this distribution. A migration guide is
available to assist with migration to the PIC Assembler for projects that are
still being actively developed and might need to use future devices or
assembler features.</span></p>

<p class=DescriptiveListcont><span lang=EN-US>The following changes are related
to this new assembler.</span></p>

<p class=DescriptiveListcont><b><span lang=EN-US>New assembler command-line
driver</span></b><span lang=EN-US> A new assembler driver, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>pic-as</span></span></span><span
lang=EN-US>, is bundled with this distribution in the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>pic-as/bin</span></span></span><span
lang=EN-US> directory and can be invoked to perform all aspects of the build,
including preprocessing, assembly, and link steps. Its use is the recommended
way to invoke the assembler, as it hides the complexity of all the internal applications
and provides an</span><span lang=DE style='mso-ansi-language:DE'> interface</span><span
lang=EN-US> consistent with the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>xc8-cc</span></span></span><span
lang=EN-US>, the XC8 C compiler command-line driver. Assembly-only projects can
be created in the MPLAB X IDE, which will then us the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>pic-as</span></span></span><span
lang=EN-US> driver when building.</span></p>

<p class=DescriptiveListcont><b><span lang=EN-US>PIC18 extended instruction set
support</span></b><span lang=EN-US> The assembler supports the extended PIC18
instruction set. Assembly-only projects can enable the extended instruction set
(using the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>XINST</span></span></span><span
lang=EN-US> configuration bit) and be written for this mode. Note that although
the assembler application invoked by PIC-AS is the same as that invoked by the
MPLAB XC8 C compiler, the code generators in the compiler still do not support
the extended instruction set and produce code that will only execute correctly
on devices running the standard instruction set.</span></p>

<p class=DescriptiveListcont><b><span lang=EN-US>Specifying configuration bits
in assembler code</span></b><span lang=EN-US> It is now possible to specify a
device's configuration bit settings in assembly code using a new </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>CONFIG</span></span></span><span
lang=EN-US> assembler directive. The arguments to this directive are the same
as those to the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#pragma config</span></span></span><span
lang=EN-US> directive, which is still usable in C source code, and consist of
setting/value pairs. The MPLAB X IDE can assist with the generation of code
that can be copied into your assembly source.</span></p>

<p class=DescriptiveListcont><b><span lang=EN-US>Expanded instruction syntax</span></b><span
lang=EN-US> The use of the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>,0</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>,1</span></span></span><span lang=EN-US>
operands with many PIC instructions is now permitted. These can be used to
indicate the destination with file register instructions, the use of the access
bank with PIC18 file register instructions, and the call/return mode with </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>call</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>return</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>retfie</span></span></span><span
lang=EN-US> PIC18 instructions. The previously-used and more readable operands
are still available, but you should not mix the style of operand in a single
instruction.</span></p>

<p class=DescriptiveListcont><b><span lang=EN-US>New assembler directives</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>MESSG</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>ERROR</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>RADIX</span></span></span><span
lang=EN-US> directives have been added to the assembler. Their use and function
are equivalent to their namesakes in the MPASM assembler.</span></p>

<p class=DescriptiveListcont><b><span lang=EN-US>Provided psect and class
definitions</span></b><span lang=EN-US> As well as SFR and other
device-specific information, the assembler will provide psect (section)
definitions as well as linker classes when </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;xc.inc&gt;</span></span></span><span
lang=EN-US> has been included. The names of the psect are related to the
directives used by MPASM that place content into similar sections. For example
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>PSECT code</span></span></span><span
lang=EN-US> directive would act in a similar way to the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>CODE</span></span></span><span
lang=EN-US> directive used with MPASM.</span></p>

<p class=DescriptiveListcont><b><span lang=EN-US>Call graph options</span></b><span
lang=EN-US> The pic-as driver option </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-mcallgraph=</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>style</span></span></span><span lang=EN-US> has been implemented to
allow the selection of the style of call graph printed in the map file, which
might be useful if you use a compiled stack in assembly projects. The allowable
styles are: </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>none</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>crit</span></span></span><span
lang=EN-US> (critical paths only), </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>std</span></span></span><span
lang=EN-US>, or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>full</span></span></span><span
lang=EN-US>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo6'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.8.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.19 (Functional Safety
Release)</span></h2>

<p class=DescriptiveList><span lang=IT style='mso-ansi-language:IT'>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.9.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.10</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Code Coverage</span></b><span
lang=EN-US> This release includes a code coverage feature that facilitates
analyzis of the extent to which a project</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s source code has been executed. Use the option </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-mcodecov=ram</span></span></span><span
lang=EN-US> to enable it. After execution of the program on your hardware, code
coverage information will be collated in the device, and this can be
transferred to and displayed by the MPLAB X IDE via a code coverage plugin. See
the IDE documentation for information on this plugin can be obtained.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Expanded interrupt arguments</span></b><span
lang=EN-US> The following keywords may now be used in the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__interrupt()</span></span></span><span
lang=EN-US> </span><span lang=FR style='mso-ansi-language:FR'>specifier: </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__irq</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__base</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__default</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__low_priority</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__high_priority</span></span></span><span
lang=EN-US>. The non-underscored versions of these keywords are still valid.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is available for the following PIC parts: </span><span
lang=IT style='mso-ansi-language:IT'>18F57Q43</span><span lang=EN-US>, </span><span
lang=IT style='mso-ansi-language:IT'>18F47Q43</span><span lang=EN-US>, </span><span
lang=IT style='mso-ansi-language:IT'>18F27Q43</span><span lang=EN-US>,
18F57Q83, 18F56Q83, 18F47Q83, 18F46Q83, 18F27Q83, 18F26Q83, 18F57Q84, </span><span
lang=DE style='mso-ansi-language:DE'>18F56Q84, 18F47Q84</span><span lang=EN-US>,
</span><span lang=IT style='mso-ansi-language:IT'>18F46Q84</span><span
lang=EN-US>, </span><span lang=IT style='mso-ansi-language:IT'>18F27Q84, </span><span
lang=EN-US>and </span><span lang=IT style='mso-ansi-language:IT'>18F26Q84</span><span
lang=EN-US>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.10.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.05</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>More bits for your buck</span></b><span
lang=EN-US> The macOS version of this compiler and license manager is now a
64-bit application. This will ensure that the compiler will install and run
without warnings on recent versions of macOS.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Less code for no bucks</span></b><span
lang=EN-US> Unlicensed (Free) versions of this compiler now allow optimizations
up to and including level 2. This will permit a similar, although not
identical, output to what was previously possible using a Standard license.
Virtually all code generation optimizations are now enabled regardless of the
license type, but most assembler optimizations still require a PRO license for
them to be enabled. The </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--mode</span></span></span><span
lang=EN-US> option to the legacy driver, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US>, no longer has any effect.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Expanded long long support</span></b><span
lang=EN-US> Support for 64-bit </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>lon<span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>g
long</span></span></span></span><span lang=EN-US> types has been expanded to
include Enhanced Mid-range devices. These devices, as well as PIC18 devices,
can use these types in expressions, but note that their use will greatly
increase the amount of code and data memory required by the project.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wider C99 support</span></b><span
lang=EN-US> You can now use the C99 library with Enhanced Mid-range devices
that use the reentrant stack model. Previously with these devices, you were
limited to using C99 with the compiled (non-reentrant) stack model.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Larger stack allocation</span></b><span
lang=EN-US> Functions that use the reentrant stack model in Enhanced Mid-range
projects were limited to a total of 31 bytes of stack for local objects. This
limitation has been lifted and there is now no theoretical limit to how much
data a function can define on the stack. Note, however, that exceeding 31 bytes
of stack usage will increase the size of generated code for each access of
these stack objects by few instructions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>int24_t types added to C99</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>int24_t</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>uint24_t</span></span></span><span
lang=EN-US> types (along with the existing </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__int24</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__uint24</span></span></span><span
lang=EN-US> types) are now available when using the C99 library and when CCI is
not active.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Welcome MPASM</span></b><span
lang=EN-US> The MPASM assembler for 8-bit devices is now included in the XC8
compiler installer, rather than being distributed with the MPLAB X IDE. This
assembler is not used by the XC8 compiler, but is available for projects based
on hand-written assembly source.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.11.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.00</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Top-level driver</span></b><span
lang=EN-US> A new driver, called </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>xc8-cc</span></span></span><span
lang=EN-US>, is positioned above the previous </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US> driver, and it can call the appropriate applications based on the selection
of the target device. This driver accepts GCC-style options, although the PIC
implementation uses the same back end as the previous compiler version. The new
driver allows a similar set of options with similar semantics to be used with
any PIC target and is thus the recommended way to invoke the compiler. Note
that the options used by the new </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>xc8-cc</span></span></span><span
lang=EN-US> driver, unlike those used by the previous </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US> driver, are case sensitive. If required for legacy projects, the
previous driver can be called directly using the old-style options it accepted
in earlier compiler versions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New file extensions</span></b><span
lang=EN-US> When you are using the new driver, the extensions of input and
output files are different to those used with the previous driver. The table
below shows the new extensions that are used.</span></p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=472
 style='background:#BDC0BF;border-collapse:collapse;mso-table-layout-alt:fixed;
 border:none;mso-border-alt:solid black .25pt;mso-yfti-tbllook:1184;mso-padding-alt:
 0cm 5.4pt 0cm 5.4pt;mso-border-insideh:.25pt solid black;mso-border-insidev:
 .25pt solid black'>
 <thead>
  <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;height:12.1pt'>
   <td width=190 valign=top style='width:142.85pt;border:solid black 1.0pt;
   mso-border-alt:solid black .25pt;mso-border-bottom-alt:solid black .5pt;
   padding:4.0pt 4.0pt 4.0pt 4.0pt;height:12.1pt'>
   <p class=FreeForm><b><span style='font-size:10.0pt;font-family:"Helvetica Neue"'>File
   type</span></b></p>
   </td>
   <td width=141 valign=top style='width:105.75pt;border:solid black 1.0pt;
   border-left:none;mso-border-left-alt:solid black .25pt;mso-border-alt:solid black .25pt;
   mso-border-bottom-alt:solid black .5pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
   height:12.1pt'>
   <p class=FreeForm><b><span style='font-size:10.0pt;font-family:"Helvetica Neue"'>Previous
   extension</span></b></p>
   </td>
   <td width=140 valign=top style='width:105.0pt;border:solid black 1.0pt;
   border-left:none;mso-border-left-alt:solid black .25pt;mso-border-alt:solid black .25pt;
   mso-border-bottom-alt:solid black .5pt;padding:4.0pt 4.0pt 4.0pt 4.0pt;
   height:12.1pt'>
   <p class=FreeForm><b><span style='font-size:10.0pt;font-family:"Helvetica Neue"'>New
   extension</span></b></p>
   </td>
  </tr>
 </thead>
 <tr style='mso-yfti-irow:1;height:12.1pt'>
  <td width=190 valign=top style='width:142.85pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black .5pt;mso-border-alt:solid black .25pt;
  mso-border-top-alt:solid black .5pt;background:transparent;padding:4.0pt 4.0pt 4.0pt 4.0pt;
  height:12.1pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Helvetica Neue"'>Preprocessed
  C source</span></p>
  </td>
  <td width=141 valign=top style='width:105.75pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .5pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;mso-border-top-alt:solid black .5pt;
  background:transparent;padding:4.0pt 4.0pt 4.0pt 4.0pt;height:12.1pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.pre</span></p>
  </td>
  <td width=140 valign=top style='width:105.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .5pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;mso-border-top-alt:solid black .5pt;
  background:transparent;padding:4.0pt 4.0pt 4.0pt 4.0pt;height:12.1pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.i</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2;height:11.95pt'>
  <td width=190 valign=top style='width:142.85pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black .25pt;mso-border-alt:solid black .25pt;
  background:#EEEEEE;padding:4.0pt 4.0pt 4.0pt 4.0pt;height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Helvetica Neue"'>P-code
  library</span></p>
  </td>
  <td width=141 valign=top style='width:105.75pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .25pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;background:#EEEEEE;padding:4.0pt 4.0pt 4.0pt 4.0pt;
  height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.lpp</span></p>
  </td>
  <td width=140 valign=top style='width:105.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .25pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;background:#EEEEEE;padding:4.0pt 4.0pt 4.0pt 4.0pt;
  height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.a</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3;height:11.95pt'>
  <td width=190 valign=top style='width:142.85pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black .25pt;mso-border-alt:solid black .25pt;
  background:transparent;padding:4.0pt 4.0pt 4.0pt 4.0pt;height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Helvetica Neue"'>Object-code
  library</span></p>
  </td>
  <td width=141 valign=top style='width:105.75pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .25pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;background:transparent;padding:4.0pt 4.0pt 4.0pt 4.0pt;
  height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.lib</span></p>
  </td>
  <td width=140 valign=top style='width:105.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .25pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;background:transparent;padding:4.0pt 4.0pt 4.0pt 4.0pt;
  height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.a</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;height:11.95pt'>
  <td width=190 valign=top style='width:142.85pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black .25pt;mso-border-alt:solid black .25pt;
  background:#EEEEEE;padding:4.0pt 4.0pt 4.0pt 4.0pt;height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Helvetica Neue"'>Object</span></p>
  </td>
  <td width=141 valign=top style='width:105.75pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .25pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;background:#EEEEEE;padding:4.0pt 4.0pt 4.0pt 4.0pt;
  height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.obj</span></p>
  </td>
  <td width=140 valign=top style='width:105.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .25pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;background:#EEEEEE;padding:4.0pt 4.0pt 4.0pt 4.0pt;
  height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.o</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;mso-yfti-lastrow:yes;height:11.95pt'>
  <td width=190 valign=top style='width:142.85pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black .25pt;mso-border-alt:solid black .25pt;
  background:transparent;padding:4.0pt 4.0pt 4.0pt 4.0pt;height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Helvetica Neue"'>Assembly
  source</span></p>
  </td>
  <td width=141 valign=top style='width:105.75pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .25pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;background:transparent;padding:4.0pt 4.0pt 4.0pt 4.0pt;
  height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.as</span></p>
  </td>
  <td width=140 valign=top style='width:105.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black .25pt;mso-border-left-alt:solid black .25pt;
  mso-border-alt:solid black .25pt;background:transparent;padding:4.0pt 4.0pt 4.0pt 4.0pt;
  height:11.95pt'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>.s (.S, .sx)</span></p>
  </td>
 </tr>
</table>

</div>

<p class=DescriptiveList align=center style='text-align:center'><span
lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=DescriptiveList><b><span lang=EN-US>New librarian driver</span></b><span
lang=EN-US> A new librarian driver is positioned above the previous PIC </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>libr</span></span></span><span
lang=EN-US> librarian. This driver accepts GCC-archiver-style options, which
are either translated for or passed through to the librarian being executed.
The new driver allows a similar set of options with similar semantics to be
used to create or manipulate any PIC library file and is thus the recommended way
to invoke the librarian. If required for legacy projects, the previous
librarian can be called directly using the old-style options it accepted in
earlier compiler versions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Clang front end</span></b><span
lang=EN-US><span style='mso-spacerun:yes'>  </span>The compiler's front end,
responsible for preprocessing and parsing the C source code, is now implemented
using Clang. This frontend is used when compiling for the C99 standard,
regardless of whether you are using the new (</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8-cc</span></span></span><span
lang=EN-US>) or previous (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US>) drivers. When using Clang, there might be differences in how
source code is preprocessed, and different warning or error messages might be
produced during the parsing stage.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>C99 support</span></b><span
lang=EN-US> By default, the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>xc8-cc </span></span></span><span
lang=EN-US>driver will compile for C99 conformance. You can use the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-std</span></span></span><span
lang=EN-US> option with this driver to explicitly specify the standard,
choosing either </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>c90</span></span></span><span lang=EN-US>
or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>c99</span></span></span><span lang=EN-US>. The previous </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US> driver builds for the C90 standard by default, although you can
request the C99 language standard using the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--std</span></span></span><span
lang=EN-US> option (note the double dash), in which case the compiler will swap
to using Clang as the front end. New types available with the C99 standard
include a 64-bit </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>long long</span></span></span><span
lang=EN-US> integer types (currently implemented only for PIC18 devices) and
boolean type, but not all other C99 features are yet implemented. Note also
that 24-bit floating-point types are not permitted when building for C99.<br>
If you would like to move towards the C99 standard for existing projects but
want to minimize any changes to your source code, use the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8-cc</span></span></span><span
lang=EN-US> driver, set the language standard using </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-std=c99</span></span></span><span
lang=EN-US>, and use the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-mc90lib</span></span></span><span
lang=EN-US> option (if you prefer to use the previous </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US> driver, use the equivalents: </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--std=c99</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--runtime=+c90lib</span></span></span><span
lang=EN-US>). This will select the Clang front end, but use C90-compliant
libraries and keep many of the code features (such as 24-bit floating-point
types) as they were for the previous compiler. It is recommended that you use
the new </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xc8-cc</span></span></span><span
lang=EN-US> driver for new projects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>C99 library support</span></b><span
lang=EN-US> This initial release has limited C99-compliant libraries;
furthermore, these libraries are only available for PIC18 devices and also for
Enhanced Mid-range devices that are using the compiled (non-reentrant) stack
model. More complete versions of these libraries will be made available in a
future release. </span><span lang=DE style='mso-ansi-language:DE'>Note </span><span
lang=EN-US>also that some routines in the C99 library will be much larger than
their C90 counterparts, and that you might see an increase in data memory,
program memory, or stack usage. These routines will be optimized in future
releases.<br>
See the user's guide for the available functions, but note that the following
functions are only available for PIC18 devices:</span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=472
 style='margin-left:33.7pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 border:none;mso-border-alt:solid black .25pt;mso-yfti-tbllook:1184;mso-padding-alt:
 0cm 5.4pt 0cm 5.4pt;mso-border-insideh:.25pt solid black;mso-border-insidev:
 .25pt solid black'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;height:13.3pt;mso-height-rule:
  exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>lldiv_t</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>exp2</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>atoll</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>exp2f</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>strtoll</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>exp2l</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>strtoull</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>fma</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>llabs</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>fmaf</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>lldiv</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>fmal</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:6;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>time_t</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>llrint</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:7;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>difftime</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>llrintf</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:8;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>mktime</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>llrintl</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:9;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>time</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>llround</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:10;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>ctime</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>llroundf</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:11;height:13.3pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>gmtime</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>llroundl</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:12;mso-yfti-lastrow:yes;height:13.3pt;mso-height-rule:
  exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=FreeForm><span style='font-size:10.0pt;font-family:"Courier New";
  mso-bidi-font-family:"Arial Unicode MS"'>localtime</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.3pt;mso-height-rule:exactly'>
  <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
</table>

<p class=DescriptiveList><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=DescriptiveListcont><span lang=EN-US>The following functions are not
included for any device:</span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=472
 style='margin-left:33.7pt;border-collapse:collapse;mso-table-layout-alt:fixed;
 border:none;mso-border-alt:solid black .25pt;mso-yfti-tbllook:1184;mso-padding-alt:
 0cm 5.4pt 0cm 5.4pt;mso-border-insideh:.25pt solid black;mso-border-insidev:
 .25pt solid black'>
 <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;height:13.35pt;mso-height-rule:
  exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.35pt;mso-height-rule:exactly'>
  <p class=BodyBullet style='margin-bottom:0cm'><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Arial Unicode MS"'>tgamma</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.35pt;mso-height-rule:exactly'>
  <p class=BodyBullet style='margin-bottom:0cm'><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Arial Unicode MS"'>strftime</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:1;height:13.35pt;mso-height-rule:exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.35pt;mso-height-rule:exactly'>
  <p class=BodyBullet style='margin-bottom:0cm'><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Arial Unicode MS"'>tgammaf</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.35pt;mso-height-rule:exactly'>
  <p class=BodyBullet style='margin-bottom:0cm'><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Arial Unicode MS"'>tgamma</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2;mso-yfti-lastrow:yes;height:13.35pt;mso-height-rule:
  exactly'>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.35pt;mso-height-rule:exactly'>
  <p class=BodyBullet style='margin-bottom:0cm'><span lang=EN-US
  style='font-size:10.0pt;font-family:"Courier New";mso-bidi-font-family:"Arial Unicode MS"'>tgammal</span></p>
  </td>
  <td width=236 valign=top style='width:177.15pt;border:none;padding:0cm 0cm 0cm 0cm;
  height:13.35pt;mso-height-rule:exactly'>
  <p class=MsoNormal><span lang=EN-US><o:p>&nbsp;</o:p></span></p>
  </td>
 </tr>
</table>

<p class=DescriptiveListcont><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Better interrupt response in Free
mode </span></b><span lang=EN-US>The list of registers saved when using the
lower optimization </span><span lang=DA style='mso-ansi-language:DA'>level</span><span
lang=EN-US>s now more closely matches that with level s/3 (formerly PRO mode).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is available for the following PIC parts (and their
corresponding LF variants): 16F18455 and 16F18456.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.12.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.45</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is available for the following parts: 16LF73, 18F27Q10,
18F47Q10, MCP19128, MCP19132, and MCP19133; and the following parts (and their
corresponding LF variants): 16F18424, 16F18425, 16F18426, 16F18444, 16F18445,
16F18446.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.13.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.44</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is also available for the following parts: 18F26Q10,
18F45Q10, and 18F46Q10.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.14.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.43</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is also available for the following parts (and their
corresponding LF variants): 18F25K83, 18F26K83, 18F27K42, 18F47K42, 18F57K42,
and 18LF27K42.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.15.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.42</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New register macros (XC8E-142)</span></b><span
lang=EN-US> Preprocessor macros are now provided for all special function
registers so that code can be conditionally compiled based on their presence.
The macros are defined with the same name as the register and look similar to
the following example. </span></p>

<p class=Code0><span lang=IT style='mso-ansi-language:IT'>#define PORTA PORTA</span></p>

<p class=DescriptiveListcont><span lang=EN-US>Macros are only provided for entire
registers, not bits within those registers.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is also available for the following part: </span><span
lang=PT style='mso-ansi-language:PT'>MCP19215</span><span lang=EN-US>; and the
following parts (and their corresponding LF variants): 16F19155, 16F19156,
16F19175, 16F19176, 16F19185, 16F19186, 18F26K42, 18F45K42, 18F55K42, 18F46K42,
and 18F56K42.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.16.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.41</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is now available for the following parts: 18F24Q10 and
18F25Q10. Support is also available for the following parts (and their
corresponding LF variants): 16F15313, 16F15323, 16F15324, and 16F15344.</span></p>

<p class=DescriptiveList><a name=LibraryBuilds></a><b><span lang=EN-US>MPLAB X
IDE library builds</span></b><span lang=EN-US> Recent versions of the IDE allow
you to build library projects when using MPLAB XC8. Information concerning such
builds can be found in </span><span class=Hyperlink0><span lang=EN-US
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="http://microchip.wikidot.com/xc8:building-xc8-libraries"><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>this wiki article</span></span></a></span></span><span
lang=EN-US>. Note that to perform source-level debugging of code inside a
library, you must either copy the library source code to the project using the
library (as described in the wiki article) or enable absolute paths in the in
the IDE preferences when the library is built. This setting can be found under
Embedded &gt; Project Options &gt; File Path Mode in the IDE</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=PT style='mso-ansi-language:PT'>s preferences
dialog.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New Errata Workaround</span></b><span
lang=EN-US> A new device errata workaround has been added to circumvent issues
that relate to the memory regions accessed by table read instructions
immediately after reset. This issue might affect the runtime startup code of
programs that need to access program memory.</span></p>

<p class=DescriptiveListcont><span lang=EN-US>A new </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ERRATA</span></span></span><span
lang=FR style='mso-ansi-language:FR'> suboption, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>nvmreg</span></span></span><span
lang=EN-US>, has been added. The </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&lt;errata.h&gt;</span></span></span><span
lang=EN-US> header file defines the macro </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>EERATA_NVMREG</span></span></span><span
lang=EN-US>, which can be used in programs to compare against the compiler
defined macro </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_ERRATA_TYPES</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><a name=NewOcgOptimizationsSetting><b><span
lang=EN-US>New local optimizations setting</span></b></a><span lang=EN-US> A
new optimization setting has been added to the compiler to allow you to use
omniscient code generation (OCG) optimizations with libraries or individual
program modules and have the scope of those optimizations restricted to code
within those libraries or modules. See the </span><span class=Hyperlink0><span
lang=EN-US style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#bookmark"><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>Documentation
Updates</span></span></a></span></span><span lang=EN-US> section for more
information.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New pointer target specifiers</span></b><span
lang=EN-US> Two new specifiers, </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__ram</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__rom</span></span></span><span
lang=EN-US>, can be used to indicate the acceptable memory space of pointer
targets. If a pointer is assigned the address of an object that is not in the
memory space specified by these qualifiers, an error will be generated. See the
</span><span class=Hyperlink0><span lang=EN-US style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><a href="#bookmark1"><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>Documentation Update</span></span></a></span></span><span
lang=EN-US> section for more information.</span><span lang=EN-US
style='font-family:"Arial Unicode MS",sans-serif'><br clear=all
style='mso-special-character:line-break;page-break-before:always'>
</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.17.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.40</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is now available for the following parts (and their
corresponding LF variants): 16F15356, 16F15375, 16F15376, 16F15385, 16F15386,
16F19195, 16F19196, 16F19197, 16F15325, 16F15345, 18F24K42, and 18F25K42.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Overhauled Interrupt Handing</span></b><span
lang=EN-US> As part of the support for the new PIC18Fxxk42 devices, which
employ a new Interrupt Controller Module and interrupt vector tables, the way
that interrupt functions can be defined has been expanded. The </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__interrupt()</span></span></span><span
lang=EN-US> specifier, previously part of the Common C Interface (CCI), can now
be used with all devices that have interrupts. For those devices using the
vector tables, interrupt sources and vector table base addresses can be
specified with the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>irq()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>base()</span></span></span><span
lang=EN-US> arguments, respectively, and as fully described in <em><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>Section 5.9 Interrupts</span></span></em>
in the new User</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s Guide. The interrupt functions for these devices can be define
with a function parameter to determine the interrupt source. A new driver
option, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--UNDEFINTS</span></span></span><span
lang=EN-US>, allows otherwise unimplemented interrupts sources to trigger
certain behaviors, and the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>default</span></span></span><span
lang=EN-US> interrupt source can be used to provide a default interrupt
function when using </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__interr<span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>upt()</span></span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Improved/expanded in-built delay
functions (XC8E-106, XC8E-16)</span></b><span lang=EN-US> The in-built delay
routines (</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_delay()</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_delaywdt()</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__delay_us()</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__delay_ms()</span></span></span><span
lang=EN-US>, etc.) have been improved. All devices can now generate a
three-deep loop, allowing a maximum delay of 50,463,240 instruction cycles. The
watchdog variant of this delay is now available for all devices. Several
inaccuracies in the generated delay have been corrected. Delays for enhanced
mid-range devices are more efficient and use less temporary variables. The
delay times are now no longer affected by the location of temporary variables.
The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_delay3()</span></span></span><span
lang=EN-US> in-built function is now implemented for enhanced mid-range
devices.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>New
Assembler Controls</span></b><span lang=EN-US> New </span><span lang=EN-US
style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:"Arial Unicode MS";
letter-spacing:-.2pt'>ASMOPT_PUSH</span><span lang=EN-US> and </span><span
lang=EN-US style='font-size:11.0pt;font-family:"Courier New";mso-bidi-font-family:
"Arial Unicode MS";letter-spacing:-.2pt'>ASMOPT_POP</span><span lang=EN-US>
controls allow the state of the assembler optimizer to be saved on to a stack
of states and then restored at a later time. They work with the existing </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ASMOPT_ON</span></span></span><span
lang=EN-US>/</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>OFF</span></span></span><span lang=EN-US>
controls and are useful when you need to ensure the optimizers are disabled for
a small section of code but you are not aware if the optimizers have previously
been disabled. For example:</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>OPT ASMOPT_PUSH</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>OPT ASMOPT_OFF</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>;protected code</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>OPT ASMOPT_POP</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.18.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.38</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is now available for the following parts: MCP19126, 16F15354,
16F15355, 16LF15354, and 16LF15355.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Defines for DCI and DIA data
(XC8E-105)</span></b><span lang=EN-US> Macros are now supplied in the relevant
device-specific header files for device information that is contained in the
published DCI and DIA tables.</span><span lang=EN-US style='font-family:"Arial Unicode MS",sans-serif'><br
clear=all style='mso-special-character:line-break;page-break-before:always'>
</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.19.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.37</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is now available for the following parts (and their
corresponding LF variants): 18F27K40, 18F47K40, and 18F67K40.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>CRC hash algorithms available in
Hexmate</span></b><span lang=EN-US> Hexmate can now perform CRC hash
calculations on data in the HEX file. See the User</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s Guide for more information.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.20.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.36</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> Support is now available for the following parts (and their
corresponding LF variants): 16F18326, 16F18346, 18F46K40, 18F26K40, 18F65K40,
and 18F66K40.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New assertion</span></b><span
lang=EN-US> A new assertion macro has been added. It implements a light-weight
embedded version of the standard C </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>assert()</span></span></span><span
lang=EN-US> macro, and is used in the same way.<span style='mso-spacerun:yes'> 
</span>The macro is called </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__conditional_software_breakpoint()</span></span></span><span
lang=EN-US> and, if possible, it attempts to halt program execution via a
software breakpoint if its argument is false.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Coverity support files</span></b><span
lang=EN-US> Support files for Coverity are now provided. They can be found in
the compiler</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s<span style='mso-spacerun:yes'>  </span></span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>etc/coverity</span></span></span><span
lang=EN-US> directory.</span></p>

<p class=DescriptiveList><a name=NewEepromAccess><b><span lang=EN-US>New EEPROM
access</span></b></a><span lang=EN-US> The compiler now has the ability to
access EEPROM for those devices that use the NVMREG register set. Access is
transparent when using any provided EEPROM routines. A new preprocessor macro </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_EEPROM_INT</span></span></span><span
lang=EN-US> is defined to indicate the access type available with the selected
device. Note that those devices which use the new NVMREG set have no flash
library support.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembly routines with parameters</span></b><span
lang=EN-US> New assembler macros, accessible after you include </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;xc.inc&gt;</span></span></span><span
lang=EN-US>, have been added to assist you write assembly reentrant routines
which can take parameters and return a value. These routines use the compiler</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s software stack, and thus can only be
written for PIC18 or enhanced mid-range devices. See the section Writing
Reentrant Assembly Routines with Parameters in the <i>MPLAB XC8 Compiler User</i></span><span
dir=RTL></span><i><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span></i><i><span lang=IT style='mso-ansi-language:IT'>s
Guide.</span></i></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.21.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.35</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> The 16LF1566 and 16LF1567 parts are now fully supported by this
release. Support is also available for the following parts (and their
corresponding LF variants): 16F18854, 16F18856, 16F18857, 16F18876, and
16F18877.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New floating-point libraries</span></b><span
lang=EN-US> Replacement libraries have been supplied that contain updated
routines to perform 32-bit floating-point operations. These routines produce
more accurate results than the previous 32-bit library routines. See the </span><span
class=Hyperlink0><span lang=EN-US style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><a href="#NewFloatingPointLibraries"><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>Migration Is<span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sues</span></span></span></a></span></span><span
lang=EN-US> section for important information on how this change might affect
existing projects.</span></p>

<p class=DescriptiveList><a name=NewErrataWorkaround></a><b><span lang=EN-US>New
errata workaround</span></b><span lang=EN-US> The compiler performs a new
hardware errata workaround, called </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>BRKNOP2</span></span></span><span
lang=EN-US>, and which can be controlled using the existing </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ERRATA</span></span></span><span
lang=EN-US> option. The hardware issue affects the ability of some devices to
halt execution at a hardware breakpoint that is placed immediately following a
branch instruction that branches to that breakpoint location. Enabling this
workaround presents the compiler from generating such instructions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New active-optimization macros</span></b><span
lang=EN-US> The compiler now defines a number of macros that indicate the types
of optimization currently employed. These can be used to generate errors, if
the optimization level is not that required, or can be used to conditionally
control what source code is compiled when using different optimizations.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.22.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.34</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> The following parts (and their corresponding LF variants) are now
fully supported by this release: 18F24K40, 18F25K40, and 18F45K40.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New license manager and installers</span></b><span
lang=EN-US> XCLM 2.0 has been updated to the latest version of the Reprise
License software (version 11.2). The status display option, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xclm
-status</span></span></span><span lang=EN-US>, has been updated to display
additional information. During compilation you will now receive a warning when
you are within 14 days of the end of your HPA subscription or demo period. The
XC Network License Server is now a separate installer and is no longer included
in the single-user compiler installer.</span></p>

<p class=DescriptiveList><span dir=RTL></span><b><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>‘</span></b><b><span
lang=DE style='mso-ansi-language:DE'>MAXIPIC</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’ </span></b><b><span
lang=DE style='mso-ansi-language:DE'>hypothetical<span
style='mso-spacerun:yes'>  </span>device</span></b><span lang=EN-US> The compiler
will terminate compilation if the selected device runs out of program memory,
data memory, or EEPROM. A new </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--MAXIPIC</span></span></span><span
lang=EN-US> option tells the compiler to generate code for a hypothetical
device with the same physical core and peripherals as the selected device, but
with the maximum allowable memory resources permitted by the device family. You
might choose to use this option if your code does not fit in your intended
target device. This option will allow you to see the total memory requirements
of your program and give an indication of the code or data size reductions that
need to be made to fit the program to the device.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Operating mode fall back</span></b><span
lang=EN-US> A new option, </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--NOFALLBACK</span></span></span><span
lang=EN-US>, has<span style='mso-spacerun:yes'>  </span>been implemented to
ensure that the compiler is not executed with an operating mode below that
specified by the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--MODE</span></span></span><span
lang=EN-US> option. If the compiler has not been activated to run in the
requested mode, an error will be produced and compilation terminate when this
option is used. Without this option, the compiler will fall back to either the
Standard or Free operating mode if it is not activated to run in the requested
mode.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Comparison optimizations</span></b><span
lang=EN-US> Code associated with equality and relational comparisons has been
improved in many situations, especially for software stack variables on enhanced
mid-range and PIC18 devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Automatic resetbits enabling</span></b><span
lang=EN-US> The&nbsp;compiler can now detect if code has accessed the
variables; </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__resetbits</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__powerdown</span></span></span><span
lang=EN-US> and/or </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__timeout</span></span></span><span
lang=EN-US> associated with the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>STATUS</span></span></span><span
lang=EN-US> register reset bits and will enable the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>—runtime=+resetbits</span></span></span><span
lang=EN-US> option automatically. The option can still be enabled manually, if
desired.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.23.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.33</span></h2>

<p class=DescriptiveList><span lang=IT style='mso-ansi-language:IT'>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.24.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.32</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> The following parts (and their corresponding LF variants) are now
fully supported by this release: PIC16F1614, and PIC16F1618. Support is also
present for the following devices: MCP19118, MCP19119, MCP19124, and MCP19125.
See also </span><span class=Hyperlink0><span lang=EN-US style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><a
href="#RenamedDevices"><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>renamed
devices.</span></span></a></span></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Runtime speed improvements</span></b><span
lang=EN-US> For enhanced mid-range devices, a faster inlined version of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>memcpy()</span></span></span><span
lang=EN-US> will be used when compiling with speed optimizations enabled. For
PIC18 devices, some integer math routines now use a faster inlined version when
compiling with speed optimizations enabled. More use is made of the PIC18
hardware multiply instruction, including floating point multiply operations.
Many general optimizations also have been applied to PIC18 output.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New Free-mode optimization</span></b><span
lang=EN-US> An additional optimization has been added to improve removal of
redundant bank selection instructions when using Free mode. The effect of this
optimization will only be observable when the assembler optimizers are enabled.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Part support version</span></b><span
lang=EN-US> When compiling, the compiler will indicate a part support version
identification banner, for example:</span></p>

<p class=Code0><span lang=IT style='mso-ansi-language:IT'>Microchip MPLAB XC8 C
Compiler (PRO Mode) V1.32</span></p>

<p class=Code0><span lang=DE style='mso-ansi-language:DE'>Part Support Version:
1.32 (A)</span></p>

<p class=DescriptiveListcont><span lang=EN-US style='font-family:"Times Roman"'>Part-support
patches will become available as separate installer and will allow you update
this compiler</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US style='font-family:"Times Roman"'>s device-specific information,
such as header files and supported devices.</span><span lang=EN-US
style='font-family:"Times Roman";mso-fareast-font-family:"Times Roman";
mso-bidi-font-family:"Times Roman"'><o:p></o:p></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Instruction-invariant optimization
setting</span></b><span lang=EN-US> For PIC18 and enhanced mid-range devices
only, a new optimization (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--OPT=invariant</span></span></span><span
lang=EN-US>) can be specified. Typically, this optimization might be used when
building libraries. Its use ensures that the sequence of instructions generated
by the compiler will not change from build to build. This optimization does not
affect instruction operands, so the binary image will still vary as the program
is modified and objects and code are linked in different locations. When
employed, functions are forced to be reentrant and all pointer sizes are made a
fixed width. (The </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--CP=size</span></span></span><span
lang=EN-US> option can be used to change code and function pointer sizes from
the default size. Option arguments are: </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>16</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>24</span></span></span><span lang=EN-US>,
and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>auto</span></span></span><span
lang=EN-US> (default). The compiler will normally use 16-bit wide pointers, but
may change it to 24, where appropriate, e.g. invariant optimizations are
enabled, the device is a PIC18, and there is more than 0xFFFF words of program
memory. The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--CP</span></span></span><span
lang=EN-US> option has no effect when this optimization is not used.) Many
regular code-reduction optimizations are disabled when the invariant
optimization is enabled such that the generated code is typically larger.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compilation speed improvements</span></b><span
lang=EN-US> Refactoring of commonly used utility routines have seen
improvements in speed for all compiler applications. All projects should build
faster using this compiler version.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Function pointer simplification</span></b><span
lang=EN-US> For enhanced mid-range devices only, function pointers are now
always 16-bits wide and represent the full address of the target function. The
compiler no longer uses a jump table when making indirect calls for these
devices. The code that uses these pointers has been improved and in many
situations is smaller and faster than code generated by the previous compiler
version. The limit on the number of functions which can be called indirectly
(approximately 120), therefore, is lifted for enhanced mid-range devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Memory space usage symbols</span></b><span
lang=EN-US> Symbols are now defined by the linker that represent the lower and
upper addresses of the used part of each memory space, e.g. </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__Ls<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>pace_0</span></span></span></span><span lang=EN-US>, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__Hspace_1</span></span></span><span
lang=EN-US> etc. The numbers represent the memory space number, which are
listed in the User</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s Guide table </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>SPACE FLAG NUMBERS</span></span></span><span
lang=EN-US>. These symbols might be useful when calculating checksums.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Additional checks for initialized
definitions</span></b><span lang=EN-US> If there is more than one external
definition for an object and these definitions disagree or more than one is
initialized, the behavior is undefined. The compiler now makes an additional
check to ensure that the number of and numerical value of initial values are
consistent across all definitions. A warning is produced if this is not the
case. Note that uninitialized external definitions are implicitly initialized
with the value zero (for all object elements or members, where appropriate) and
that these values will be considered in this comparison.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Using external memory for program
code and const data</span></b><span lang=EN-US> The compiler</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--RAM</span></span></span><span
lang=EN-US> option has been able to allocate external memory (for those PIC18
devices that support this memory interface) to </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>far</span></span></span><span
lang=EN-US> variables. The </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--ROM</span></span></span><span
lang=EN-US> option can now be used in a similar way to allocate external memory
for use by code and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> data. Make sure you use the compiler</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--EMI</span></span></span><span
lang=EN-US> option to configure the external memory interface to suit your
application.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>3.25.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.31</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> The following parts are now fully supported by this release:
PIC16LF1554, PIC16LF1559, PIC16F1615, PIC16F1619, PIC16LF1615 and PIC16LF1619.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New speed-enhanced C libraries</span></b><span
lang=EN-US> The standard C libraries now come in space and speed variants, and
the corresponding library filenames include </span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>‘</span><span
lang=EN-US>sp</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’ </span><span
lang=EN-US>or </span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>‘</span><span
lang=EN-US>sz</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’ </span><span
lang=EN-US>strings, respectively, in their name to differentiate them.
Space-optimized libraries are used by default, unless the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--OPT=+speed</span></span></span><span
lang=EN-US> option (or MPLAB X IDE project properties equivalent) is used.
Multiplication and some string routines have been optimized for speed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Optimization macros</span></b><span
lang=EN-US> Dependent on the state of the selected optimization (</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--OPT</span></span></span><span
lang=EN-US> option), the macros </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__OPTIMIZE_SPEED__</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__OPTIMIZE_SIZE__</span></span></span><span
lang=EN-US> are now defined by the compiler driver to indicate optimization for
speed or space (size), respectively.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>3.26.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.30</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Software stack</span></b><span
lang=EN-US> The compiler can now allocate stack-based (auto and parameter)
variables to a software stack (dynamic allocation to a memory area accessed via
a stack pointer register) in addition to the compiled stack (static memory
allocation). The compiled stack was used exclusively in prior compiler versions
and is still the stack used by the default function model. Allocation to the
software stack allows for function reentrancy but is less efficient. Function specifiers
(</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>reentrant</span></span></span><span lang=EN-US>/</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>software</span></span></span><span
lang=EN-US>) or the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--STACK</span></span></span><span
lang=EN-US> option can be used to control the stack used for the whole program
or for individual functions, if required.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Function profiling support</span></b><span
lang=EN-US> The compiler can now generate function registration code that can
be used by a MPLAB<sup>®</sup> REAL ICE™ In-circuit emulator to provide
function profiling. <i>To see function profiling results, you must use a
version of the MPLAB X IDE that supports MPLAB XC8 code profiling.</i> When
function profiling is enabled, the compiler inserts assembly code into the
prolog and epilog of each C function that is defined. This code communicates
runtime information to the REAL ICE to signal when a function is being entered
and when it exits. This information, along with further measurements made by
the Power Monitor Board, can provide a record of the energy being used by each
function.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Better Dwarves</span></b><span
lang=EN-US> The compiler now uses the DWARF 3.0 Debugging Format Standard in
ELF files. Provided you are using a compatible version of MPLAB X IDE and
generating an ELF output, this will provide more accurate debugging information
in some situations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> The following parts (and their corresponding LF variants) are now
fully supported by this release: PIC16F1613, PIC12F1612, PIC16F1717,
PIC16F1718, PIC16F1719, PIC16LF1718, PIC16F18323, PIC16F18313, PIC16F18345, and
PIC16F18325.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Software Breakpoints</span></b><span
lang=EN-US> Two new builtins have been added to allow the insertion of opcodes
that can trigger software breakpoints. These are </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__BUILTIN_SOFTWARE_BREAKPOINT()</span></span></span><span
lang=EN-US> (unconditional for all builds) and </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__debug_break()</span></span></span><span
lang=EN-US> (debug builds only). These macros are only available for PIC18 and
mid-range devices and are ignored for baseline devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Better detection of function
parameter mismatch (XC8-776)</span></b><span lang=EN-US> A warning is now
issued for calls to a function which is passed arguments, but whose
corresponding function definition (as opposed to declaration) has an empty
parameter list. The warning is issued for direct and indirect calls.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Memory range addresses (XC8-339)</span></b><span
lang=EN-US> A leading </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>0x</span></span></span><span
lang=EN-US> may now be used with any value in a memory range associated with
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--ROM</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--RAM</span></span></span><span
lang=EN-US> option (or IDE equivalent). Note that values that do not use this
prefix are still assumed to be in hex format.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>External memory preprocessor
symbol (XC8-836)</span></b><span lang=EN-US> The preprocessor symbol </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__EXTMEM</span></span></span><span
lang=EN-US> will be set to the size of the external memory implemented by the
target device for those PIC18 devices that provide an external memory
interface.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New assembly operator form
(XC8-42)</span></b><span lang=EN-US> The use of the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>BANKMASK</span></span></span><span
lang=IT style='mso-ansi-language:IT'> preprocessor macro in assembly macros (</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>MACRO</span></span></span><span
lang=EN-US>..</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>ENDM</span></span></span><span
lang=EN-US>) was not permitted as the assembler would see the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&amp;</span></span></span><span
lang=EN-US> operator in its expansion as the assembly macro concatenation
operator, not bitwise AND. The assembler now allows the use of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>and</span></span></span><span
lang=EN-US> as well as </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&amp;</span></span></span><span
lang=EN-US> for bitwise AND operations. The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>BANKMASK</span></span></span><span
lang=EN-US> preprocessor macro in assembly header files has been updated to use
this new operator and so may now also be used in assembly macros.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning on possible write to
read-only object (XC8-67)</span></b><span lang=EN-US> The compiler may now warn
if using a pointer to write values and that pointer has targets that are
qualified </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US>. This warning may still be accompanied by other error messages.
Writing values to </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US>-qualified objects has undefined behavior.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Optimizations (XC886, XC8-79)</span></b><span
lang=EN-US> The compiler now optimizes some code better, in particular
interrupt code. Code which uses 24-bit floating point addition (</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ftadd</span></span></span><span
lang=EN-US> routine) is now much smaller and faster.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><a name=Version1.21><![if !supportLists]><span
lang=DE style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>3.27.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.21</span></a></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> The following parts (and their corresponding LF variants) are now
fully supported by this release: PIC16F1713, PIC16F1716, PIC16F1703,
PIC16F1707, PIC12F1572, PIC12F1571, PIC16F1705, and PIC16F1709.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New Installer Features</span></b><span
lang=EN-US> The Installer application has new options for setting up a network
client and displaying the Licensing Information page.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>3.28.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.20</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> The following parts are now fully supported by this release:
PIC16F1704, PIC16LF1704, PIC16F1708, and PIC16LF1708.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>ELF/DWARF debugging</span></b><span
lang=EN-US> Previously, COFF debug files were produced to allow source-level
debugging in MPLAB IDE. The compiler can now produce ELF/DWARF files, although
the default output format is still COFF. ELF/DWARF files are not compatible
with MPLAB IDE v8 but will be the preferred format if you are using MPLAB X IDE
as they have fewer limitations. You must be using a version of MPLAB X IDE that
supports this file format for the MPLAB XC8 compiler. Not all aspects of DWARF
are implemented in this compiler release. See the </span><span
class=Hyperlink0><span lang=EN-US style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><a href="#ElfLimitations"><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>Known Issues</span></span></a></span></span><span
lang=EN-US> section for more details.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New Free mode optimizations</span></b><span
lang=EN-US> The assembler's jump-to-jump optimizations, which previously was
only available with a licensed compiler operating mode, is now available in
Free mode. By default, this optimization is disabled, but it can be enabled
from the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--<span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>OPT</span></span></span></span><span
lang=EN-US> option or the Optimization category in MPLAB X IDE in the usual
way. If enabled, this optimization reduced the size of code output by the
compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New language extension option</span></b><span
lang=EN-US> A new driver option </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--EXT</span></span></span><span
lang=EN-US> can be set to </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>cci</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>iar</span></span></span><span lang=EN-US>
or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>xc8</span></span></span><span lang=EN-US> to indicate that the C
language extensions accepted by the compiler are those belonging to the Common
C Interface, IAR compatibility mode, or the native XC8 syntax, respectively.
All of these extensions are discussed in the user's guide.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Expanded hardware multiply usage</span></b><span
lang=EN-US> The PIC18 hardware multiply instructions are now used for 16x16 bit
integer multiplication. The library routine that implements this feature breaks
the multiplication into several operations that can use the 8-bit hardware
multiply instruction. The 32-bit integer multiplication routines continue to
use an iterative solution and do not use these instructions.</span></p>

<p class=DescriptiveList><a name=NewClistingOption></a><b><span lang=EN-US>New
listing option</span></b><span lang=EN-US> Previously a C list file was
produced for each C source file being compiled. If an assembly list file was
request (which is the default in MPLAB IDE) then these listing files were
overwritten with the assembly listing content. The C listing files are no
longer produced by default. If you would like C listing files to be generated,
a new option </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--CLIST</span></span></span><span
lang=EN-US> has been added to request this action.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>3.29.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.12</span></p>

<p class=Body><b><span lang=EN-US style='mso-ansi-language:EN-US'>New device
support</span></b><span lang=EN-US style='mso-ansi-language:EN-US'> The
following parts are now fully supported by this release: MCP19114, MCP19115,
PIC16LF1824T39A, PIC16F570, PIC16F753 and PIC16HV753.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>3.30.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.11</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> The following parts are now fully supported by this release:
PIC16F1788, PIC16F1789, PIC16LF1788 and PIC16LF1789.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New peripheral libraries</span></b><span
lang=EN-US> The following devices (and their LF counterparts) now have
peripheral library support: PIC18F45K50, PIC18F24K50 and PIC18F25K50. The
peripheral libraries for all supported devices have been updated to the latest
code base.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New parsing option</span></b><span
lang=EN-US> A new driver option has been added that alters the generation of
intermediate files produced by the parser. The option is </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--PARSER</span></span></span><span
lang=EN-US> and can be set to </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>lean</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>rich</span></span></span><span
lang=EN-US>. The </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>lean</span></span></span><span
lang=EN-US> suboption (the default) will not include unused symbols in
intermediate files. These are included when selecting the rich suboption, but
not that this setting will generate larger intermediate (p-code) files and will
slow down the compilation considerably. The operation of prior versions of the
compiler was equivalent to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>rich</span></span></span><span
lang=EN-US> setting. Use the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>rich</span></span></span><span
lang=EN-US> setting if you need unused symbols to be included in the link
stage.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New enhanced mid-range errata
workaround</span></b><span lang=EN-US> The compiler now has the ability to
employ an errata workaround for some enhanced mid-range devices. This is
controlled by the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--ERRATA</span></span></span><span
lang=EN-US> option (</span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>CLOCKSW</span></span></span><span
lang=EN-US>), which is used to control other PIC18 errata workarounds. The
workaround will affect the device startup code, but is not enabled by default.
Check your device literature to see if this workaround should be enabled.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>3.31.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.10</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New device support</span></b><span
lang=EN-US> The following parts are now fully supported by this release:
MCP19110, MCP19111, RF675F, RF675H, RF675K, PIC12F529T39A, PIC12F529T48A,
PIC12LF1840T39A, PIC12LF1552, PIC16F527, PIC16F1454, PIC16LF1454, PIC16F1455,
PIC16LF1455, PIC16F1459, PIC16LF1459, PIC16F1784, PIC16LF1784, PIC16F1786,
PIC16LF1786, PIC16F1787, PIC16LF1787, PIC18F45K50, PIC18F24K50, PIC18F25K50,
PIC18LF45K50, PIC18LF24K50, PIC18LF25K50, PIC18F97J94, PIC18F87J94,
PIC18F67J94, PIC18F96J94, PIC18F86J94, PIC18F66J94, PIC18F95J94, PIC18F65J94,
PIC18F85J94, PIC18F96J99, PIC18F86J99, PIC18F66J99.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>The Common C Interface (CCI)</span></b><span
lang=EN-US> The Common C Interface is a documented set of ANSI standard
refinements, non-standard extensions and guidelines to help you write code
which is more portable across all MPLAB XC C compilers. A new chapter has been
added to the XC8 User's Guide describing these features.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>User's guide</span></b><span
lang=EN-US> A new compiler user's guide has been included with this release.
See the Documentation Updates section, above, for more information.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Roam-out Licensing</span></b><span
lang=EN-US> A new </span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman";mso-ansi-language:AR-SA'><span dir=RTL></span>“</span><span
lang=PT style='mso-ansi-language:PT'>roam out</span><span lang=EN-US>” feature
allows a network license to be checked out for an extended period for use on a
particular computer. While the license is checked out, the computer has
licensed use to an XC compiler, and need not be in contact with the network
license server. When the license is returned to the network license server, it
is once more available to be used as a floating license, or to be roamed out to
other computers.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Psect allocation</span></b><span
lang=EN-US> The CCI </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__section()</span></span></span><span
lang=EN-US> specifier can also be used in non-CCI mode. Refer to the CCI
chapter in the user's guide. It can be used in place of the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#pragma
psect</span></span></span><span lang=FR style='mso-ansi-language:FR'> directive.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Function and module information</span></b><span
lang=EN-US> Information about each function, which appears in the assembly list
file, is now also displayed in the map file. In addition, a summary of program
memory usage on a module-by-module basis is shown in the map file. This allows
an estimate of the size of the code (excluding data) being generated by each
module.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bank specification with PIC18
devices</span></b><span lang=EN-US> The qualifiers </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>bank0</span></span></span><span
lang=EN-US> through </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>bank3</span></span></span><span
lang=EN-US> may now be used with PIC18 devices to allocate variables to a
specific memory bank. These qualifiers must be used with the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ADDRQUAL</span></span></span><span
lang=EN-US> option.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Implementation of strftime
function</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>strftime()</span></span></span><span
lang=EN-US> function has been implemented and is available in the standard
libraries.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Qualifier
synonyms</span></b><span lang=EN-US> A side effect of the CCI features is that
when <i>not</i> in CCI or strict ANSI mode, most of the non-standard
specifiers, e.g. </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>bit</span></span></span><span lang=EN-US>,
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>near</span></span></span><span lang=EN-US> and </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>far</span></span></span><span
lang=EN-US>, can also be represented with two leading underscores, as in </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__bit</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__near</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__far</span></span></span><span
lang=EN-US> etc.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>SFR structure types</span></b><span
lang=EN-US> The structures that are defined to represent SFRs are now a typedef
type that is available for general use.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Function in-lining</span></b><span
lang=EN-US> A new qualifier, </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US>, can be applied to some C functions. A call to any function, thus
qualified, will not generate a call-return sequence, but will be replaced by
the assembly code associated with the function body. This expansion will save
stack usage and may reduce code size if the function body is small. The
assembler has always had the ability to inline small assembly sequences, so
code size reductions may not be large. The operation of this qualifier is
similar to use of the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>new</span></span></span><span
lang=EN-US> </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#pragma inline</span></span></span><span
lang=EN-US> directive. The previous (version 1.00 and earlier) </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> pragma implementation has been renamed to </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>instrinsic</span></span></span><span
lang=EN-US>. (See Migration Issues below.)</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembly psect flags</span></b><span
lang=EN-US> To support function inlining, two new psect flags have been added: </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>keep</span></span></span><span
lang=EN-US>. These indicate to the assembler, respectively, that the contents
of a psect may be inlined (and then removed), and that the contents of a psect
may be inlined but must never be removed.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>3.32.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.01</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Enhanced PIC optimizations</span></b><span
lang=EN-US> New optimizations, specifically aimed at the enhanced mid-range PIC
devices, have been added. These optimizations reduce code size and target any
code that<span style='mso-spacerun:yes'>  </span>indirectly accesses locations
via the FSR registers.<b><o:p></o:p></b></span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>3.33.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.00</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Psect merging and splitting</span></b><a
name=Bookmark></a><span lang=EN-US> Two new </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PSECT</span></span></span><span
lang=EN-US> directive flags have been added to allow splitting or merging of
psects by the assembler optimizer. Now, by default, no splitting or merging
takes place, but the use of the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>split=allow</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>merge=allow</span></span></span><span
lang=EN-US> flags can indicate that these optimizations can take place. See the
assembly language chapter in the user's guide.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unified 8-bit device support</span></b><span
lang=EN-US> This compiler unifies the two former HI-TECH C compilers which
previously supported Microchip 8-bit PIC devices: HI-TECH C Compiler for
PIC10/12/16 MCUs and HI-TECH C Compiler for PIC18 MCUs. This MPLAB XC8 compiler
supports compilation for any supported 8-bit PIC device from the one
application. A single device driver, xc8, is used to invoke the compiler
regardless of the target device. This driver will invoke the appropriate
internal applications based on your device selection. The </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>picc</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>picc18</span></span></span><span
lang=EN-US> drivers which controlled the former compilers are currently still
employed, and the baseline/mid-range and PIC18 code generator and assembler
applications are still separate. Only one copy of the generic applications,
such as the preprocessor (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>cpp</span></span></span><span
lang=EN-US>), the parser (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>p1</span></span></span><span
lang=EN-US>), the linker (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>hlink</span></span></span><span
lang=EN-US>), and utilities like </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>hexmate</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>objtohex</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>cromwell</span></span></span><span
lang=EN-US> are included with the compiler, and these are shared by all device
targets.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Operating modes</span></b><span
lang=EN-US> The former HI-TECH C Compiler for PIC18 MCUs only operated in a
Lite or PRO mode. With XC8, a Free (previously called Lite), Standard and PRO
mode are available for all target devices.</span></p>

<span style='font-size:12.0pt;font-family:"Arial Unicode MS",sans-serif;
color:black;mso-style-textoutline-type:none;mso-style-textoutline-outlinestyle-dpiwidth:
0pt;mso-style-textoutline-outlinestyle-linecap:flat;mso-style-textoutline-outlinestyle-join:
bevel;mso-style-textoutline-outlinestyle-pctmiterlimit:0%;mso-style-textoutline-outlinestyle-dash:
solid;mso-style-textoutline-outlinestyle-align:center;mso-style-textoutline-outlinestyle-compound:
simple;mso-ansi-language:EN-AU;mso-fareast-language:EN-GB;mso-bidi-language:
AR-SA'><br clear=all style='mso-special-character:line-break;page-break-before:
always'>
</span>

<h1><o:p>&nbsp;</o:p></h1>

<h1 style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l5 level1 lfo2'><a
name="Toc_MigrationIssues"><![if !supportLists]><span style='mso-hansi-font-family:
"Arial Unicode MS"'><span style='mso-list:Ignore'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-US style='mso-fareast-font-family:
"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:
EN-US'>Migration Issues</span></a></h1>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The following
are features that are now handled differently by the compiler. These changes
may require modification to your source code if porting code to this compiler
version. The version number in the subheadings indicates the first compiler
version to support the changes that follow.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.36</span></h2>

<p class=DescriptiveList><span lang=EN-US>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.35</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Data memory reservation (XC8-2711)</span></b><span
lang=EN-US> Some PIC18F'Q devices have data banks that can be dedicated to a
particular function (e.g. page reads and writes of program memory, sending and
receiving CAN messages). Previously, such banks might have been included with
general-purpose data memory and been available to the compiler for</span><span
lang=IT style='mso-ansi-language:IT'> allocation</span><span lang=EN-US> of
ordinary objects. These banks are now reserved and no longer available to the
compiler. If desired, you may create absolute-addressed variables (using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__at()</span></span></span><span
lang=EN-US> specifier) in these reserved memory regions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>errno not being set (XC8-2682)</span></b><span
lang=EN-US> Several </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&lt;math.h&gt;</span></span></span><span
lang=EN-US> functions (for example </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>acos()</span></span></span><span
lang=EN-US>) were not setting the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>errno</span></span></span><span
lang=EN-US> object when required, such as on a domain error. Code in your
project that made checks on this object might now behave differently. The
functions now act in accordance with the C99 language standard.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Removal of non-standard functions
(XC8-2591)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>finite</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>finitef</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>toascii</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>isascii</span></span></span><span
lang=EN-US> functions are extraneous to the C99 language standard and have been
removed from the compiler distribution. These functions were never documented.
In addition, the non-standard </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&lt;conio.h&gt;</span></span></span><span
lang=EN-US> header has been removed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Handling of string-to bases
(XC8-2420)</span></b><span lang=EN-US> To ensure consistency with other XC
compilers, the XC8 string-to functions, like </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>strtol()</span></span></span><span
lang=EN-US> etc., will no longer attempt to convert an input string if the base
specified is larger than 36 and will instead set </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>errno</span></span></span><span
lang=EN-US> to </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>EINVAL</span></span></span><span
lang=EN-US>. The C standard does not specify the behaviour of the functions
when this base value is exceeded.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Hexmate II</span></b><span
lang=EN-US> The Hexmate application shipped with the compiler is now built from
a new code base. In addition, parts of the Hexmate code have been incorporated
into the compiler drivers directly, meaning that the compiler no longer needs
to execute the Hexmate application when building projects. If you run the
compiler in verbose mode, a Hexmate application command line, like that shown
here:</span></p>

<p class=Code0 style='line-height:normal'><span lang=EN-US style='font-size:
9.0pt;mso-ansi-language:EN-US'>/Applications/microchip/xc8/v2.32/pic/bin/hexmate
@/tmp/hexmate_xcNZD0QKH.cmd [ -W-3
--edf=/Applications/microchip/xc8/v2.32/pic/dat/en_msgs.txt main.hex -E1
-Omain.hex -logfile=main.hxl -addressing=1 -fill=0xFFFF@0x800:0xFFF
-ck=800-FFF@20+0w1g2p0r0s0.1 -break=300000 ]</span><span lang=ES-TRAD
style='font-size:9.0pt'><o:p></o:p></span></p>

<p class=DescriptiveListcont><span lang=EN-US>will no longer be seen. The
stand-alone Hexmate application is still shipped with the compiler and if
required can be run explicitly as it had in the past, allowing full access to
its options or its use without a compiler. The log file output, when requested,
shows more complete information relating to the tasks Hexmate performed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Microchip Unified Standard
Libraries</span></b><span lang=EN-US> All MPLAB XC compilers will share a
Microchip Unified Standard Library. The MPLAB XC8 compiler has shipped with
this library for several versions, but with this release, the available
functions have been expanded and the operation of some functions has been
standardized. The <i>MPLAB<sup>®</sup></i></span><i><span lang=DE
style='mso-ansi-language:DE'> XC8 C Compiler User</span></i><span dir=RTL></span><i><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></i><i><span
lang=IT style='mso-ansi-language:IT'>s Guide</span><span lang=EN-US> for PIC<sup>®</sup>
MCU</span></i><span lang=EN-US> no long includes the documentation for these
standard functions. This information can now be found in the <i>Microchip
Unified Standard Library Reference Guide</i>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.32</span></h2>

<p class=DescriptiveList><span lang=EN-US>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.31</span></h2>

<p class=DescriptiveList><span lang=EN-US>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.30</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Math changes (XC8-2017)</span></b><span
lang=EN-US> There are several things changed in </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;math.h&gt;</span></span></span><span
lang=EN-US> relevant for C99 builds.</span></p>

<p class=DescriptiveList style='margin-left:55.2pt;text-indent:-37.35pt;
mso-list:l4 level1 lfo7;tab-stops:list 26.85pt'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>The math_errhandling macro value has changed from 2 to 1 (</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>MATH_ERRNO</span></span></span><span
lang=EN-US>) meaning that all errors are expressed through </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>errno</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo7;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>clock_t </span></span></span><span
lang=EN-US>typedef has changed from </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>long</span></span></span><span
lang=EN-US> to </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>unsigned long</span></span></span><span
lang=EN-US>, to be consistent with the other XC </span><span lang=IT
style='mso-ansi-language:IT'>compilers</span><span lang=EN-US>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.29 (Functional Safety
Release)</span></h2>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.7.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.20</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Hexmate's search specification
(XC8-1883)</span></b><span lang=EN-US> The order of the bytes in the search
value used by the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-FIND</span></span></span><span
lang=EN-US> command have been reversed so as to match the ordering used by the
replace value and to make it easier to search for an opcode, for example.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning on missing operand
(XC8E-607)</span></b><span lang=EN-US> A warning is now issued if a PIC18 file
register instruction does not specify the RAM access bit operand, which
indicates a banked or Access bank location, e.g. </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>,c</span></span></span><span
lang=EN-US>. The assembler will attempt to determine the destination if
possible, but it is recommended that this operand always be specified with
these assembly instructions.</span></p>

<p class=DescriptiveList><a name=ConversionOfAssembler></a><b><span lang=EN-US>Conversion
of assembler controls to directives (XC8E-580)</span></b><span lang=EN-US> Most
of the assembler controls (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>OPT </span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>control</span></span></span><span lang=EN-US>) have been changed to
assembler directives, to be more compatible with their counterparts in MPASM.
The following directives are now supported.</span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>[no]list</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>[no]c<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>ond</span></span></span></span><span lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>title</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>subtitle</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>[no]expand</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>callstack
</span></span></span><span lang=EN-US>(previously the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>OPT
stack</span></span></span><span lang=EN-US> control)</span><span lang=EN-US
style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>pagelen</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>pagewidth</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>include</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo8;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>asmopt</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveListcont><span lang=EN-US>These will work as they did
before, but will no longer require the use of the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>OPT</span></span></span><span
lang=EN-US> keyword. So, where previously you might have used </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>OPT
TITLE &quot;my Ti<span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>tle&quot;</span></span></span></span><span
lang=EN-US> for example, you should now use </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>TITLE
&quot;My Title&quot;</span></span></span><span lang=EN-US>. The four seperate </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ASMOPT_*</span></span></span><span
lang=EN-US> controls are now a single </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>ASMOPT</span></span></span><span
lang=EN-US> directive that takes</span><span lang=PT style='mso-ansi-language:
PT'> a parameter</span><span lang=EN-US>: </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ON</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>OFF</span></span></span><span lang=EN-US>,
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>PUSH</span></span></span><span lang=EN-US>, or </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>POP</span></span></span><span
lang=EN-US>, so replace </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>OPT ASMOPT_PUSH</span></span></span><span
lang=EN-US>, for example, with </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>ASMOPT PUSH</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveListcont><span lang=EN-US>The previous </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>OPT</span></span></span><span
lang=EN-US> controls will continue to work as they did before, but will trigger
a warning message.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Conversion of branch instructions
(XC8E-144)</span></b><span lang=EN-US> T</span><span lang=FR style='mso-ansi-language:
FR'>he PIC18 assembler </span><span lang=EN-US>will no longer convert a
conditional branch instruction to the opposite conditional branch over a branch
or a skip instruction over a jump where these occur in hand-written assembly
modules.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo9'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.8.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.19 (Functional Safety
Release)</span></h2>

<p class=DescriptiveList><span lang=IT style='mso-ansi-language:IT'>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.9.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.10</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Individual device INI files</span></b><span
lang=EN-US> Previously, the compiler had two device INI files (one for PIC18;
one for the other devices) that defined the architecture for all supported
devices. These INI files have been split up so that there is one INI file for
each device. This change should not require projects to be modified.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Legacy config/idloc macros</span></b><span
lang=EN-US> The configuration bit macro, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__CONFIG()</span></span></span><span
lang=EN-US>, and ID location macro, </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__IDLOC()</span></span></span><span
lang=EN-US>, are no longer supported when building for C99. A warning is issued
if you attempt to use them in this way. They are still accepted when building
for C90; however, it is recommended that you move to the newer-stye </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#pragma
config</span></span></span><span lang=EN-US>, if possible.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.10.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.05</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Removal of macros</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_HTC_EDITION_</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_XC8_MODE_</span></span></span><span
lang=EN-US> macros are no longer defined. These macros were defined based on
the operating mode of the compiler; however, these modes are no longer
recognized. As an alternative, use the macros that define the optimization
level, such as </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__OPTIM_LEVEL</span></span></span><span
lang=EN-US>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.11.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 2.00</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>PIC18 peripheral library support</span></b><span
lang=EN-US> The PIC18 peripheral library was removed from the compiler
distribution in a previous release, and it had to be downloaded separately if
you needed to use it for legacy projects. The library is now truely defunct if
you are using C99 and the Clang front end, and the compiler will reject the
option to use this library in that case. To continue to use the library with
the C90 compiler front end, the library file must be downloaded separately. If
any of the device SFR definitions have changed since the library was built and
a redefinition error is produced, the library source files should be added to
and compiled with your project.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>EEPROM routines</span></b><span
lang=EN-US> Previously, declarations were provided for the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>memcpyee()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>eecpymem()</span></span></span><span
lang=EN-US> functions when building for some Baseline and Mid-range devices.
These routines were only intended for internal compiler use, however, it was
possible to call these routines from your source code. These routines should no
longer be used from your source code and declarations for them are no longer
provided. These routines are automatically called when you access objects
qualified with </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__eeprom</span></span></span><span
lang=EN-US> and the routines to read and write EEPROM are still provided.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Mode warning messaging (XC8-1745)</span></b><span
lang=EN-US> When the compiler built in Free mode, an advisory was always
printed, indicating that compilation took place in this mode. This is no longer
printed; however, a new message (2051) is issued whenever the compiler has been
asked to run with a higher optimization level than that permitted by the
compiler licence.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Non-standard types (XC8-1588)</span></b><span
lang=EN-US> The 24-bit, non-standard integer </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>short
long int</span></span></span><span lang=EN-US> types must now be defined using
the types </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__int24</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__uint24</span></span></span><span
lang=EN-US> when building for C99. The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>bit</span></span></span><span
lang=EN-US> type must now be specified as </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__bit</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Change in keywords</span></b><span
lang=EN-US> Many tokens that were mandatory only when using the CCI have been
standardized when building for C99, even if you are not using the CCI. These
include the keywords: </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>near</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>far</span></span></span><span lang=EN-US>,
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>bank</span></span></span><span class=Codeitalic><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>eeprom</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>persistent</span></span></span><span
lang=EN-US>, which should be changed to </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__near</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__far</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__bank</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>x</span></span></span><span lang=EN-US>, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__eeprom</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__persistent</span></span></span><span
lang=EN-US>, respectively, if you are using C99. The use of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>@ </span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>address</span></span></span><span lang=EN-US> to specify an absolute
variable or function must now be performed using the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__at(</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>address</span></span></span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>)</span></span></span><span
lang=EN-US> syntax. Interrupt functions that used the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>interrupt</span></span></span><span
lang=EN-US> keyword must now be defined using </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__interrupt()</span></span></span><span
lang=EN-US> and the appropriate arguments.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>In-line assembly</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#asm ... #endasm</span></span></span><span
lang=EN-US> form of inline assembly is no longer accepted when building for
C99. The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>asm()</span></span></span><span
lang=EN-US> form of inline assembly is now the only way to embed assembly
instructions inline with C code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Small floats</span></b><span
lang=EN-US> If you are building for C99, support for 24-bit </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>float</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>double</span></span></span><span
lang=EN-US> floating-point types is no longer provided, and these types will be
forced to 32-bits wide. If you need the smaller version of these types with
C99, use the C90 libraries (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-mc90lib</span></span></span><span
lang=EN-US> option).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Default optimization level</span></b><span
lang=EN-US> If you build on the command line, the default optimization level
has changed from the highest level to none. Ensure you explicitly state the
optimization level you need using the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-O</span></span></span><span
lang=EN-US> option. New projects in the MPLAB X IDE always specify a level and
will default to level 0 (no optimizations).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Predefined macros</span></b><span
lang=EN-US> Some macros have been deprecated, such as the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_HTC_VER_</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>xxxx</span></span></span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>_</span></span></span><span
lang=EN-US> macros, which define the current version. Note also that there are
several new macros defined by the compiler, such as </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__CLANG__</span></span></span><span
lang=EN-US>, which can be used to conditionally compile code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unused function warning (XC8E-50)</span></b><span
lang=EN-US> A warning with a unique message number is now issued for unused
functions that are specified as </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US>. This allows these warnings to be suppressed but allowing warnings
for regular unused functions to be emitted as usual.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.12.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.45</span></h2>

<p class=DescriptiveList><span lang=IT style='mso-ansi-language:IT'>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.13.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.44</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warnings in header file
(XC8-1581)</span></b><span lang=EN-US> Warning (2028), relating to external
declarations, was unnecessarily displayed when the status register preservation
objects (e.g., </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__resetbits</span></span></span><span
lang=EN-US>) were used and the project was being built for non-PIC18 devices. </span></p>

<p class=DescriptiveList><b><span lang=EN-US>Hexmate serial option change
(XC8-1425)</span></b><span lang=EN-US> The Hexmate </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-SERIAL</span></span></span><span
lang=EN-US> option now allows the explicit use of 0x before the Code argument.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Truncated hexmate fill value
warning (XC8-1420)</span></b><span lang=EN-US> A warning is now printed if the
Hemxate fill value does not wholly fit in the specified address range.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Better error reporting in Hexmate
(XC8E-172)</span></b><span lang=EN-US> Processing of hexmate</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--EDF</span></span></span><span
lang=EN-US> option now occurs sooner, so that descriptive warning and errors
can be produced when processing other Hexmate options.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.14.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.43</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Local optimization support
(XC8E-169)</span></b><span lang=EN-US> The compiler now only supports local
optimizations for enhanced mid-range and PIC18 devices. An error message will
be displayed if this optimization is selected with a device that does not
support this feature.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Revival of types in
&lt;stdint.h&gt; (XC8-1551) </span></b><span lang=EN-US>Non-standard 24-bit
types, such as </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>int24_t</span></span></span><span
lang=EN-US> have been restored to </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&lt;stdint.h&gt;</span></span></span><span
lang=EN-US>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.15.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.42</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>No license check during
preprocessing (XC8-141)</span></b><span lang=EN-US> A license is no longer
checked out when the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--pre</span></span></span><span
lang=EN-US> option is used.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning for incompatible pointer
to void assignment (XC8E-140)</span></b><span lang=EN-US> The compiler was
silently allowing the address of a function to be assigned to a pointer to
void. This assignment conversion is illegal. The compiler will now warn the
user if any such conversions are detected in a program.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Removal of types from &lt;stdint.h&gt;
(XC8-1551)</span></b><span lang=EN-US> Non-standard 24-bit types featured in </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;stdint.h&gt;</span></span></span><span
lang=EN-US> are no longer available.</span></p>

<p class=DescriptiveList><b><span lang=PT style='mso-ansi-language:PT'>Bogus
aliases (XC8-1539)</span></b><span lang=EN-US> Aliases for SFR bits </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>GODONE</span></span></span><span
lang=IT style='mso-ansi-language:IT'> (in </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ADCON0</span></span></span><span
lang=EN-US>), </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>ADCAL</span></span></span><span lang=IT
style='mso-ansi-language:IT'> (in </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>ADCON0</span></span></span><span
lang=EN-US>), and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>VCFG11</span></span></span><span lang=IT
style='mso-ansi-language:IT'> (in </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>ADCON1</span></span></span><span
lang=EN-US>) have been removed from the PIC18 K40 and K42 device header files.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Non-standard floating-point macros
(XC8-1528)</span></b><span lang=EN-US> The compiler was defining extra macros
for </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>DLB_RADIX</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>DBL_ROUNDS</span></span></span><span
lang=EN-US> in </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&lt;float.h&gt;</span></span></span><span
lang=EN-US> and these have been removed.<span style='mso-spacerun:yes'> 
</span>The values for these characteristics are fixed for all floating-point
types and the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>FL<span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>T_RADIX</span></span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>FLT_ROUNDS</span></span></span><span
lang=EN-US> macros should be used instead.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning for external objects
(XC8-1521)</span></b><span lang=EN-US> The code generator has no knowledge of
the location of objects defined in assembly code. The compiler will now use any
bank specifiers used in declarations for such objects to produce valid and
optimal code for the access of these objects. If no specifiers are present, a
warning is now generated to indicate that the generated code is suboptimal. It
is highly recommended that variables be defined in C code whenever possible.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Removal of timer macros (XC8-1394)</span></b><span
lang=EN-US> The macros </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>T1RD16ON</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>T3RD16ON</span></span></span><span
lang=EN-US>, defined in </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&lt;pic18.h&gt;</span></span></span><span
lang=EN-US>, are no longer supported. Their usage will now result in an
&quot;unsupported&quot; warning. To enable 16-bit timer read/write operations,
please refer to your device data sheet.</span></p>

<p class=DescriptiveList><a name=ExternalObjectWarning></a><b><span lang=EN-US>Inclusion
of interrupts in library files (XC8-123)</span></b><span lang=EN-US> In
previous versions of the compiler, interrupt functions that were contained in
libraries were not included into projects that used the library. The compiler
will now use all interrupt functions contained in libraries.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Change in warning level for
implicit conversion (XC8E-109)</span></b><span lang=EN-US> The warning level
for warning 373 (implicit signed to unsigned conversion) has been raised from
-4 to -3.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.16.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.41</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>XCLM expiration messaging
(XCLME-16)</span></b><span lang=EN-US> Some messaging issued by the license
manager regarding the expiration of HPA and the compiler</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s licence have been suppressed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Retraction of invariant/stable
optimization mode</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>invariant</span></span></span><span
lang=EN-US>/</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>stable</span></span></span><span
lang=EN-US> optimization setting is no longer available and a warning is issued
(subject to your set warning level threshold) if this is enabled. This mode has
been replaced with a new </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>ocg</span></span></span><span
lang=EN-US> optimization setting, detailed </span><span class=Hyperlink0><span
lang=EN-US style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#NewOcgOptimizationsSetting"><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>here</span></span></a></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Advisory on function duplication</span></b><span
lang=EN-US> An advisory is now issued if a non-reentrant function called from
multiple call graphs is duplicated by the compiler. There is no change in the
generated code for such situations, but you are now alerted to the compiler</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s response.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Response to PIC18 eeprom-qualified
variables (XC8-1498)</span></b><span lang=EN-US> Previously the compiler would
issue a warning if a PIC18 project variable was qualified with </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>eeprom</span></span></span><span
lang=EN-US>. This is now an error.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.17.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.40</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Error on overlapping segments
(XC8-1499)</span></b><span lang=EN-US> Previously a warning was issued if two
segments (psect collections) overlapped each other in memory. An error is now
issued in such situations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Removal of legacy EEPROM function
calls (XC8E-118)</span></b><span lang=EN-US> Calls to the legacy EEPROM
functions, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>eeprom_read()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>eeprom_write()</span></span></span><span
lang=EN-US> were previously mapped to the equivalent PIC18 peripheral library
functions if EEPROM was supported by the device and that library was installed.
If the library was not installed, theses calls were removed. The compiler now
always maps these functions to the peripheral library. If the library is not
installed when you build, an error will be triggered.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>End of the end_init psect</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>end_init</span></span></span><span
lang=EN-US> psect, which was used only for PIC18 projects to hold code which
jumped to the main section of the runtime startup code, is no longer used. Code
previously contained in this psect is now located in the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>init</span></span></span><span
lang=EN-US> psect.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.18.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.38</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Error on extended instruction set
(XC8E-97)</span></b><span lang=EN-US> Attempting to enable the extended PIC18
instruction set will now result in error message (1504). This instruction set
is not supported by the compiler.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.19.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.37</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Unhelpful warning regarding empty
structure definition (XC8-1377)</span></b><span lang=EN-US> Defining a
structure with empty braces leads to undefined behavior, but the warning
produced by XC8 indicated a misuse of the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__section</span></span></span><span
lang=EN-US> specifier and so was of little use.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unhelpful error with condition
inclusion (XC8E-74)</span></b><span lang=EN-US> In some instances, a malformed
preprocessor </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#if</span></span></span><span lang=EN-US>
directive might have caused the compiler to emit a confusing error message
indicating illegal characters in the directive.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.20.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.36</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Debug optimizations setting
inconsistent (XC8E-71)</span></b><span lang=EN-US> The operation of the debug
optimization setting is now consistent for all device families. It disables all
forms of inlining and procedural abstraction (reverse inlining), which can all
negatively affect source-level debugging of projects. Enabling this
optimization will increase code size, but will enhance the debuggability of
projects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Was invariant; now stable object</span></b><span
lang=EN-US> The invariant optimization setting referred to in previous compiler
versions has been renamed in this compiler version to stable-object mode, to
better reflect its purpose. You can now use the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>stable</span></span></span><span
lang=EN-US> suboption to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--OP<span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>T</span></span></span></span><span
lang=EN-US> option instead of </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>invariant</span></span></span><span
lang=EN-US>, and the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__stable</span></span></span><span
lang=EN-US> function specifier instead of </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__invariant</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Void issues (XC8E-87)</span></b><span
lang=EN-US> Using the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>sizeof()</span></span></span><span
lang=EN-US> operator on an object of type </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>void</span></span></span><span
lang=EN-US> will now return the value 1. Code which performs arithmetic
operations on </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>void *</span></span></span><span
lang=EN-US> objects will now issue a warning.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.21.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.35</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Removal of PIC18 peripheral
libraries</span></b><span lang=EN-US> The PIC18 peripheral libraries and their
associated header files and documentation are no longer shipped with this
compiler. The MPLAB Code configurator (MCC) can be used to generate routines
that perform similar tasks to those supplied by the peripheral library, and can
generate code for many devices, not just the PIC18 family. The MCC is available
as an MPLAB X IDE plugin and can be downloaded from the IDE under the <b>Tools
&gt; Plugins</b> menu. If you need to use the peripheral libraries that were
formerly shipped with the compiler, an archive of these are available as a
separate download and will need to be installed over the top of your compiler
installation. The archive was built for v1.34 of the compiler. If you encounter
any inconsistencies between the archived libraries and projects compiled with a
more recent compiler, you can copy the relevant library source modules into
your project.</span></p>

<p class=DescriptiveList><a name=NewFloatingPointLibraries><b><span lang=EN-US>New
floating-point libraries</span></b></a><span lang=EN-US> Replacement libraries
have been supplied that contain updated routines to perform 32-bit
floating-point operations. These routines produce more accurate results than
the previous 32-bit library routines; however, they have a </span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>‘</span><span lang=EN-US>relaxed compliance</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’ </span><span
lang=EN-US>and obey the following guidelines.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>Tiny (sub-normal) arguments are interpreted as zeroes.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>NaN arguments are interpreted as infinities.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>NaN results are never created in addition, subtraction,
multiplication, or division—where a NaN would be created, an infinity of the
proper sign is created instead. Square root of a negative number will return
the &quot;distinguished&quot; NaN (default NaN used for error return), as in
the &quot;non-relaxed&quot; IEEE-754 libraries.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>Infinities are legal arguments for all operations and behave as the
largest representable numbers; for example, +inf + -inf yeilds zero.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>Tiny (sub-normal) results are flushed to zero.</span></p>

<p class=DescriptiveListcont><span lang=EN-US>The results obtained from these
new libraries might differ to those produced from the 32-bit libraries supplied
with previous compiler versions, especially for tiny (sub-normal) values.</span></p>

<p class=DescriptiveListcont><span lang=EN-US>The function </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__fpnormalize()</span></span></span><span
lang=EN-US> can be called to convert any literal, 32-bit, floating-point value
so that it conforms to the relaxed guidelines above, that is is will remove
negative zeros and sub-normal values. The assembler operator </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>NORMALIZE32()</span></span></span><span
lang=EN-US> can be used to perform the same task for literals in hand-written
assembly code.</span></p>

<p class=DescriptiveListcont><span lang=EN-US>The (default) 24-bit
implementation of the floating-point routines have not changed in this compiler
version. These new routines might lead to an increase in code size, but they
typically execute faster. Advisory messages are output when they are in use.</span></p>

<p class=DescriptiveList><b><span lang=IT style='mso-ansi-language:IT'>Device
oscillator calibration</span></b><span lang=EN-US> Oscillator calibration using
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>--RUNTIME=+config</span></span></span><span lang=EN-US> will not work
with new devices that obtain their calibration constant from a calibration word
stored in flash program memory, such as the MCP19114/5 devices. Disable this
runtime sub-option if you plan to swap to one of these new devices. Refer to
the device data sheet for instructions on reading this data.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Application command lines</span></b><span
lang=EN-US> To better accommodate long command lines, the compiler driver now
passes a command file to all compiler applications when building, rather than
passing a list of options on the command line. The command file is a temporary
file that holds the options for the relevant application. If you select a
verbose build, you will see the command file name being passed to the
applications after the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>@</span></span></span><span
lang=EN-US> character, for example:</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>/Applications/dev/XC8/v1.35/bin/hexmate
@/tmp/hexmate_xcwst2geN.cmd</span></p>

<p class=DescriptiveListcont><span lang=EN-US>If you wish to see the content of
these files and the specific options passed to the applications, use the
verbose options twice, e.g. </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-v -v</span></span></span><span
lang=EN-US>, for example:</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>/Applications/dev/XC8/v1.35/bin/hexmate
@/tmp/hexmate_ xcwst2geN.cmd [
--edf=/Applications/dev/XC8/v1.35/dat/en_msgs.txt main.hex -Omain.hex
-logfile=main.hxl -addressing=1 -break=300000 ]</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Relaxed linking of stringtext
psect (XC8E-76)</span></b><span lang=EN-US> For enhanced mid-range devices, the
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>stringtext</span></span></span><span lang=EN-US> psect is no longer
restricted to being linked at an address that is a multiple of 0x100. This will
make it easier to allocate code to memory and might suppress some can</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>t find space errors.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Conditional assembly directive
(XC8-1266)</span></b><span lang=EN-US> An error is now issued if the number of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ENDIF</span></span></span><span
lang=EN-US> directives does not match the number of </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>IF</span></span></span><span
lang=EN-US>/</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>ELSIF</span></span></span><span
lang=EN-US> directives in each psect. Previously these situations were silently
ignored.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.22.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.34</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Use of XC8 in MPLAB IDE v8 is now
deprecated (XC8-1228)</span></b><span lang=EN-US> As of MPLAB XC8 v1.34, the
use of MPLAB 8 IDE is deprecated, and the installation of the DLL files that
the IDE used to interface to XC8 are removed from the compiler installer.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Reentrant main (XC8-937)</span></b><span
lang=EN-US> If the reentrant stack model is selected for a project, the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>main()</span></span></span><span
lang=EN-US> function in that project will be compiled using the software stack
and be reentrant, as per other functions. Previously </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>main()</span></span></span><span
lang=EN-US> was always compiled using the compiled stack regardless of project
stack model. Interrupt functions are aways compiled in a non-reentrant manner.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Disabling C libraries</span></b><span
lang=EN-US> It is no longer possible to request that linking of the standard C
libraries is not performed. Previously attempts to do so often resulted in compilation
errors. The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>clib</span></span></span><span
lang=EN-US> suboption to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--RUNTIME</span></span></span><span
lang=EN-US> option can be turned off, but it will result in a warning and have
no other effect.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>The exit and abort macros</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>abort()</span></span></span><span
lang=EN-US> library routine is now a macro that expands to be </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>exit()</span></span></span><span
lang=EN-US>. The exact behaviour of </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>exit()</span></span></span><span
lang=EN-US> is dependent on the selected device and whether the executable is a
debug or production build. For debug builds, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>exit()</span></span></span><span
lang=EN-US> will consist of a software breakpoint instruction followed by a
reset instruction, if possible. For production builds, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>exit()</span></span></span><span
lang=EN-US> will consist of only a reset instruction, if possible. In both
cases, if a reset instruction is not available, a goto instruction that jumps
to itself in an endless loop is output.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>User assertions</span></b><span
lang=EN-US> The&nbsp;</span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>ASSERT()</span></span></span><span
lang=EN-US>&nbsp;macro depends on the implementation of the function </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_fassert()</span></span></span><span
lang=EN-US>. The default&nbsp;</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>_fassert()</span></span></span><span
lang=EN-US>&nbsp;function, built into the library files, first calls the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> function, which prints a message&nbsp;identifying the source file
and line number of&nbsp;the assertion. Next, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_fassert()</span></span></span><span
lang=EN-US> attempts to terminate program execution by calling </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>abort()</span></span></span><span
lang=EN-US> (see above point).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New license installers and
messages </span></b><span lang=EN-US>During compilation you will now receive a
warning when your are within 14 days of the end of your HPA subscription or
demo period. The XC Network License Server is now a separate installer and is
no longer included in the single-user compiler installer. </span></p>

<p class=DescriptiveList><b><span lang=EN-US>Merged library source files
(XC8-1210)</span></b><span lang=EN-US> The source code for the
baseline/mid-range </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>ftdiv</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>fldiv</span></span></span><span
lang=EN-US> floating-point library routines, formerly located in the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sources/pic</span></span></span><span
lang=EN-US> directory of your compiler, has been merged with the equivalent
source code for the PIC18 devices. The new merged source files are </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ftdiv.c</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>fldiv.c</span></span></span><span
lang=EN-US>, located in the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>sources/common</span></span></span><span
lang=EN-US> directory of your compiler. These source files and the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ftarith.h</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>flarith.h</span></span></span><span
lang=EN-US> header files can no longer be found in the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sources/pic</span></span></span><span
lang=EN-US> directory. There is no function change to the operation of these
routines.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>The sizeof operator with pointers
(XC8-1019)</span></b><span lang=EN-US> Changes have been made to ensure that if
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>sizeof()</span></span></span><span
lang=EN-US> operator with a pointer operand has to be evaluated by the
preprocessor, a warning is given. If the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sizeof()</span></span></span><span
lang=EN-US> operator with a pointer operand has to be evaluated by the code
generator and<span style='mso-spacerun:yes'>  </span>the code generator cannot
determine the result, an error will be output.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning with packed auto
(XC8-1111, XC8-1156)</span></b><span lang=EN-US> A new warning (level -5) is
now produced for attempted use of the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__pack</span></span></span><span
lang=EN-US> specifier with </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>auto</span></span></span><span
lang=EN-US> structures. This specifier is ignored for </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>auto</span></span></span><span
lang=EN-US> structures.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.23.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.33</span></h2>

<p class=DescriptiveList><span lang=IT style='mso-ansi-language:IT'>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>4.24.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.32</span></h2>

<p class=Body><a name=RenamedDevices><b><span lang=EN-US style='mso-ansi-language:
EN-US'>Renamed devices</span></b></a><span style='mso-bookmark:RenamedDevices'></span><span
lang=EN-US style='mso-ansi-language:EN-US'> The following indicates devices
that have had their names changed. This release uses the new device names.</span></p>

<p class=Body>16F18323 <span style='mso-tab-count:1'>       </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-&gt;</span></span></span>
<span style='mso-tab-count:1'>       </span>16F18323A<br>
16LF18323 <span style='mso-tab-count:1'>    </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-&gt;</span></span></span>
<span style='mso-tab-count:1'>       </span>16LF18323A<br>
16F18313 <span style='mso-tab-count:1'>       </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-&gt;</span></span></span>
<span style='mso-tab-count:1'>       </span>16F18313A<br>
16LF18313 <span style='mso-tab-count:1'>    </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-&gt;</span></span></span>
<span style='mso-tab-count:1'>       </span>16LF18313A<br>
MCV082A <span style='mso-tab-count:1'>     </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-&gt;</span></span></span>
<span style='mso-tab-count:1'>       </span>16F18313<br>
MCV142A&nbsp;<span style='mso-tab-count:1'>     </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-&gt;</span></span></span>
<span style='mso-tab-count:1'>       </span>16F18323</p>

<p class=Body><b><span lang=EN-US style='mso-ansi-language:EN-US'>Function
pointers simplification (XC8-1002)</span></b><span lang=EN-US style='mso-ansi-language:
EN-US'> For enhanced mid-range devices only, function pointers are now always
16-bits wide and represent the full address of the target function. The
compiler no longer uses a jump table when making indirect calls for these
devices. No change is required for C code that uses function pointers, but any
assembly code that accesses these will need to be modified.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>4.25.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.31</span></p>

<p class=Body><span lang=IT style='mso-ansi-language:IT'>None.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>4.26.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.30</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Psect names (XC8-865)</span></b><span
lang=EN-US> The names of psects used to hold absolute </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> objects have changed from </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>xxxx_text</span></span></span><span
lang=EN-US> to </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xxxx_const</span></span></span><span
lang=EN-US>, where </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xxxx</span></span></span><span
lang=EN-US> is the name of the object being defined.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Parameter passing (XC8-914)</span></b><span
lang=EN-US> For PIC18 devices the first byte-sized argument to a function was
not passed in WREG in Free or Standard modes. (It was passed in WREG in PRO
modes.) This has been changed so that WREG is used regardless of the operating
mode. Note that in the new software stack, argument passing is performed in a
different way.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New warning level (XC8-151)</span></b><span
lang=EN-US> The warning level of message 368, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>array
dimension on &quot;*&quot; ignored</span></span></span><span lang=EN-US> has
been reduced from 0 to -1.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>New library source file locations
(XC8-939)</span></b><span lang=EN-US> Note that the location of some of the
library source files have changed since the previous release. Library source
files that are specified to a target device family are located in either the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>pic</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>pic18</span></span></span><span
lang=EN-US> subdirectory in the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>sources</span></span></span><span
lang=EN-US> directory of the compiler. Source files that are identical across
all device families are located in the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>common</span></span></span><span
lang=EN-US> subdirectory.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>4.27.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.21</span></p>

<p class=DescriptiveList><span lang=IT style='mso-ansi-language:IT'>None.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>4.28.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.20</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>-G
option disable</span></b><span lang=EN-US> The option that controlled
generation of symbol files has been disabled. This option was always selected
in MPLAB IDE and there was never a need to disable this feature. Symbol files
are now always produced. You can continue to specify this option in builds, but
it will be silently ignored.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>C listings disabled by default</span></b><span
lang=EN-US> C listing files are no longer produced by default. See the </span><span
class=Hyperlink0><span lang=EN-US style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><a href="#NewClistingOption"><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>New listing option</span></span></a></span></span><span
lang=EN-US> (in New Features) entry for more information.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Space number for EEPROM changed</span></b><span
lang=EN-US> The space number used by psects that hold EEPROM data has changed
from 2 to 3. This only affects PIC10/12/16 devices. This will not affect most
projects, but if you see an error indicating </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>memory
space red<span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>efined: 03/02</span></span></span></span><span
lang=EN-US>, then look for hand-written assembly that defines a psect used to
hold EEPROM data and change the space value.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warnings for absolute local
objects (XC8-652)</span></b><span lang=EN-US> Previously the compiler would
silently ignore any local (defined inside a function) object which the user had
attempted to make absolute. The compiler will now issue a warning to say that
the address specification will be ignored.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warnings for qualified local
objects (XC8-670)</span></b><span lang=EN-US> Objects which are local to a
function (including autos and static local objects) cannot be qualified as </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>far</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>near</span></span></span><span
lang=EN-US>. The compiler was not indicating that the specifier was being
ignored. A warning is now issued for such definitions.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>4.29.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.12</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Access of multi-byte SFRs</span></b><span
lang=EN-US> When writing literal values to multibyte </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>volatile</span></span></span><span
lang=EN-US> SFRs, the compiler will write high order byte first, then the low
order byte. This conforms to the requirements of some PIC SFRs, such as the NCO
register, which must be written in a particular order. This write order is not
guaranteed for other expressions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Watchdog configuration bit</span></b><span
lang=EN-US> Some devices have had their configuration bit setting change from </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>WDTEN</span></span></span><span
lang=EN-US> to </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>WDT</span></span></span><span lang=EN-US>.
For these devices you will need to update any </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#pragma
config</span></span></span><span lang=EN-US> directives that specify this
setting.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Implicit function in-lining</span></b><span
lang=EN-US> The implicit in-lining of function performed as an assembler
optimization is now disabled by default. The assembler optimizer has, in the
past, in-lined small assembly routines as part of its optimizations. You can
re-enable it using the driver option </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-A-auto_inline</span></span></span><span
lang=EN-US>. This change does not affect in-lining of C functions, controlled
using the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> specifier.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>4.30.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.11</span></p>

<p class=DescriptiveList><b><span lang=DE style='mso-ansi-language:DE'>Inline
SFR names</span></b><span lang=EN-US> When referencing SFR names specified in </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;xc.h&gt;</span></span></span><span
lang=EN-US> from in-line assembly code, do not use a leading underscore
character with the symbol. So, for example, use the symbols </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PORTA</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>RA0_bit</span></span></span><span
lang=EN-US> in in-line assembly code. (The same is true for SFR symbols in
assembly modules that include </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&lt;xc.inc&gt;</span></span></span><span
lang=EN-US>; however, the bit symbols have different names, for example, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PORTA</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>RA0</span></span></span><span lang=EN-US>.)
See the user's guide for more information on assembly code and accessing SFRs.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compiler banner information</span></b><span
lang=EN-US> The information shown in the compiler banner printed with each
compilation has changed. The compiler operating mode is no longer printed, but
you can still find this information in the list file. The license manage will
now return and print the license type.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unused symbol inclusion</span></b><span
lang=EN-US> Unused symbols are no longer included in intermediate p-code files.
This should not affect most customers. See the What's New section for
information on the new </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--PARSER</span></span></span><span
lang=EN-US> option which allows unused symbols to be included in the final link
step.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Pointer comparison warning</span></b><span
lang=EN-US> Warning number 1413 </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&quot;*&quot; is positioned at
address 0x0 and has had its addr<span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>ess taken; pointer comparisons may
be invalid</span></span></span></span><span lang=EN-US> should now only be
issued for symbols that are user-defined and not for temporary variables, such
as </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>&quot;ROM&quot;</span></span></span><span lang=EN-US> or </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&quot;RAM&quot;</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Specification of config pragma</span></b><span
lang=EN-US> The arguments to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>#pragma config</span></span></span><span
lang=EN-US> can now be quoted. You may prefer to quote the setting-value pairs
to ensure that the preprocessor does not perform substitution of these tokens,
e.g., </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#pragma config &quot;BOREN=OFF&quot;</span></span></span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>4.31.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.10</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Re-activation of the compiler</span></b><span
lang=EN-US> As of version 1.10, the license files used by the XC compiler
license manager are installed in a different location. This is automatically
handled by the installer; however, if you plan to use an older license file
with v1.10, you will need to re-activate the v1.10 XC8 compiler with your
activation key before you can use it. Previously, the installers could find
older license files and did not require re-activation. Re-activation will not
be necessary in future when updating compiler versions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>PIC10/12/16 Assembly Header Files</span></b><span
lang=EN-US> The names of some of the assembly header files have changed.
Provided code included the generic and recommended </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;xc.inc&gt;</span></span></span><span
lang=EN-US> assembly header file, then this will be transparent. Specifically,
changes relate to using the extension </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>.inc</span></span></span><span
lang=EN-US> instead of </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>.h</span></span></span><span
lang=EN-US> for assembly-domain header files; the names of device-specific
assembly header files now match their C-domain counterparts.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Deprecation of in-line assembly
header files</span></b><span lang=EN-US> The PIC10/12/16 header files that were
usable from assembly that was in-line with C code have been remove. These
header files were previously included via the generic file </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;caspic.h&gt;</span></span></span><span
lang=EN-US>. The content of these files will be included once you include </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;xc.h&gt;</span></span></span><span
lang=EN-US> in your C source code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Removal of single-letter bit
definitions</span></b><span lang=EN-US> The definitions for SFR bits that used
a single letter identifier have been removed, for example the SSP1CON register
bit </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>S</span></span></span><span lang=EN-US>.
These register bits are still available in the corresponding SFR structures,
for example </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>SSP1CONbits.S</span></span></span><span
lang=EN-US>. The absence of these very poorly chosen identifiers should not be
missed.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>4.32.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.01</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing SFR definitions</span></b><span
lang=EN-US> There have been changes to the header files to ensure correlation
with the data sheet.&nbsp; This may resulted in some SFR definitions being no
longer available. If you see undefined symbol errors or other build errors
relating to SFR names, please refer to the appropriate device-specific header
file and update your code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>The inline pragma</span></b><span
lang=EN-US> The much misused </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> pragma has been changed. What was the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> pragma is now known as the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>intrinsic</span></span></span><span
lang=EN-US> pragma. Since the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> pragma was not intended to be used with user-defined routines, this
should have no impact on existing projects. Use of the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> pragma in this compiler version will be ignored; however, future
versions may implement a user-operable inlining feature.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Filling unused values</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--FILL</span></span></span><span
lang=EN-US> option, which is used to fill unused memory locations, now assumes
the value specified is a 2 byte word. Previously the size of this value was the
same as the target device program memory addressability i.e. 1 for PIC10/12/16
devices and 2 for PIC18 devices. The width of the value can always be specified
with the option. See the user's guide section relating to Hexmate.<b><o:p></o:p></b></span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>4.33.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.00</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Library functions removed</span></b><span
lang=EN-US> The following library functions and macros are now longer supported
and have been removed from the libraries and header files.</span></p>

<p class=DescriptiveList style='margin-left:57.45pt;text-indent:-38.15pt;
mso-list:l0 level2 lfo12;tab-stops:list 29.1pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>device_id_read</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:57.45pt;text-indent:-38.15pt;
mso-list:l0 level2 lfo12;tab-stops:list 29.1pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>idloc_read</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:57.45pt;text-indent:-38.15pt;
mso-list:l0 level2 lfo12;tab-stops:list 29.1pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>idloc_write</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:57.45pt;text-indent:-38.15pt;
mso-list:l0 level2 lfo12;tab-stops:list 29.1pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>config_read</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:57.45pt;text-indent:-38.15pt;
mso-list:l0 level2 lfo12;tab-stops:list 29.1pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>config_write</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:57.45pt;text-indent:-38.15pt;
mso-list:l0 level2 lfo12;tab-stops:list 29.1pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>checksum8</span></span></span><span
lang=EN-US> and the macro </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>CHECKSUM8</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:57.45pt;text-indent:-38.15pt;
mso-list:l0 level2 lfo12;tab-stops:list 29.1pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>checksum16</span></span></span><span
lang=EN-US> and the macro </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>CHECKSUM16</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveList style='margin-left:57.45pt;text-indent:-38.15pt;
mso-list:l0 level2 lfo12;tab-stops:list 29.1pt'><![if !supportLists]><span
lang=EN-US style='font-size:11.0pt;mso-hansi-font-family:"Arial Unicode MS";
position:relative;top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>checksum32</span></span></span><span
lang=EN-US> and the macro </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>CHECKSUM32</span></span></span><span
lang=EN-US style='font-size:11.0pt'><o:p></o:p></span></p>

<p class=DescriptiveListcont><span lang=EN-US style='font-family:"Times Roman"'>Any
attempt to use these will result in a compiler error.</span><span lang=EN-US
style='font-family:"Times Roman";mso-fareast-font-family:"Times Roman";
mso-bidi-font-family:"Times Roman"'><o:p></o:p></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Memory functions replaced by
peripheral library equivalents</span></b><span lang=EN-US> Flash and EEPROM
functions and macros have been removed from the compiler libraries and header
files. They have been replaced with those in the peripheral library.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compiler drivers</span></b><span
lang=EN-US> While you may continue to call the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>picc</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>picc18</span></span></span><span
lang=EN-US> command-line drivers, it is recommended that projects be swapped to
use the unified </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span lang=EN-US>
driver. Future compiler releases may discontinue the device-specific drivers or
additional functionality may be added to </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US> that will not be usable if you continue to use the device-specific
drivers.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>FN-type
directives</span></b><span lang=EN-US> All FN-type directives are no longer
supported and should not be used. Such directive include: </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>FNBREAK</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>FNSIZE</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>FNROOT</span></span></span><span
lang=EN-US> etc. The </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>FNCALL</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>FNROOT</span></span></span><span
lang=EN-US> directives are still issued by the compiler, but it is recommended
that these not be used in handwritten assembly code.</span><span lang=EN-US
style='font-family:"Arial Unicode MS",sans-serif'><br clear=all
style='mso-special-character:line-break;page-break-before:always'>
</span></p>

<h1 style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l5 level1 lfo2'><a
name="Toc_FixedIssues"><![if !supportLists]><span style='mso-hansi-font-family:
"Arial Unicode MS"'><span style='mso-list:Ignore'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-US style='mso-fareast-font-family:
"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:
EN-US'>Fixed Issues</span></a></h1>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The following
are corrections that have been made to the compiler. These might fix bugs in
the generated code or alter the operation of the compiler to that which was
intended or specified by the user's guide. The version number in the
subheadings indicates the first compiler version to contain fixes for the
issues that follow. The bracketed label(s) in the title are that issue's
identification in the tracking database. These may be useful if you need to
contact support.</span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>Note that some
device-specific issues are corrected in the Device Family Pack (DFP) associated
with the device. See the MPLAB Pack Manager for information on changes made to
DFPs and to download the latest packs. </span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.36</span></h2>

<p class=DescriptiveList><span lang=EN-US>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.35</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Hexadecimal stack size ignored
(XC8-2697)</span></b><span lang=EN-US> The driver silently ignored the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-mstack</span></span></span><span
lang=EN-US> option when the stack size was specified using the hexadecimal
prefix </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>0x</span></span></span><span lang=EN-US>.
Now, the driver will strictly enforce that the number be a decimal format. If
it is not, a warning will be issued and the size will default to </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>auto</span></span></span><span
lang=EN-US> for the relevant stack.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>errno not being set (XC8-2682)</span></b><span
lang=EN-US> Several </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&lt;math.h&gt;</span></span></span><span
lang=EN-US> functions (for example </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>acos()</span></span></span><span
lang=EN-US>) were not setting the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>errno</span></span></span><span
lang=EN-US> object when required, such as on a domain error. These functions
now set </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>errno</span></span></span><span
lang=EN-US> when required by the C99 language standard.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Automatic reservations (XC8-2676)</span></b><span
lang=EN-US> If a size has not been specified for either the reentrant stacks or
the heap, the compiler will silently reserve all remaining memory for this
purpose. Now an advisory message is emitted to indicate that this has taken
place.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Software stack reservation
(XC8-2675)</span></b><span lang=EN-US> For projects targeting Enhanced
Mid-range devices, if there are reentrant functions that are called only from
an interrupt (not from main-line code), memory will be reserved for the
software stack using by main-line code but not for the software stack using by
interrupt code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Restricted call destinations
(XC8-2665)</span></b><span lang=EN-US> The PIC Assembler was encoding the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>call</span></span></span><span
lang=EN-US> instruction with its operand XORed in an expression that ensured it
could not be used to call a destination in a different page. This was the
intended operation for calls generated from C code, but not for hand-written
assembly code written for the PIC assembler. The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>call</span></span></span><span
lang=EN-US> instruction is now encoded exactly as specified in the assembly
source. To call destinations in another page, use the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PAGESEL</span></span></span><span
lang=EN-US> directive and mask the address. A new </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PAGEMASK()</span></span></span><span
lang=EN-US> direction can do this. Alternatively, use the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>fcall</span></span></span><span
lang=EN-US> instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning for corruption
(XC8-2659)</span></b><span lang=EN-US> The compiler may have unnecessarily
issued warning message 1481 (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>call from non-reentrant function,
&quot;*&quot;, to &quot;*&quot; might corrupt parameters</span></span></span><span
lang=EN-US>) for functions that were not be affected by this issue.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>MB_CUR_MAX macro undefined
(XC8-2657)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>MB_CUR_MAX</span></span></span><span
lang=EN-US> macro (the maximum number of bytes in a multibyte character in the
current locale) was undefined. It is now defined to be the value 1.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad optimization of single
instruction (XC8-2655)</span></b><span lang=EN-US> For projects targeting PIC18
devices and that used optimization level </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>3</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>s</span></span></span><span lang=EN-US>,
any functions that were called from an interrupt and main-line code and that
used the compiled stack and contained code that could be compiled to a single
instruction (for example, </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>return 5;</span></span></span><span
lang=EN-US>), the compiler might have performed optimizations that result in
the application not functioning correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Lack of warnings (XC8-2654)</span></b><span
lang=EN-US> </span><span lang=ES-TRAD style='mso-ansi-language:ES-TRAD'>No </span><span
lang=EN-US>preprocessor </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>#warning</span></span></span><span
lang=EN-US> warning messages were issued for PIC-AS </span><span lang=FR
style='mso-ansi-language:FR'>assembler </span><span lang=EN-US>source files
using the C preprocessor.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad assembly debug information
(XC8-2645)</span></b><span lang=EN-US> When building assembly projects
targeting PIC10/12/16 devices, the linker would miscalculate the address
associated with some lines of code within a psect that appears in more than one
module.<span style='mso-spacerun:yes'>  </span>This would only affect debugging
(such as setting breakpoints) and not the functionality of the assembled code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>LIST lacking processor option
(XC8-2625)</span></b><span lang=EN-US> The assembler's </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>LIST</span></span></span><span
lang=EN-US> directive was not allowing the processor to be specified using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>p=</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>device</span></span></span><span lang=EN-US> argument. This is now
permitted.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Errors when building for REALICE
(XC8-2623)</span></b><span lang=EN-US> For projects using the C99 language
standard and targeting an Enhanced Mid-range device, use of the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-mdebbugger=realice</span></span></span><span
lang=EN-US> option might have triggered multiple errors relating to trace
functionality.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Align directive breaking debugging
(XC8-2618)</span></b><span lang=EN-US> Usage of the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ALIGN</span></span></span><span
lang=EN-US> directive in a PIC-AS project might have caused incorrect line
number information to be included in the ELF/DWARF file. This issue only
affected debugging and did not result in any runtime failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Invalid instruction accepted
(XC8-2614, XC8-1956)</span></b><span lang=EN-US> The assembler incorrectly
allowed a destination register to be specified with the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movwf</span></span></span><span
lang=FR style='mso-ansi-language:FR'> instruction</span><span lang=EN-US> for
all devices, for example </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>movwf 0x70,w</span></span></span><span
lang=EN-US>. This is no longer permitted.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Extra trace macro (XC8-2610)</span></b><span
lang=EN-US> When compiling for a PIC18 device and the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-mdebugger=realice</span></span></span><span
lang=EN-US> option was used, the compiler defined the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__IT</span></span></span><span
lang=IT style='mso-ansi-language:IT'> macro</span><span lang=EN-US>. This macro
should only be defined by the IDE.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missed warning on extended
instruction set (XC8-2609)</span></b><span lang=EN-US> The compiler failed to
detect and emit an error when the PIC18 extended instruction-set bit had been
enabled by default configuration register programming. The enabling of this
mode has always been reported when it was programmed explicitly through the
configuration bits.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unnecessary bank selection
(XC8-2606)</span></b><span lang=EN-US> Code for Mid-range devices that directly
accessed SFRs located at address 0x0 or 0x1 (e.g. </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>INDF
= 0x44</span></span></span><span lang=EN-US>), might have triggered the
inclusion of unnecessary bank selection instructions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect string conversions
(XC8-2598)</span></b><span lang=EN-US> The standard C99 library functions in
the strtol family incorrectly converted strings beginning with </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>0x</span></span></span><span
lang=EN-US> followed by non-alphanumeric characters.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>In-line SFR bit macros (XC8-2592)</span></b><span
lang=EN-US> The SFR bit access macros previously supplied in the
device-specific C header files (</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>.h</span></span></span><span
lang=EN-US> files) were unusable with in-line assembly code. This has now been
corrected. For example:</span></p>

<p class=Code0 style='margin-bottom:0cm'><span lang=EN-US style='mso-ansi-language:
EN-US'>#include &lt;xc.h&gt;</span></p>

<p class=Code0 style='margin-bottom:0cm'><span lang=ES-TRAD><br>
</span><span lang=DA style='mso-ansi-language:DA'>asm(&quot;bsf &quot; </span><span
lang=EN-US style='mso-ansi-language:EN-US'>RB4_bit</span><span lang=IT
style='mso-ansi-language:IT'>);</span><span lang=ES-TRAD><br style='mso-special-character:
line-break'>
<![if !supportLineBreakNewLine]><br style='mso-special-character:line-break'>
<![endif]></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inconsistent </span></b><b><span
lang=DE style='mso-ansi-language:DE'>ptrdiff_t</span><span lang=EN-US>
definition (XC8-2585)</span></b><span lang=EN-US> The type represented by </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ptrdiff_t</span></span></span><span
lang=EN-US> for C99 builds has been changed from a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>long</span></span></span><span
lang=EN-US> type to an </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>int</span></span></span><span
lang=EN-US>. This is then consistent with C90 builds but also with how the
compiler performs pointer subtraction. The result of any subtraction not
representable in an </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>int</span></span></span><span lang=EN-US>
object constitutes undefined behaviour.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>vsprintf not customized (XC8-2581)</span></b><span
lang=EN-US> The compiler generates the code for many IO functions, based on how
they are used in a program. The compiler was not properly customising the
implementation of the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>vsprintf()</span></span></span><span
lang=EN-US> function, resulting in the excess code being generated for this
function. As part of this fix, the compiler now calls </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>vfprintf()</span></span></span><span
lang=EN-US>, rather than </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>vsnprintf()</span></span></span><span
lang=EN-US>, to perform the bulk of the printing operation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>regsused pragma (XC8-2550)</span></b><span
lang=EN-US> In some instances, the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>#pragma regsused</span></span></span><span
lang=EN-US> might not have worked as expected when building C99 based projects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Confused integer scan specifier
(XC8-2506)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>%i</span></span></span><span
lang=FR style='mso-ansi-language:FR'> conversion specifier </span><span
lang=EN-US>when used with the C99 scanf family of functions was being
incorrectly processed, as if it was </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>%d</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect encoding of move
instruction (XC8-2504)</span></b><span lang=EN-US> When using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>,0</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>,1</span></span></span><span lang=EN-US>
syntax to specify access or banked memory for a PIC18 </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movwf</span></span></span><span
lang=FR style='mso-ansi-language:FR'> instruction</span><span lang=EN-US> (e.g.
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>movwf EECON2,0</span></span></span><span lang=EN-US>), the assembler
might have encoded it as a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>movf</span></span></span><span
lang=FR style='mso-ansi-language:FR'> instruction. </span></p>

<p class=DescriptiveList><b><span lang=EN-US>Misplaced absolute objects
(XC8-2502)</span></b><span lang=EN-US> When using the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-nostartfiles</span></span></span><span
lang=EN-US> option, absolute objects defined in C source might not have been linked
at the specified address.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus error when using macro
(XC8-2489)</span></b><span lang=EN-US> The assembler might have shown an error
for code that used an assembler macro with an argument beginning with </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>SET</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>EQU</span></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Defunct SFR aliases present
(XC8-2486)</span></b><span lang=EN-US> The device-specific headers and include
files for PIC18FxxK42 devices contained incorrect SFR bitfield aliases. These
have been removed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Relaxed parsing of config
directives (XC8-2485, XC8-2599, XC8-2615)</span></b><span lang=EN-US> To avoid
interaction between the arguments of the PIC Assembler's </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>CONFIG</span></span></span><span
lang=EN-US> directive and definitions in device-specific header files, either
the </span><span class=Codeitalic><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>setting</span></span></span><span
lang=EN-US> or </span><span class=Codeitalic><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>value</span></span></span><span
lang=EN-US> tokens or the </span><span class=Codeitalic><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>setting</span></span></span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'> = </span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>value</span></span></span><span lang=EN-US> expression can be
surrounded by either double or single quotes to protect them from any macro
substitution performed by the preprocessor, for example, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>CONFIG
&quot;FOSC = ERC&quot;</span></span></span><span lang=EN-US>. The preprocessor
will not alter anything inside the quotes.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect configuration
programming sizes (XC8-2476)</span></b><span lang=EN-US> Some newer PIC18
devices now have their configuration settings located in DFM (Data Flash
Memory), which are programmed as individual bytes. The c</span><span lang=IT
style='mso-ansi-language:IT'>ompiler assume</span><span lang=EN-US>d that all
PIC18 configuration settings were programmed in words and so padded or
programmed with a default value an odd number of configuration </span><span
lang=PT style='mso-ansi-language:PT'>bytes.</span><span lang=EN-US> For new
devices that had an odd number of configuration bytes, a warning was issued
when the padded bytes were programmed into the device. The new programming
characteristics of configuration and user-id memory that is programmed using
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#pragma config</span></span></span><span
lang=EN-US> directive and the assembler </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>CONFIG</span></span></span><span
lang=FR style='mso-ansi-language:FR'> directive</span><span lang=EN-US> has
been recorded in the device INI files.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad interrupt context switch
(XC8-2474)</span></b><span lang=EN-US> When building Enhanced Mid-range
projects that called reentrant functions from an interrupt routine, the
compiler generated context save/restore code that might have been incorrect and
could potentially cause </span><span lang=IT style='mso-ansi-language:IT'>data
corruption.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Config values misinterpreted
(XC8-2464)</span></b><span lang=EN-US> When building PIC-AS projects, named
configuration values that begin with a digit (e.g. </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>8<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>MHz</span></span></span></span><span lang=EN-US>) would be incorrectly
interpreted as a constant literal numeric value. The assembler now checks
config values against all named values before trying to interpret them as a
numerical value.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unimplemented option removed
(XC8-2463)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-###</span></span></span><span
lang=EN-US> option was selectable for assembler projects targeting PIC devices
but generated an error. This option can still be selected for AVR projects, but
is no longer a valid option for PIC projects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Errors where they aren't
(XC8-2443)</span></b><span lang=EN-US> The use of macros that contained </span><span
lang=FR style='mso-ansi-language:FR'>file/line directives</span><span
lang=EN-US> (which may result from it containing preprocessor directives) may
have caused any warning or error messages emitted by the assembler to reference
the wrong file or line number.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unimplemented symbols (XC8-2412)</span></b><span
lang=EN-US> The compiler generated </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__size_of_</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>xxx</span></span></span><span lang=EN-US> symbols (shown in the map
file) that were assigned inaccurate values. These symbols are no longer
generated.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Broken branches (XC8-2378)</span></b><span
lang=EN-US> When building PIC-AS projects targeting Enhanced Mid-range devices,
the use of the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>bra</span></span></span><span lang=FR
style='mso-ansi-language:FR'> instruction </span><span lang=EN-US>with an</span><span
lang=IT style='mso-ansi-language:IT'> operand </span><span lang=EN-US>that was
not a constant might have</span><span lang=PT style='mso-ansi-language:PT'>
result</span><span lang=EN-US>ed in incorrect encoding of that instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unwelcome page selection
(XC8-2346, XC8-2604)</span></b><span lang=EN-US> For PIC-AS projects targeting
Mid-range and Baseline devices, page select instruction(s) may have been
inserted prior to </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>cal<span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>l</span></span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>goto</span></span></span><span
lang=EN-US> instructions that were located immediately after skip instructions,
such as </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>btfsx</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing watchdog delay builtins
(XC8-2345, XC8-2394)</span></b><span lang=EN-US> The definitions for the
watchdog variants of the timed delay builtins, those being&nbsp;</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__delaywdt_us</span></span></span><span
lang=EN-US> and&nbsp;</span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__delaywd<span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>t_ms</span></span></span></span><span
lang=EN-US>, were missing when building for Mid-range and Baseline devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Redefining assert (XC8-2325)</span></b><span
lang=EN-US> It was not possible to redefine the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>assert()</span></span></span><span
lang=EN-US> macro, which should have been performed each time </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;assert.h&gt;</span></span></span><span
lang=EN-US> was included and based on the current state of the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>N<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>DEBUG</span></span></span></span><span lang=EN-US> macro. This is now
possible.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad branches not detected
(XC8-2322)</span></b><span lang=EN-US> No error was issued by the assembler
when building PIC18 projects that contained branch instructions specifying a
destination label that was not defined.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Silent overlap of absolute objects
(XC8-2268)</span></b><span lang=EN-US> The compiler did not warn if an absolute
object (defined using </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__at()</span></span></span><span
lang=EN-US>) was positioned such that it overlapped with any addresses that
were used internally by the compiler. A warning is now issued in such
circumstances.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unoptimized interrupt routines
(XC8-2179)</span></b><span lang=EN-US> The interrupt functions defined for
projects targeting Baseline devices might not have been optimized. Optimization
of interrupt functions are now enabled for all devices that support interrupts.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unnecessary bank selection
(XC8-2159)</span></b><span lang=EN-US> When targeting Baseline and Mid-range
devices, unnecessary banking instructions may have been generated when
accessing absolute objects located within unbanked memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong line information in messages
(XC8-1962)</span></b><span lang=EN-US> Code-related errors and warnings from
the assembler might have indicated an incorrect C source line for some code
sequences.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No members? No build (XC8-1924)</span></b><span
lang=EN-US> In situations where a structure had been defined with no members,
the compiler might have</span><span lang=NL style='mso-ansi-language:NL'> crash</span><span
lang=EN-US>ed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning with character
classification (XC8-1803)</span></b><span lang=EN-US> Use of some C99-standard
library character classification functions (viz. </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>isalpha()</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>isdigit()</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>isgraph()</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>islower()</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>isprint()</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>isspace()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>isupper()</span></span></span><span
lang=EN-US>) caused the compiler to emit the warning </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>expression
generates no code</span></span></span><span lang=EN-US>. This was a side-effect
of their implementation, and did not affect the code's operation. This warning
will no longer occur.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>FLT_ROUNDS macro undefined
(XC8-1791)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>MB_CUR_MAX</span></span></span><span
lang=EN-US> macro (the floating-point rounding mode) was undefined. It is now
defined to be the value 1, which implies rounding to the nearest representable
value.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Errno triggers scanf fail
(XC8-1786)</span></b><span lang=EN-US> If </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>errno</span></span></span><span
lang=EN-US> was non-zero before calling any of the scanf family of functions,
then any of the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>a</span></span></span><span lang=EN-US>, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>d</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>e</span></span></span><span lang=EN-US>, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>f</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>g</span></span></span><span lang=EN-US>, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>o</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>s</span></span></span><span lang=EN-US>
and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>x</span></span></span><span lang=EN-US>
conversion specifiers would have </span><span lang=FR style='mso-ansi-language:
FR'>fail</span><span lang=EN-US>ed to correctly read in valid input.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad config ignored (XC8-1771)</span></b><span
lang=EN-US> The compiler was not detecting or warning against situations where
a literal numerical value to a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>#pragma config</span></span></span><span
lang=FR style='mso-ansi-language:FR'> directive</span><span lang=EN-US> had
trailing garbage, for example </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>#pragma config CONFIG2<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>L=0sillybilly</span></span></span></span><span lang=EN-US>. An error
will now be issued in such cases.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined assembly routines
(XC8-1318)</span></b><span lang=EN-US> In some instances, referencing a
function that is defined in a separate assembly module in C source might result
in an undefined symbol error.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.32</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Breaking builtins broken
(XC8-2407)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__builtin_software_breakpoint()</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_debug_break()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__conditional_software_breakpoint()</span></span></span><span
lang=EN-US> builtins did not use the correct instruction coding for traps when
used with K42 and Q PIC18 devices. A </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>nop</span></span></span><span
lang=EN-US> instruction has also been added after the trap to account for
debugger skidding.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Second access of library fails
(XC8-2381)</span></b><span lang=EN-US> Invoking&nbsp;the Windows version of the
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>xc8-ar.exe</span></span></span><span lang=EN-US> library archiver a
second time to access an existing library </span><span lang=FR
style='mso-ansi-language:FR'>archive </span><span lang=EN-US>may have</span><span
lang=FR style='mso-ansi-language:FR'> fail</span><span lang=EN-US>ed with an </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>unable
to rename</span></span></span><span lang=IT style='mso-ansi-language:IT'> error
message.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incomplete expansion of assembly
macros (XC8-2334)</span></b><span lang=EN-US> Assembly macros (from either
PIC-AS source or in assembly modules when using the C compiler) were
incompletely rendered in MPLABX's disassembly view, showing on the first
instruction in the sequence. This issue did not affect code operation, and all
instructions in the macro should now be displayed in the IDE.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Consistency check for target
device (XC8-2327)</span></b><span lang=EN-US> The linker will now check the
extended ident record (where present) to ensure that all object files passed to
it were built for the same device architecture. Extended ident records are
produced by the </span><span lang=IT style='mso-ansi-language:IT'>Microchip
PIC-AS assembler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembly division by zero failure
(XC8-1960)</span></b><span lang=EN-US> The assemblers were not detecting a
division by zero in constant assembly expressions, which would result in a
build failure but no reported error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Long built times (XC8-1930)</span></b><span
lang=EN-US> Programs containing recursion could have taken an inordinate amount
of time to build. Better tracking of the call graph will now decrease the built
times for such programs.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning with absolute
functions (XC8-1809)</span></b><span lang=EN-US> Absolute functions located
above the highest</span><span lang=DE style='mso-ansi-language:DE'> RAM </span><span
lang=EN-US>address on PIC18 devices that implement an interrupt controller
module would have caused the compiler to erroneously warn that the function </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>lies
outside available data space</span></span></span><span lang=EN-US>. The warning
did not affect the operation of the code.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.31</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Unexplained compiler failures
(XC8-2367)</span></b><span lang=EN-US> When running on Windows platforms that
had the system temporary directory set to a path that included a dot '</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.</span></span></span><span
lang=EN-US>' character, the compiler may have </span><span lang=FR
style='mso-ansi-language:FR'>fail</span><span lang=EN-US>ed to execute.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.30</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Missing linker options (XC8-2333)</span></b><span
lang=EN-US> The PIC Assembler driver was not issuing several linker options.
With these options missing, the delta value of classes contained in program
memory on Baseline and Mid-range devices were not being correctly set, and for
devices that implemented EEPROM the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>EEDATA</span></span></span><span
lang=EN-US> class was missing entirely. This issue would not have affected the
generated code, but not all of the available memory areas would have been
usable, and premature </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>can't find space</span></span></span><span
lang=EN-US> or other errors might have resulted. The XC8 C compiler driver was
not affected by this issue and C programs built as expected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Debugging assembly source
(XC8-2319)</span></b><span lang=EN-US> Stepping through assembly source code
that included other files might not have worked correctly due to the incorrect
interpretation of embedded debug information.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Debugging with structures
(XC8-2303)</span></b><span lang=EN-US> The DWARF debugging information for
programs that contained a mixture of complete and incomplete structure/union
types might have been incorrect. When the MPLAB </span><span lang=DA
style='mso-ansi-language:DA'>X </span><span lang=EN-US>IDE encountered such
errors, it would have stopped reading the remaining debugging information, thus
affecting the debugability of the program.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing stdint.h types and macros
(XC8-2302)</span></b><span lang=EN-US> The following 24-bit integer types were
unavailable in </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&lt;stdint.h&gt;</span></span></span><span
lang=EN-US>: </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>int_least24_t</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>int_fast24_t</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>uint_least24_t</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>uint_fast24_t</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveListcont><span lang=EN-US>The following macros related to
24-bit integer types were also unavailable: </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>INT24_MIN</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>INT24_MAX</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>UINT24_MAX</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>INT_LEAST24_MIN</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>INT_LEAST24_MAX</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>UINT_LEAST24_MAX</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>INT_FAST24_MIN</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>INT_FAST24_MAX</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>UINT_FAST24_MAX</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>INT24_C()</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>UINT24_C()</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong assembler device support
list (XC8-2301)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>pic-as</span></span></span><span
lang=EN-US> driver option </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-mprint-devices</span></span></span><span
lang=EN-US> incorrectly reported AVR devices as being supported, which was not
the case.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No chip lists for old driver
(XC8-2297)</span></b><span lang=EN-US> Using the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--chipinfo</span></span></span><span
lang=EN-US> option of the legacy </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US> driver might not have found the device information and issued an
error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Not so fast (XC8-2296)</span></b><span
lang=EN-US> The fast 16-bit types and macros provided by the C99 version of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;stdint.h&gt;</span></span></span><span
lang=EN-US> incorrectly used 32-bit types.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Target option not following GCC
style (XC8-2291)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8-ar</span></span></span><span
lang=EN-US> library archiver utility did not accept an equal sign after the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--target</span></span></span><span
lang=EN-US> option, as with the GCC implementation of this utility. If the
option was used in this way, the archiver might not have functioned correctly.
You may now use either </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--target=</span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>ch<span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>ipname</span></span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--target </span></span></span><span
class=Codeitalic><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>chipname</span></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning, warning (XC8-2289)</span></b><span
lang=EN-US> When the generation of an </span><span lang=FR style='mso-ansi-language:
FR'>assembler listing</span><span lang=EN-US> file was enabled for C99 builds,
some warning messages might have appeared twice.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Nul characters not printed
(XC8-2285)</span></b><span lang=EN-US> Formatted printing functions in the C99
standard library would fail to print characters using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>%c</span></span></span><span
lang=EN-US> format-specifier if that character was </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>'\0'</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong function sizes (XC8-2284)</span></b><span
lang=EN-US> In the generated map file, under module information, the size
indicated for functions might have been 1 greater than the function's actual
size.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing SFR access bits (XC8-2282)</span></b><span
lang=EN-US> Using the bit-access SFR macros (for example </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>btfsc<span
style='mso-tab-count:1'>   </span><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>TMR0IE</span></span></span></span><span
lang=EN-US>) supplied in the device-specific assembler include files resulted
in the warning </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>RAM access bit operand not specified</span></span></span><span
lang=EN-US>, when the assembly instruction did not specify the access bit. The
macros now define the access bit so this does not need to be specified in
project assembly source code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash with GOTO in inline assembly
(XC8-2266)</span></b><span lang=EN-US> For PIC18 projects that enabled
assembler optimizations and that used a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>goto</span></span></span><span
lang=FR style='mso-ansi-language:FR'> instruction </span><span lang=EN-US>without
a symbolic </span><span lang=FR style='mso-ansi-language:FR'>destination </span><span
lang=EN-US>operand (i.e. it was a constant address) in inline assembly, the
compiler might have unexpected </span><span lang=IT style='mso-ansi-language:
IT'>terminate</span><span lang=EN-US>d.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect library macro (XC8-2265)</span></b><span
lang=EN-US> The definition of </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>SIZE_MAX</span></span></span><span
lang=EN-US> in the C99 </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&lt;stdint<span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.h&gt;</span></span></span></span><span
lang=EN-US> standard library header was incorrectly defined to be </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>UINT32_MAX</span></span></span><span
lang=EN-US>. This has been made coherent with </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>size_t</span></span></span><span
lang=EN-US> and is now defined to be </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>UINT16_MAX</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Math changes (XC8-2017)</span></b><span
lang=EN-US> The following fixes have been made to the C99 </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;math.h&gt;</span></span></span><span
lang=EN-US> functions.</span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo7;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>log10</span></span></span><span
lang=EN-US> , </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>log2</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>log</span></span></span><span lang=EN-US>
families of functions now generate a domain error should their argument be
negative.</span></p>

<p class=DescriptiveList style='margin-left:55.35pt;text-indent:-37.35pt;
mso-list:l4 level2 lfo7;tab-stops:list 27.0pt'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>log1p</span></span></span><span
lang=EN-US> family of functions now generate a domain error should their
argument be less than -1.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Invalid library creation
(XC8-2015)</span></b><span lang=EN-US> When building</span><span lang=PT
style='mso-ansi-language:PT'> a PIC</span><span lang=EN-US>-device library
using the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-r</span></span></span><span lang=EN-US>
option to </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xc8-ar</span></span></span><span
lang=EN-US>, if the named library file did not exist, an invalid library was
created that would produce errors when it was later used.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad address shifts (XC8-2013)</span></b><span
lang=EN-US> For Baseline and Mid-range projects, expressions that took the
address of an object, cast that to an integer, and right shifted the result,
might have produced </span><span lang=PT style='mso-ansi-language:PT'>incorrect</span><span
lang=EN-US> values.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undetected fixup errors (XC8-2009)</span></b><span
lang=EN-US> The linker was not detecting that fixup of some assembly operand
expressions was overflowing and hence did not produce a fixup overflow error.
Although this affected all PIC devices and could lead to code failure, the
expressions that triggered this situation were extremely rare.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unable to build pointer conversion
(XC8-2008)</span></b><span lang=EN-US> The compiler might not have been able to
build</span><span lang=FR style='mso-ansi-language:FR'> expression</span><span
lang=EN-US>s involving a conversion from a 1-byte wide </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> pointer to a 24-</span><span lang=NL style='mso-ansi-language:NL'>bit
integer,</span><span lang=EN-US> in PIC18 projects, failing with the error: </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>registers
unavailable for code generation of this expression</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Fixup error with large-RAM devices
(XC8-1996)</span></b><span lang=EN-US> For PIC18 devices with more than 4K of
data memory, the compiler would in some instances use a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movff</span></span></span><span
lang=EN-US> instruction where a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>movffl</span></span></span><span
lang=EN-US> instruction was needed. This would have resulted in a fixup error
stopping the build.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad comparisons (XC8-1994)</span></b><span
lang=EN-US> For Baseline and Mid-range devices, expressions that compared
integers that were greater than 2 bytes in size, were comprised of objects
allocated to different banks, and yielded certain values, the result might have
been</span><span lang=PT style='mso-ansi-language:PT'> incorrect</span><span
lang=EN-US> due to a missing banked selection instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect abstraction of
non-identical code (XC8-1978)</span></b><span lang=EN-US> In PIC18 projects,
the assembler optimizer did not correctly recognize that instructions that
accessed the same file register address but that specified different access
bits were different instructions. As a result, instruction sequences were being
factored out as common, even when there was this small discrepancy in their
functions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Floats printed badly (XC8-1972)</span></b><span
lang=EN-US> Formatted printing functions in the C99 standard library failed to
take into account that rounding a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>float</span></span></span><span
lang=EN-US> to be printed may increase that value's power of 10 and hence the
number of significant digits to print.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash when using hybrid stack
model (XC8-1955)</span></b><span lang=EN-US> Programs for Enhanced M</span><span
lang=NL style='mso-ansi-language:NL'>id-range </span><span lang=EN-US>devices
that used the hybrid stack model caused the compiler to crash if that program
contained functions that used the compiled stack and accessed 64-bit integer
objects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Looping around allocGlobals error
(XC8-1943)</span></b><span lang=EN-US> Building projects that used a compiled
stack and had functions that were called reentrantly and that defined pointer
parameters or pointer </span><span lang=IT style='mso-ansi-language:IT'>auto </span><span
lang=EN-US>objects might have result in a &quot;looping around
allocGlobals()&quot; error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unnecessary memory allocation for
statics (XC8-1942) </span></b><span lang=EN-US>When optimizing PIC projects at
level </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>3</span></span></span><span lang=EN-US>
or level </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>s</span></span></span><span lang=EN-US>,
in some instances, functions that were never called and that defined </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>static</span></span></span><span
lang=EN-US> local variables may have had memory allocated for those</span><span
lang=FR style='mso-ansi-language:FR'> variables</span><span lang=EN-US> even
though the function itself was removed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Multi-line pragmas failing
(XC8-1916)</span></b><span lang=EN-US> Any </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#pragma</span></span></span><span
lang=FR style='mso-ansi-language:FR'> directives </span><span lang=EN-US>in C99
projects that were split across multiple lines using a line continuation
character might have triggered an error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Lack of no space error (XC8-1865)</span></b><span
lang=EN-US> The compiler did not issue an error when a region of memory was
entirely consumed by absolute objects and a memory-specified object (used in
conjunction with </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-maddrqual=require</span></span></span><span
lang=EN-US>) had to be located in that same </span><span lang=IT
style='mso-ansi-language:IT'>region.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash with pointers to incomplete
type (XC8-1863)</span></b><span lang=EN-US> In certain circumstances where a
program used pointers to an incomplete structure type, the compiler attempted
to generate code for expressions that accessed members from that type rather
than from the complete type, which was properly defined and available,
resulting in a compiler crash.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad call to subtype for indirect
call (XC8-1859)</span></b><span lang=EN-US> Indirect function calls that appear
to have been made using a NULL pointer trigger a warning and are replaced with
a constant expression of zero. However, the compiler did not also convert that
expression to the return type of the replaced function call and in some cases
this resulted in the error message </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>bad call to typeSub</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't find space error (XC8-1843)</span></b><span
lang=EN-US> For projects targeting PIC10/12/14/16 devices that are using
optimizations and have </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US>-qualified absolute objects, the compiler may have issued a can't
find space error, even though there may have be sufficient program memory
available.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Too large arrays undetected
(XC8-1827)</span></b><span lang=EN-US> The Clang front end (used by C99
projects) was silently truncating the size of very large arrays. If the number
of array elements now exceeds the maximum allowable, an error will be issued.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning in library code
(XC8-1814)</span></b><span lang=EN-US> Some C99 programs that used formatted
printing elicited the warning </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>pointer in expression may have no <span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>targets</span></span></span></span><span lang=EN-US> for files in the
standard library. These warnings will no longer be issued.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Pointers truncated when printed
(XC8-1241)</span></b><span lang=EN-US> Pointers printed using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>%p</span></span></span><span
lang=EN-US> </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>printf</span></span></span><span
lang=EN-US> </span><span lang=FR style='mso-ansi-language:FR'>format specifier </span><span
lang=EN-US>were truncated to 2-bytes before printing, resulting in the upper
byte being absent when the pointer was 3 bytes wide.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Arithmetic overflow (XC8-1429,
XC8-1122)</span></b><span lang=EN-US> When converting</span><span lang=FR
style='mso-ansi-language:FR'> a constant expression </span><span lang=EN-US>type
to a smaller type as part of an assignment, the code generator would emit a
warning, even when an appropriate cast was used.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.29 (Functional Safety
Release)</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Bad labels in powerup stub
(XC8-2011)</span></b><span lang=EN-US><span style='mso-spacerun:yes'> 
</span>The powerup assembly source provided to customize project startup
sequences was missing colons on labels, which is now mandatory and which would
have led to syntax errors. This issue did not affect projects built for PIC18
devices. Note that the C99 powerup source files now use a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.S</span></span></span><span
lang=EN-US> extension, and the C90 source files are present with a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.as</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>.S</span></span></span><span lang=EN-US>
extension. Use the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>.as</span></span></span><span lang=EN-US>
version of these files only if you are using the older compiler driver, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>xc8</span></span></span><span
lang=EN-US>.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.7.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.20</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Undependable dependency files
(XC8-1991)</span></b><span lang=EN-US> When using the driver's </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-M</span></span></span><span
class=Code><i><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></i></span><span
lang=EN-US> options, a dependancy file was not being generated in all
instances.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Preprocess-only builds not
stopping (XC8-1989)</span></b><span lang=EN-US> If the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-E</span></span></span><span
lang=EN-US> option (preprocess only) is used with assembler source files, the
compiler or assembler may exit with error 141, stating that it is unable to
open an object file.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong destination assumption
(XC8-1986)</span></b><span lang=EN-US> If a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movwf</span></span></span><span
lang=EN-US> instruction did not specify an addressing mode (banked or the A</span><span
lang=IT style='mso-ansi-language:IT'>ccess</span><span lang=EN-US> bank) the
assembler assumed the A</span><span lang=IT style='mso-ansi-language:IT'>ccess</span><span
lang=EN-US> bank was to be used if it could determine that the address of the
file operand was in the SFR portion of the Access bank, or the file operand was
prefixed with </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>c:</span></span></span><span lang=EN-US>;
otherwise, it assumed banked addressing. Now, if the assembler can detect that
the file operand addresses the GPR portion of the Access bank, it will assume
the Access bank. It is recommended that you always use the appropriate operand
(e.g. </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>,a</span></span></span><span lang=EN-US>
or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>,b</span></span></span><span lang=EN-US>) to indicate the desired
addressing mode in hand-written assembly code rather than reply on defaults.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>File-creation errors (XC8-1985)</span></b><span
lang=EN-US> When building MPLAB X IDE projects that invoke Hexmate to perform
non-standard operations, such as merging for bootloaders, there might have been
file creation errors relating to Hexmate temporary files.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unknown rfPIC devices (XC8-1981)</span></b><span
lang=EN-US> The compiler was not able to find the device INI file when building
for any of the rfPIC12C509AF, rfPIC12C509AG, rfPIC12F675F, rfPIC12F675H, or
rfPIC12F675K devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No output for -dM option
(XC8-1974)</span></b><span lang=EN-US> When a source file was provided on the
command line together with the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-dM</span></span></span><span
lang=EN-US> option, no output was produced. This has been corrected, and a list
of defined macros is output as expected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong escaped character constants
(XC8-1971)</span></b><span lang=EN-US> In C99 </span><span lang=PT
style='mso-ansi-language:PT'>PIC </span><span lang=EN-US>projects built using
the macOS compiler, escaped hexadecimal character constants greater than 0x7F
were being stored as</span><span lang=RU style='mso-ansi-language:RU'> 0xFF.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Extraneous call graph heading
(XC8-1968)</span></b><span lang=EN-US> In some instance a call graph heading
may have been shown in the map file even though no call graph should have been
produced.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bank selection with long objects
(XC8-1967)</span></b><span lang=EN-US> In PIC18 projects, the bank of 32-bit
wide integer objects that were a member/element of an aggregate type larger
than a bank might not have been selected prior to that object being used in
expressions involving basic math operations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Broken assembler LIST control
(XC8-1958)</span></b><span lang=EN-US> Some valid arguments to the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>LIST</span></span></span><span
lang=EN-US> assembler control may have triggered a syntax error. Note that
assembler controls have now been made directives, see </span><span class=Link><span
lang=EN-US style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#ConversionOfAssembler"><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>Migration
issues</span></span></a></span></span><span lang=EN-US> for more information.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Looping around allocGlobals
(XC8-1851)</span></b><span lang=EN-US> PIC18 projects using the C90 standard
and libraries might have generated a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>looping around allocGlobals()</span></span></span><span
lang=EN-US> error message in rare instances.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Library search order (XC8-1936)</span></b><span
lang=EN-US> When searching for a symbol that was present in more than one
library, the linker might have linked in the module from the wrong library. The
library search order is now followed under all circumstances.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Cromwell crashes with F* filenames
(XC8-1933)</span></b><span lang=EN-US> When a project had multiple </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>static</span></span></span><span
lang=EN-US> functions with the same name and these functions were defined in a
source file whose name begins with 'F', the cromwell utility might have</span><span
lang=NL style='mso-ansi-language:NL'> crash</span><span lang=EN-US>ed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing keywords (XC8-1921)</span></b><span
lang=EN-US> The compiler did not recognize the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__software</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__compiled</span></span></span><span
lang=EN-US> keywords when building for C99 projects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code generator crash (XC8-1905,
XC8-1806, XC8-1923, XC8-1954)</span></b><span lang=EN-US> When compiling for
the C99 standard, the compiler's parser (Clang) would fail to ensure that the
initializing expressions for </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US>-qualifed local objects were a compile-time constant. The compiler's
code-generators assumed that check has already taken place, and might have</span><span
lang=NL style='mso-ansi-language:NL'> crash</span><span lang=EN-US>ed when
encountering erroneous intermediate code from the parser.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong constant propagation in
duplicated functions (XC8-1903)</span></b><span lang=EN-US> In some instances,
constant propagation optimizations were being incorrectly applied to auto
variables in duplicated functions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect initialization
(XC8-1887)</span></b><span lang=EN-US> For Enhanced Mid-range projects, the
data used to initialize large objects whose address had been taken, might have
been</span><span lang=PT style='mso-ansi-language:PT'> incorrect.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Looping error (XC8-1876)</span></b><span
lang=EN-US> Programs containing calls to unprototyped functions that had not
been defined </span><span lang=PT style='mso-ansi-language:PT'>result</span><span
lang=EN-US>ed in a &quot;looping around globalAllocs&quot; error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad rotate code (XC8-1868)</span></b><span
lang=EN-US> At level 2 or higher optimization levels, the compiler would
generate erroneous code or be unable to generate code for some expressions that
implemented a left bit-rotate.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unnecessary conversion of branch
instruction (XC8-1866)</span></b><span lang=EN-US> </span><span lang=FR
style='mso-ansi-language:FR'>The PIC18 assembler </span><span lang=EN-US>might
have unnecessarily converted a conditional branch instruction to the opposite
conditional branch over a branch or a skip instruction over a jump when the
target of the branch was specified using the location counter, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>$</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unnecessary use of movffl
instruction (XC8-1856)</span></b><span lang=EN-US> For projects targeting PIC18
devices with more than 15 banks of data memory, the compiler used a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movffl</span></span></span><span
lang=EN-US> instruction to access some objects (e.g. objects with automatic
storage) allocated to banks 0-15 whereas a smaller </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movff</span></span></span><span
lang=EN-US> instruction would have </span><span lang=IT style='mso-ansi-language:
IT'>suffice</span><span lang=EN-US>d.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad timer reads (XC8-1854)</span></b><span
lang=EN-US> The device-specific headers of some PIC18 devices (e.g. PIC18F'K42)
do not provide definitions of joined timer registers (e.g. TMR0, TMR1, etc.).
In such cases, the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>READTIMERx()</span></span></span><span
lang=IT style='mso-ansi-language:IT'> macro</span><span lang=EN-US>s expanded
into invalid code and potentially with no indication that this was the case. In
such circumstances, the compiler will now emit a warning message that the macro
is not supported by the current device.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No sign extension of right shift
(XC8-1833)</span></b><span lang=EN-US> The compiler generated incorrect code
for some expressions involving a right-shift of </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>long</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>long long</span></span></span><span
lang=EN-US> integer object by 16 bits.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bank assumption disregarded when
using code offset (XC8-1533)</span></b><span lang=EN-US> For PIC10/12/16
devices, the compiler generated runtime startup code might not have functioned
correctly when the code offset feature (</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-mcodeoffset</span></span></span><span
lang=EN-US>) was used and code (typically a bootloader) executed prior to the
startup code exited with a bank other than 0 selected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembler memory leaks (XC8-1482)</span></b><span
lang=EN-US> A number of substantial memory leaks were identified and closed in
the compiler's assemblers, thereby reducing their memory footprint. These leaks
might have triggered out of memory errors for large projects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't find space error (XC8-1112)</span></b><span
lang=EN-US> When building code for Enhanced Mid-range devices, the placement of
large objects that were less than the size of a bank might have triggered can't
find space errors, even though there appeared to be sufficient memory
available.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo13'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.8.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.19 (Functional Safety
Release)</span></h2>

<p class=DescriptiveList><span lang=IT style='mso-ansi-language:IT'>None.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.9.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.10</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warnings relating to
structure sizes (XC8-1900)</span></b><span lang=EN-US> Warnings stating
incorrect sizes of structures might have been issued when building C99
projects. This issue did not affect the generated code, which used the correct
sizes and which would execute correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Ineffective switch pragma
(XC8-1893)</span></b><span lang=EN-US> </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#pragma
switch</span></span></span><span lang=EN-US> directives placed inside a function
body did not affect </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>switch</span></span></span><span
lang=EN-US> statements within that function.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Interrupts not linked from
libraries (XC8-1888)</span></b><span lang=EN-US> In projects where an interrupt
function (ISR) was provided in a library and other modules in that library
located before the ISR module were required by the program, the ISR module was
not correctly linked into the program.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unwatchable reentrant autos
(XC8-1878)</span></b><span lang=EN-US> The ELF/DWARF output for some PIC18
projects (e.g. those for PIC18 K42 devices) had the wrong address of the
frame-pointer register encoded. This prevented</span><span lang=ES-TRAD
style='mso-ansi-language:ES-TRAD'> auto variables </span><span lang=EN-US>within
reentrant functions from being watched in the MPLAB X IDE.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assertion failure for absolute
objects (XC8-1870)</span></b><span lang=EN-US> When a region of PIC18 memory is
entirely consumed by absolute addressed objects and a program requires that an
object with the corresponding memory-specifier be located in that region, the
code-generator reported an assertion failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Broken Mirrors (XC8-1862)</span></b><span
lang=EN-US> In the device-specific C header files for 18(L)FxxK42 parts, many
of the macros that describe the address of register-mirrors in the DMA space
were incorrect.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Too much information (XC8-1861)</span></b><span
lang=EN-US> Clang might have produced extraneous log output under Windows 7.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bit-fields not promoted (XC8-1832)</span></b><span
lang=EN-US> For non-PIC18 devices, operations on a structure bit-field may not
have correctly promoted the bit-field value to a larger type, resulting in an </span><span
lang=PT style='mso-ansi-language:PT'>incorrect result.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>rand() out of range (XC8-1823)</span></b><span
lang=EN-US> The C99 standard library function </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>rand()</span></span></span><span
lang=EN-US> could have returned a pseudo-random number outside of its
stipulated range of 0 to </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>RAND_MAX</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong serial values in Hexmate
(XC8-1820)</span></b><span lang=EN-US> Hexmate serial values that had leading
zeros in the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-serial</span></span></span><span
lang=EN-US> option might not have been processed correctly, resulting in the
wrong value or wrong number of values being inserted into the hex file.base</span></p>

<p class=DescriptiveList><b><span lang=EN-US>32-bit installer component
(XC8-1794)</span></b><span lang=EN-US> One component of the installer
application was not a 64-bit application, resulting in a warning message being
issued by macOS.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>config pragma error undetected
(XC8-1747)</span></b><span lang=EN-US> The compiler failed to detect some
syntax errors, such as missing assignment values, in the arguments provided to
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#pragma config</span></span></span><span
lang=FR style='mso-ansi-language:FR'> directive</span><span lang=EN-US> when
more than one setting was specified in the one pragma.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus pointer warning (XC8-1685)</span></b><span
lang=EN-US> For PIC16(L)F devices that support </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>eepr<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>om</span></span></span></span><span lang=EN-US>-qualified objects, the
compiler, in certain circumstances, may have incorrectly issued error 1402, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>a
pointer to eeprom cannot also point to other data types</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong file in error message
(XC8-1603)</span></b><span lang=EN-US> If a syntax error was encountered on a
preprocessed assembly source file, the compiler may have referenced an
intermediate source file in its error message rather than the source file.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No error for bad codeoffset
(XC8-1571)</span></b><span lang=EN-US> Using an invalid value for the
codeoffset feature might have resulted in the compiler exiting without an
appropriate error message.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code size fluctuations with
formatted printing (XC8-1556)</span></b><span lang=EN-US> Standard printing
functions (e.g. </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>sprintf</span></span></span><span
lang=EN-US>) that were referenced but not ultimately used in the project might
have influenced the encoding (hence the code size) of other printing functions
that <i>were</i> linked into the final program output.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't find space (XC8-1553)</span></b><span
lang=EN-US> For mid-range devices that have large amounts of common memory, the
compiler may have produced a can''t find space error rather than allocating
large objects to that space.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warnings from library code
(XC8-1552)</span></b><span lang=EN-US> In some cases when compiling for C90,
library code from formatted output functions, like </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US>, would emit warning 373, </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>implicit signed to unsigned
conversion</span></span></span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><o:p></o:p></span></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Illegal instructions permitted
(XC8-1489)</span></b><span lang=EN-US> The mid-range assembler failed to detect
illegal instructions if the destination argument was supplied with the
instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Illegal initialization not
detected (XC8-1457) </span></b><span lang=EN-US>The compiler did not detect
when absolute-addressed variables located in RAM were initialized with zero.
Initializing such objects is not permitted and an error message is now emitted
should such an initilization be found.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.10.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.05</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Two too small (XC8-1816)</span></b><span
lang=EN-US> For PIC10/12/16 devices, the size of the used program memory
displayed in the memory summary might have been 2 words less than the actual
usage. This issue only affected the memory summary printed by the driver; the
linker map file was accurate.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No abstraction of inlined
(XC8-1813)</span></b><span lang=EN-US> When compiling for space, procedural
abstraction optimizations might not have been applied to code inside functions
that had been</span><span lang=NL style='mso-ansi-language:NL'> inlined.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Clang hanging (XC8-1798)</span></b><span
lang=EN-US> The compiler hung when building for C99, it encountered code that
declared an incomplete array and later </span><span lang=PT style='mso-ansi-language:
PT'>redeclare</span><span lang=EN-US>d a complete version of the array in the
same translation unit.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Multiplication errors (XC8-1770)</span></b><span
lang=EN-US> For PIC18 projects being built for speed, expressions involving
multiple instances of 16-</span><span lang=FR style='mso-ansi-language:FR'>bit
multiplication </span><span lang=EN-US>that used </span><span lang=FR
style='mso-ansi-language:FR'>certain </span><span lang=EN-US>operands might
have produced an</span><span lang=PT style='mso-ansi-language:PT'> incorrect</span><span
lang=EN-US> result due to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>PROD</span></span></span><span
lang=EN-US> register being clobbered mid-calculation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>int$flags undefined (XC8-1768)</span></b><span
lang=EN-US> The compiler might have issued an undefined symbol error for the
symbol </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>int$flags</span></span></span><span
lang=EN-US> when building small PIC18 projects that used interrupts.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Redefinition errors with library
interrupts (XC8-1766)</span></b><span lang=EN-US> When linking libraries that </span><span
lang=FR style='mso-ansi-language:FR'>contain</span><span lang=EN-US>ed
interrupt functions, a conflicting declaration or redefined symbol error might
have occurred.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Errors with C99 interrupts
(XC8-1764)</span></b><span lang=EN-US> Macros passed as arguments to the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__interrupt()</span></span></span><span
lang=EN-US> specifier might not have been expanded when building for C99 PIC18
projects, resulting in a compilation error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>EI-DI-O (XC8-1719)</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>ei()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>di()</span></span></span><span
lang=EN-US> macros, which enable and disable, respectively, the global
interrupt enable bit, were not defined for some Enhanced Mid-range device. The
affected devices have the identification </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PIC14EX</span></span></span><span
lang=EN-US> in the compiler's </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>chipinfo.ini</span></span></span><span
lang=EN-US> file. In addition, these same devices were missing the prototype
for the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_delay3()</span></span></span><span
lang=EN-US> builtin function, which would have resulted in a an error if that
function had been used in a project. All these macros and functions are now
available for these devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Return value clobbers other
objects (XC8-1709)</span></b><span lang=EN-US> In some cases when a function
returned a pointer to a structure type that contains a function-pointer member,
the compiler may not have allocated space on a compiled stack for the return
value, resulting in it clobbering other objects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't generate code with Free
license (XC8-1660)</span></b><span lang=EN-US> Case label values that used
expressions involving the conditional (ternary) operator might have triggered
can't generate code errors when using an unlicensed compiler or the
optimizations were disabled.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't generate code with Free
license (XC8-1600)</span></b><span lang=EN-US> In some instances,
initialization of </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US>-qualified objects with a complex constant expression might have
issued a can't generate code error when using an unlicensed compiler or the
optimizations were disabled.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad conversion of pointer return
value (XC8-1590)</span></b><span lang=EN-US> In some Enhanced M</span><span
lang=NL style='mso-ansi-language:NL'>id-range </span><span lang=EN-US>projects,
incorrect code was generated for the conversion of a 1-byte RAM pointer to a
2-byte pointer. Specifically, in the case where the 1-byte pointer contents was
a return value that was used immediately by the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>return</span></span></span><span
lang=EN-US> statement of another function which returned that pointer.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't generate code for pointe
dereferences (XC8-1579)</span></b><span lang=EN-US> Can't generate code errors
might have been produced for complex projects that defined structures that contained
function pointers members.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't generate code in if()
(XC8-1384)</span></b><span lang=EN-US> In instances where an </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>if()</span></span></span><span
lang=EN-US> statement in a Mid-range project had no body statements and the
controlling expression had </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>volatile</span></span></span><span
lang=EN-US> identifiers, a Can't Generate Code error might have been produced.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Too positive (XC8-1244)</span></b><span
lang=EN-US> Code in PIC18 projects that used a reentrant stack was printing
negative floating-point values as positive rather than negative values. This
only affected those projects using the C90 libraries.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect stack allocations
(XC8-1105)</span></b><span lang=EN-US> Projects assigning incompatible function
addresses to a function pointers might have experienced memory allocation
issues with the indirectly referenced functions' stack-based objects.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.11.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=EN-US style='mso-ansi-language:EN-US'>Version 2.00</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Timer values (XC8-1743)</span></b><span
lang=EN-US> When comparing timer registers with a constant value, the compiler
might have avoided reading the lower byte of the timer register, which would
result in the entire timer register not being updated correctly. This
optimization is no longer applied to objects specified as </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>vol<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>atile</span></span></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Negative zeros (XC8-1694)</span></b><span
lang=EN-US> The compiler had not been capable of generating a negative zero
floating-point constant. This has been corrected, and the constant </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-0.0</span></span></span><span
lang=EN-US> will be encoded with the sign bit set.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unwelcome degenerates (XC8-1684)</span></b><span
lang=EN-US> In expressions where a compiler optimization replaced the use of a
variable with a literal constant zero, the compiler might have warned about the
variable no longer being used or being degenerate in comparisons/relational
expressions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Delay errors and inaccuracies
(XC8-1677)</span></b><span lang=EN-US> If the parameter to the built-in delay
routine was not a constant value (e.g. a constant expression), the compiler
might have issued undefined symbol errors, or generated an inaccurate delay. An
error will now be issued if the delay argument is not a constant value.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>pic.h rejected (XC8-1676)</span></b><span
lang=EN-US> When building for non-PIC18 devices, errors might have been
produced for code in the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>pic.h</span></span></span><span
lang=EN-US> header file when the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--ADDRQUAL=reject</span></span></span><span
lang=EN-US> option was specified.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inaccurate device memory report
(XC8-1675, XC8-1650)</span></b><span lang=EN-US> For some devices, the total
available program or data memory reported in the memory summary after
compilation might not have been accurate. This issue did not affect the
reported amount of memory used.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Function pointer holding data
address warning (XC8-1672)</span></b><span lang=EN-US> Assigning ((void *)0) to
a function pointer might have incorrectly generated a warning sating that a
function pointer cannot be used to hold the address of data. This issue will be
corrected when building with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus Arithmetic overflow warnings
(XC8-1671)</span></b><span lang=EN-US> Certain complex constant expressions
might have produced arithmetic overflow warnings for valid code when compiled
with level 0 optimizations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't generator code for case
label (XC8-1660)</span></b><span lang=EN-US> When compiling with a non-zero
level optimization, the compiler might have issued a Can't generate code error
for </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>case</span></span></span><span
lang=EN-US> label expressions in </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>switch()</span></span></span><span
lang=EN-US> statements involve the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>? :</span></span></span><span
lang=EN-US> operator. This has been corrected; however, the error still exists
with level 0 optimizations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Data corruption with free mode
context save (XC8-1638)</span></b><span lang=EN-US> When operating in Free
mode, the compiler might have saved context to </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>btemp</span></span></span><span
lang=EN-US> registers that were never defined. This issue will no longer occur,
and additionally, the list of registers saved by Free mode more closely matches
that of PRO mode.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Librarian crash (XC8-1634)</span></b><span
lang=EN-US> When extracting modules from a library under Windows, the librarian
might have crashed when creating a directory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't find space (XC8-1609)</span></b><span
lang=EN-US> For PIC10/12/14/16 projects using non-default linker options and
where one or more regions of program memory were quite small, a can't find
space error might have occurred, even though there was</span><span lang=IT
style='mso-ansi-language:IT'> sufficient </span><span lang=EN-US>remaining
space.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No type match error when shifting
(XC8-1606)</span></b><span lang=EN-US> When building PIC18 projects with level
2 optimizations, expressions involving right shifts by 8 bits and a </span><span
lang=FR style='mso-ansi-language:FR'>conversion </span><span lang=EN-US>of the
result to a smaller type might have produced a no type match error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Context save corruption with
reentrant stack (XC8-1604)</span></b><span lang=EN-US> When building for
enhanced mid-range devices in Free mode and using the reentrant stack, the
interrupt context save code was not correctly mirrored by the context
restoration code, resulting in data corruption. This issue will no longer
occur, and additionally, the list of registers saved by Free mode more closely
matches that of PRO mode.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unterminated macro definitions
(XC8-1514)</span></b><span lang=EN-US> The parser was compiling without error
preprocessor macro definitions which were missing closing parentheses. This
issue will be corrected when building with the C99 standard and the Clang front
end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't find space errors (XC8-1596,
XC8-1273)</span></b><span lang=EN-US> When building for Enhanced Mid-range
projects, a can't find space error might have been emitted where an absolute
linear-memory object was positioned in the same bank as another absolute
non-linear memory object, even though their addresses did not overlap.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus signed to unsigned warning
(XC8-1586)</span></b><span lang=EN-US> In some instances, when an integer </span><span
lang=FR style='mso-ansi-language:FR'>expression </span><span lang=EN-US>used as
an array </span><span lang=DE style='mso-ansi-language:DE'>index </span><span
lang=EN-US>was promoted to an int, the generation of a implicit signed to
unsigned conversion warning might have occurred. This issue will be corrected
when building with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad intermediate code (XC8-1560)</span></b><span
lang=EN-US> In some cases, where a member of a structure had a typedef'd type,
that was used in a previous definition before the structure, the code generator
emitted the error message &quot;bad intermediate code&quot;. This issue will be
corrected when building with the C99 standard and the Clang front end, but for
legacy projects an error is now emitted and the issue can possibly be worked-around
by ensuring that the structure is the first definition to use the typedef'd
type.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Syntax error reported for
conditional operator (XC8-1536)</span></b><span lang=EN-US> In complex
expressions involving the ternary operator, the compiler might have incorrectly
issue a expression syntax error. This issue will be corrected when building
with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect structure initializer
not detected (XC8-1530)</span></b><span lang=EN-US> Code which initializes a
structures with an integer type was not detected. This issue will be corrected
when building with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash over include paths
(XC8-1527)</span></b><span lang=EN-US> When compiling for C90 and using
relative paths involving forward slashes in include statements, the compiler
might have experienced a crash on some platforms.<span
style='mso-spacerun:yes'>  </span>This issue will be corrected when building
with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Array argument conflict (XC8-1467)</span></b><span
lang=EN-US> Some arrays of pointers when passed to a function might have
triggered an argument conflict with prototype error, even thought the type of
the argument appeared to match that required by the prototype. This issue will
be corrected when building with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Valid declarations marks as
conflicting (XC8-1466)</span></b><span lang=EN-US> Declarations for an object
using the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>static</span></span></span><span
lang=EN-US> specifier that were accompanied by definitions of the same object
but that omitted the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>static</span></span></span><span
lang=EN-US> specifier produced a warning and error, stating that there had been
a redeclaration of the object with a different storage class. This issue will
be corrected when building with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect parsing of backslash in
comments (XC8-1460)</span></b><span lang=EN-US> The handling of the backslash
character when compiling for C90 was incorrect when used within comments. This
issue will be corrected when building with the C99 standard and the Clang front
end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Debugging line issues (XC8-1438)</span></b><span
lang=EN-US> Using a macro to represent the header file of a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#include</span></span></span><span
lang=PT style='mso-ansi-language:PT'> preprocessor directive result</span><span
lang=EN-US>ed in incorrect line number information being contained in compiler
debug output files (ELF or COFF). This issue will be corrected when building
with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Macro expansion (XC8-1413)</span></b><span
lang=EN-US> The preprocessor did not correctly expand preprocessor macros whose
replacement text required several levels of subsequent macro expansion. This
issue will be corrected when building with the C99 standard and the Clang front
end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't find space for large const
objects (XC8-1404)</span></b><span lang=EN-US> When building for enhanced
mid-range projects, </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> objects placed at an absolute address (using either </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>@</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__at()</span></span></span><span
lang=EN-US>) had their maximum size incorrectly limited to the size of a
program memory page.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Malformed hex constants (XC8-1393)</span></b><span
lang=EN-US> </span><span lang=IT style='mso-ansi-language:IT'>Non-zero </span><span
lang=EN-US>digits</span><span lang=IT style='mso-ansi-language:IT'> preceding</span><span
lang=EN-US> the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>x</span></span></span><span lang=EN-US>
character in what was intended to be a hexadecimal integer constant (e.g. </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>1xFF</span></span></span><span
lang=EN-US>) might have been incorrectly accepted by the compiler. This issue
will be corrected when building with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Fixup error with __IT_INT_MASK
(XC8-1382)</span></b><span lang=EN-US> </span><span lang=IT style='mso-ansi-language:
IT'>On rare occasions</span><span lang=EN-US>, PIC18 projects building with the
REALICE debugger enabled, might have experienced fixup errors for the symbol </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__IT_INT_MASK</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't generate code with offsetof
macro (XC8-1374)</span></b><span lang=EN-US> Mid-range projects might have
produced can't generate code errors when using the offsetof macro.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undetected redefinitions
(XC8-1373)</span></b><span lang=EN-US> In some instances, multiple definitions
of the same local variable (which is not permitted by the C standard) was not
detected by the parser. This issue will be corrected when building with the C99
standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash when processing assembly
source (XC8-1342)</span></b><span lang=EN-US> If an assembly module contained
an empty psect that was positioned via an </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ORG</span></span></span><span
lang=EN-US> directive, the driver might have</span><span lang=NL
style='mso-ansi-language:NL'> crash</span><span lang=EN-US>ed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code generator crash (XC8-1338)</span></b><span
lang=EN-US> In</span><span lang=PT style='mso-ansi-language:PT'> PIC18 </span><span
lang=EN-US>projects, initialization of arrays of structures containing array
members using</span><span lang=ES-TRAD style='mso-ansi-language:ES-TRAD'>
complex macros, </span><span lang=EN-US>might have caused the code generator to
crash. This issue will be corrected when building with the C99 standard and the
Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Invalid array dimensions (XC8-1336)</span></b><span
lang=EN-US> The compiler might not have issued an error when the dimension of
an array was a constant expression with a negative value (e.g. </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>0 ? 1
: -1</span></span></span><span lang=EN-US>). This issue will be corrected when
building with the C99 standard and the Clang front end.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unhelpful error (XC8-1325)</span></b><span
lang=EN-US> An error message resulting from an unterminated </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#if[n][def]</span></span></span><span
lang=EN-US> block might not have mentioned the name of the file in which the
error was present.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>BASEM undefined with printf
(XC8-1296)</span></b><span lang=EN-US> Using the (</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>s</span></span></span><span
lang=EN-US>)</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>printf</span></span></span><span lang=FR
style='mso-ansi-language:FR'> format specifiers </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>%#08lx</span></span></span><span
lang=EN-US> might have</span><span lang=PT style='mso-ansi-language:PT'> result</span><span
lang=EN-US>ed in an error for the undefined symbol </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>BASEM</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Error with enumeration value
(XC8-1284)</span></b><span lang=EN-US> Setting an enumeration value to be the
size of a structure (using the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>sizeof</span></span></span><span
lang=EN-US> operator) might have generated an</span><span lang=PT
style='mso-ansi-language:PT'> error.</span><span lang=EN-US> This issue will be
corrected when building with the C99 standard and the Clang front end.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.12.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.45</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Bad initialization of
linear-memory objects (XC8-1601)</span></b><span lang=EN-US> For enhanced
mid-range projects that define multiple large objects that have been allocated
to the linear address space, the initialization or clearing of those objects
might not have been accurate.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Device information tables
incorrect (XC8-1597)</span></b><span lang=EN-US> Macros in the device-specific
headers that defined the address of entries in the &quot;Device Information
Area&quot; and &quot;Device Configuration Information&quot; tables were incorrect.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad access to members after a
pointer (XC8-1559)</span></b><span lang=EN-US> In projects built for enhanced
mid-range devices, where a pointer was a structure member and that structure
was located in and accessed via linear memory, access of the members following
the pointer might not have worked as expected. This problem was only occur for
some pointers, most likely pointers that only referenced a small number of data
objects.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.13.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.44</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Missing bank selection (XC8-1573)</span></b><span
lang=EN-US> In PIC18-targeted projects that used an expression involving a
2-byte value in one bank added to a 3-byte pointer in a different bank, the
bank of the destination might not have been correct selected and the upper-byte
of the result was written to the wrong bank.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash on prototyping error
(XC8-1572)</span></b><span lang=EN-US> Non-conforming programs that should have
ordinarily emitted error (277) (relating to function prototyping), were instead
causing the compiler parser to crash.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning on large Hexmate arguments
(XC8-1426)</span></b><span lang=EN-US> Hexmate can now warn you if an argument
read in via its options is too large. Previous, the option value might have
been mis-read and led to unexpected results.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect fill (XC8-1423)</span></b><span
lang=EN-US> Using Hexmate to fill unused locations with a four-byte fill value
did not work as expected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined symbol in reentrant mode
(XC8-1337)</span></b><span lang=EN-US> For PIC18 projects compiled using a
reentrant model, the assignment of a 2-byte object to a 3-byte pointer might
have resulted in a &quot;plusw1&quot; (or similar) undefined symbol error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong char specification macros
(XC8-1322)</span></b><span lang=EN-US> The macros in </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;limits.h&gt;</span></span></span><span
lang=EN-US> relating to the sizes of </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>char</span></span></span><span
lang=EN-US> types were defined as if a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>char</span></span></span><span
lang=EN-US> was signed. The </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>char</span></span></span><span
lang=EN-US> types are unsigned and the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>CHAR_MAX</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>CHAR_MIN</span></span></span><span
lang=EN-US> macros have been updated with the correct values.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong memory sizes displayed
(XC8-1313)</span></b><span lang=EN-US> The size of the memory spaces reported
in the compiler</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s memory summary did not reflect the use of </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ROM</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--RAM</span></span></span><span
lang=EN-US> when these options used arguments that subtracted from the default
memory (e.g. </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--rom=default,-0-3ff</span></span></span><span
lang=EN-US>).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing read macro (XC8-1309)</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_READ_OSCCAL_DATA()</span></span></span><span
lang=EN-US> macro was not defined for those devices that used a oscillator
calibration constant.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unruly unlock sequences (XC8E-101)</span></b><span
lang=EN-US> Source code which performed unlocking of peripherals, such as
EEPROM or PPLSOCK unlock sequences, were not output in strict accordance with
the device data sheet, resulting in the correct registers being written but not
with the correct timing. This occurred most commonly in Free mode. Optimization
of such sequences are no longer performed, and C source which performs the
sequence should work as expected.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.14.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.43</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Wrong ROM size for 18LF47K42
(XC8-1583)</span></b><span lang=EN-US> The compiler</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s chipinfo file indicated that there was less program memory present
than on the actual device. The available memory now matches the device data
sheet.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong ROM size for 16(L)F19185
(XC8-1580)</span></b><span lang=EN-US> The compiler</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s chipinfo file indicated that there was more program memory present
than on the actual device. The available memory now matches the device data
sheet.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Variation in locally optimized
code output (XC8-1575)</span></b><span lang=EN-US> Due to inconsistent
bank-selections or banked access in the generated code, the instruction
sequence could vary between builds that employed localized optimizations. The
instruction sequences were functionally correct, but not consistent with the
intent of localized optimizations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus pointer-conversion warnings
(XC8-1567)</span></b><span lang=EN-US> The compiler produced erroneous warnings
for pointer conversions that were entirely legal.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad flash macros (XC8-1566)</span></b><span
lang=EN-US> Some PIC18 devices (viz. K40s, K42s and Q10s) were missing flash
block write and erase sizes in the chipinfo file, resulting in flash macros
(e.g. </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_FLASH_WRITE_SIZE</span></span></span><span
lang=EN-US>) with bad values.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Syntax errors when copying
structures (XC8-1562)</span></b><span lang=EN-US> When compiling for enhanced
mid-range targets, the compiler generated code with assembly syntax errors for
statements that copied a source structure located in program memory and a
destination structure located on the software (reentrant) stack.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Linker errors from function
pointer use (XC8-1558)</span></b><span lang=EN-US> Projects for midrange and
especially baseline devices that used function pointers might have produced
can't find space messages resulting from the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>functab</span></span></span><span
lang=EN-US> psect being linked in a restrictive location. The linker now has
more freedom in placing this psect and is less likely to generate memory
errors.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad optimization around branches
(XC8-1557)</span></b><span lang=EN-US> In some rare instances the PIC18
assembly optimizer factored out instructions common to both execution paths of
a branch instruction even though these instructions affected the status flags
checked by this branch instruction. This is no longer performed if status is
affected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Registers clobbered by interrupts
(XC8-1555)</span></b><span lang=EN-US> PIC18 projects that used either the
hybrid or reentrant stack model and which contained code in interrupt functions
might not have correctly saved all the temporary registers used in the
interrupt routine, resulting in potential code failure in main-line code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus psect overlap message
(XC8-1545)</span></b><span lang=EN-US> When building projects that used
user-defined linker options to locate psects, there could have been psect
overlap error messages (596) produced by the linker when the requested
arrangement seemingly look valid.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Global variables not cleared
(XC8-1544)</span></b><span lang=EN-US> In very rare circumstances, the entry
point of the PIC18 runtime startup code was missing a bank selection
instruction, which resulted in initialization of the wrong bank of memory
before the main-line program was invoked. The conditions to trigger this
situation were that the objects to be cleared or initialized were in a bank
other than bank 0, this bank was the same as the bank that was selected when
generation of the remainder of the program concluded, and there were no other
variables to clear or initialize in the runtime startup code in any of the
lower banks.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect signed right shifts
(XC8-1543)</span></b><span lang=EN-US> The compiler produced incorrect code for
signed right shifts by 1 bit for </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>signed long</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>signed short long</span></span></span><span
lang=EN-US> variables. PIC18 projects were not affected by this issue.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bank selection error (XC8-1526)</span></b><span
lang=EN-US> Code following some 3-byte pointer assignments in PIC18 projects
might have been missing a bank selection instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compiler crash (XC8-1495)</span></b><span
lang=EN-US> The compiler might have crashed when building PIC18 projects that
defined a function that was never called but was referenced in hand-written
assembly code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Long free-mode build times
(XC8-1428, XC8-1525, XC8-1554)</span></b><span lang=EN-US> For PIC18 projects,
typically operating in Free mode, the assembler might have taken a inordinate
amount of time to build when the source code contained </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>while(1)</span></span></span><span
lang=EN-US> loops at the end of other loop constructs.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.15.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.42</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Missing PIC18 instruction from
assembler (XC8-1550)</span></b><span lang=EN-US> The PIC18 assembler used a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>bnv</span></span></span><span
lang=EN-US> instruction instead of </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>bnov</span></span></span><span
lang=EN-US>, as documented in the device data sheet. Both instruction mnemonics
are now accepted.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong coverity layout (XC8-1546)</span></b><span
lang=EN-US> The coverity files supplied with the compiler were in the wrong
directory layout.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing local optimizations
(XC8-1540)</span></b><span lang=EN-US> When local optimizations were selected,
these optimizations were not applied to functions that specified a return type
of pointer to function.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Sloppy detection of conflicting
function types (XC8-1538)</span></b><span lang=EN-US> The compiler did not
detect conflicts between a function declaration and function definition when
the definition was in a separate module and there was a difference in the
return type specified.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong bank selection after bit
operations (XC8-1532)</span></b><span lang=EN-US> In PIC18 projects, the code
following an </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>|= </span></span></span><span lang=EN-US>or
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>&amp;=</span></span></span><span lang=EN-US> operation that used bit
operands (including single bit bit-fields) might have accessed an operand in
the wrong bank, resulting in code failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect initialization of
linear-accessed objects (XC8-1529)</span></b><span lang=EN-US> Enhanced
midrange projects that defined several initialized objects that were large
enough to be accessed via linear memory might have initialized the objects with
incorrect values.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect floating-point
characteristics (XC8-1528)</span></b><span lang=FR style='mso-ansi-language:
FR'> Macros in </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&lt;float.h&gt;</span></span></span><span
lang=EN-US>, which describe the floating-point characteristics (e.g. </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>FLT_EPSILON</span></span></span><span
lang=EN-US>), were incorrect when the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>float</span></span></span><span
lang=EN-US> type was set to 32-bits. See also </span><span class=Hyperlink0><span
lang=EN-US style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#ExternalObjectWarning"><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>Migration
Issues</span></span></a></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Better handling of external
objects (XC8-1521)</span></b><span lang=EN-US> The compiler was not using bank
specifiers in declarations for externally-defined objects to determine the
required bank when accessing these external objects. See also </span><span
class=Hyperlink0><span lang=EN-US style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><a href="#ExternalObjectWarning"><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>Migration Issues</span></span></a></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong bank selection after
large-object access (XC8-1520)</span></b><span lang=EN-US> In PIC18 projects,
code following that which accessed large, multi-bank objects, might have been
missing bank selection instructions if the bank selected before accessing the
multi-bank object was the same as that required after accessing the multi-bank
object.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus overflow warning (XC8-1519)</span></b><span
lang=EN-US> Expressions which involved subtraction of the result of the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sizeof()</span></span></span><span
lang=EN-US> operator might have produced an arithmetic overflow warning when
this was not expected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect memory layout for
enhanced midrange devices (XC8-1518)</span></b><span lang=EN-US> There were
errors in description of banked and common memory for some enhanced midrange
devices that might have triggered unexpected memory-related errors or warnings.
The following devices and their LF counterparts in the PIC16F191<em><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xx</span></span></em> range, where <em><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>xx</span></span></em> is 55, 56, 75, 76,
85, 86, 95, 96 and 97, were affected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Overzealous assembler optimizer
(XC8-1511)</span></b><span lang=EN-US> When optimizing a code involving a
bit-skip over a GOTO and subsequent conditional code, the PIC18 assembler
optimizer might have incorrectly removed an instruction (such as MOVLW, BSF,
BCF, MOVWF or CLRF) in addition to the GOTO instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Disregard of regsused pragma
(XC8-1503)</span></b><span lang=EN-US> The compiler would not honor the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#pragma
regsused</span></span></span><span lang=EN-US> directive when used without a
list of registers. The compiler subsequently assumed that the specified
function would use all device registers rather than none.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Pointer believed to be unitialized
(XC8-1492)</span></b><span lang=EN-US> When assigning to pointers inside
structures that are themselves within other structures, the pointer target
information was occasionally not propagating to the destination of the
assignment. In such situations, the compiler assumed that the destination
pointer was NULL and dereferencing this pointer would have produced the
incorrect result.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Driver not handling off-chip code
offsets (XC8-1481)</span></b><span lang=EN-US> The compiler was not able to
correctly handle situations where a code offset higher than the top of internal
(on-chip) memory had been specified, as is possible for PIC18 devices with the
external memory interface.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warnings in library code
(XC8-1476)</span></b><span lang=EN-US> Building projects that contained
interrupt functions that called standard library routines might have produced
inappropriate warning messages, such as warning 1496, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>arithmetic
on pointer to void yields Undefined Behavior</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unable to find space for const
objects (XC8-1469)</span></b><span lang=EN-US> For an enhanced midrange
devices, all constants were grouped into a single psect, which potentially
could have grown to exceed the size of the largest contiguous block of free
space. Const objects are now allocated to individual psects so that they can
more easily be allocated memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Pointer truncated (XC8-1449)</span></b><span
lang=EN-US> For enhanced mid-range devices, in some circumstances pointers that
are members of structures and that point to objects located in bank1 or higher
addresses might have incorrectly been dereferenced.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></b><b><span
lang=IT style='mso-ansi-language:IT'>t generate code error (XC8-1448)</span></b><span
lang=EN-US> In rare instances, a function that returned a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>void</span></span></span><span
lang=EN-US> pointer in memory shared by one of that function</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s parameter variables might have
triggered a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>looping around allocGlobals()</span></span></span><span
lang=PT style='mso-ansi-language:PT'> error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus errors regarding function
type checks (XC8-1446)</span></b><span lang=EN-US> Where a pointer to an
incomplete structure type was referenced in a function declaration, the
compiler incorrectly reported that the function declaration conflicted with the
function's definition.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Huge objects not properly initialized
(XC8-1445)</span></b><span lang=EN-US> In PIC18 projects, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> arrays that were defined with more than 32768 elements and that
were required to be assigned zero at startup were not properly cleared.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Truncated pointers to void
(XC8-1443)</span></b><span lang=EN-US> For PIC18 projects that made use of
pointers to void and function pointers, the pointers to void might have been
made smaller than required and were therefore unable to correct dereference
some objects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect error message (XC8-1440)</span></b><span
lang=EN-US> If an attempt to initialize an absolute eeprom-qualified object was
made, the error message for this illegal operation incorrectly referred to RAM
instead of EEPROM.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code generator hangs processing
loops (XC8-1433)</span></b><span lang=EN-US> Some projects that continued more
than one non-nested infinite loop might have caused the code generator to hang.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect function return value
(XC8-1416)</span></b><span lang=EN-US> For projects targeting any device,
excluding PIC18 devices, and in rare situations where a function returned one
of its parameters and the memory allocated to that parameter and the return
value partially overlapped, the return value of that function might have been
invalid.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Corruption when copying zero bytes
(XC8-1409)</span></b><span lang=EN-US> Projects targeting enhanced midrange
devices and that used the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>memcpy()</span></span></span><span
lang=EN-US> library function might have experienced data being corrupted when a
zero size was passed to this function.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect results for expressions
with indirect-access (XC8-1408, XC8-1487)</span></b><span lang=EN-US>
Expressions in PIC18 projects that involved an operand that indirectly accessed
RAM objects, e.g. array access, and that also involved a constant operand might
have produced incorrect results due to corruption of the WREG by the code that
loaded the FSR register.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong bit values shown in the
MPLAB X IDE (XC8-1312, XC8-1418)</span></b><span lang=EN-US> Absolute-addressed
bit variables might not have been accurately displayed in the MPLAB X IDE
debugger. This affected SFRs as well as user-defined bits.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Memory error when using absolute
variables (XC8-1301)</span></b><span lang=EN-US> In rare cases, the compiler
might not have been able to allocate space for RAM-based variables in projects that
also defined absolute variables, even when there appeared to be adequate memory
for all objects.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.16.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.41</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Missing errata workarounds
(XC8-1512)</span></b><span lang=EN-US> The default errata workarounds applied
for the PIC18LF6585/6680/8585/8680 devices, did not agree with their PIC18F
counterparts. The DAW and FETCH workarounds might not have been applied for
these devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Improved internal sorting of
symbols (XC8-1494)</span></b><span lang=EN-US> Part of the compiler</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s internal sorting of symbols was
dependent on a variable</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s name. Recompiling source code where the only change was the names
of variables might have resulted in those variables being allocated to
different memory locations and hence a variation in the final output file. This
reliance has been removed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad pointer comparisons (XC8-1414)</span></b><span
lang=PT style='mso-ansi-language:PT'> A Can</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code error might have been issued for mid-range device
projects that compared two pointers referencing RAM objects.</span></p>

<p class=FreeForm style='margin-top:0cm;margin-right:0cm;margin-bottom:10.0pt;
margin-left:28.3pt;text-indent:-1.0cm;tab-stops:28.0pt 56.0pt 84.0pt 112.0pt 140.0pt 168.0pt 196.0pt 224.0pt 252.0pt 280.0pt 308.0pt 336.0pt'><b><span
lang=EN-US style='font-family:"Times Roman";mso-ansi-language:EN-US'>Incorrect
access of pointer parameters (XC8-1411)</span></b><span lang=EN-US
style='font-family:"Times Roman";mso-ansi-language:EN-US'> In rare
circumstances when building PIC18 projects, the compiler incorrectly
interpreted the location of function parameters that were pointer objects, and
it produced code which accessed the pointer in the wrong bank.</span><span
style='font-family:"Times Roman";mso-fareast-font-family:"Times Roman";
mso-bidi-font-family:"Times Roman"'><o:p></o:p></span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.17.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.40</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Bogus error with interrupts in CCI
mode (XC8-1435)</span></b><span lang=EN-US> For PIC18 projects built in CCI
mode and that contained a low- and high-priority interrupt function defined
using the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__interrupt()</span></span></span><span
lang=EN-US> specifier, the compiler erroneously reported that there were
multiple interrupt functions defined at interrupt-level 2.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.18.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.38</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t generate code errors using hybrid stack model (XC8-1431)</span></b><span
lang=EN-US> For PIC18 projects using the hybrid stack model, can</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>t generate code messages might have
been produced for functions using the compiled stack that had a function
pointer parameter and that pointer had function targets which were compiled
using the reentrant model.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect pointer content shown in
MPLAB X IDE (XC8-1415)</span></b><span lang=EN-US> For projects that targeted
non-PIC18 devices and that defined a 1-byte-wide pointer that included NULL as
one of its targets, the MPLAB X IDE debugger might not have shown its contents
correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect indirect addition
(XC8-1402)</span></b><span lang=EN-US> Enhanced mid-range projects that
performed a 16-bit addition of two dereferenced pointer values might have seen
corruption of an SFR register resulting in an incorrect result.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Registers unavailable error when
accessing SFRs (XC8-1391)</span></b><span lang=EN-US> In some circumstances for
projects using a PIC18 device that is affected by the BSR15 errata and that
have SFRs in bank15, accessing these SFRs might have resulted in a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>(1466)
registers unavailable for code generation</span></span></span><span lang=PT
style='mso-ansi-language:PT'> error.</span></p>

<p class=DescriptiveList><b><span lang=IT style='mso-ansi-language:IT'>Assembler
hang (XC8-1390, XC8-1396)</span></b><span lang=EN-US> In some circumstances for
PIC18 projects when the compiler is operating in Free mode with assembler
optimizations enabled, the assembler might have hung.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Faster Hexmate (XC8-1385)</span></b><span
lang=EN-US> The time required to merge HEX files using the Hexmate utility has
been significantly reduced.</span></p>

<p class=DescriptiveList><b><span lang=NL style='mso-ansi-language:NL'>Section
intcode overlap (XC8-1381)</span></b><span lang=EN-US> Projects compiled using
PIC18 devices affected by the FETCH or 4000 errata, and which defined both low-
and high-priority interrupt functions, might have produced the compiler message
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>(596) segment &quot;intcode&quot; overlaps segment
&quot;intcodelo&quot;</span></span></span><span lang=EN-US>. This was due to a
miscalculation in the size of the psect which contained the high-priority
interrupt code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Speedy multiplication failure
(XC8-1372)</span></b><span lang=EN-US> For PIC18 projects which have speed
optimizations enabled, an incorrect bank selection might have produced a 16-bit
multiplication error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Upper pointer byte corruption
(XC8-1369)</span></b><span lang=EN-US> In rare circumstances in projects
targeting PIC18 devices in which there is a function that returns a 24-bit
pointer, the upper byte of this pointer might be corrupted.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect variable startup clearing
(XC8-1320)</span></b><span lang=EN-US> In rare circumstances for mid-range and
baseline projects that had an object located immediately before the compiler
temporary variables and this object had to be zeroed by the runtime startup
code, and the runtime startup code had to perform other variable
initialization, the zeroed object might have been corrupted.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.19.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.37</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Reentrant specifier ignored
(XC8-1379)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__reentran</span></span></span><span
lang=EN-US>t function specifier might have been ignored and subsequently the
function may not have been made reentrant. A warning would have been issued if
this situation was encountered.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Local object overlap with
invariant functions (XC8-1376)</span></b><span lang=EN-US> For PIC18 projects
using stable-object (invariant) functions, there might have been an overlap in
local objects between main-line and interrupt code resulting in data
corruption.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect bank selected for
external bits (XC8-1375)</span></b><span lang=EN-US> In some circumstances the
compiler generated incorrect bank-selection code, when accessing external bit
variables located in the banked memory of PIC10/12/16 parts. This only affected
bit variables defined outside C code, the most notable examples being the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__powerdown</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__timeout</span></span></span><span
lang=EN-US> bits used to identify causes for reset.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Parameter corruption (XC8-1362)</span></b><span
lang=EN-US> For extremely complex expressions involving function calls<span
style='mso-spacerun:yes'>  </span>(including implicitly called library
routines) a call to one function might have corrupted an already loaded
parameter for another function.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning with offsetof macro
(XC8E-88)</span></b><span lang=EN-US> Use of the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;stddef.h&gt;</span></span></span><span
lang=FR style='mso-ansi-language:FR'> macro </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>offsetof</span></span></span><span
lang=EN-US> might have resulted in the compiler emitting an unnecessary warning
regarding arithmetic overflow.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.20.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.36</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Variables incorrectly shown as
program memory objects in the IDE (XC8-1370)</span></b><span lang=EN-US> Some
absolute, non-</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> variables were being shown as program memory objects in the MPLAB X
IDE watch window. These will now correctly appear as data memory objects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Const parameters incorrectly
accessed (XC8-1365)</span></b><span lang=EN-US> For PIC18 projects, functions
that had parameters specified with </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> might not have been accessed correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong bank selection when right
shifting by four (XC8-1364)</span></b><span lang=EN-US> For Baseline and
mid-range devices, an incorrect result might have been obtained for expressions
that shifted a 16-bit-sized object right by 4 bits and assigned the result to
an object that was located in a different bank.</span></p>

<p class=DescriptiveList><b><span lang=NL style='mso-ansi-language:NL'>Code
generator crash (XC8-1363)</span></b><span lang=EN-US> In some rare situations
involving the intensive use of function pointers, XC8 might have crashed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Access to const array incorrect in
stable-object mode (XC8-1361)</span></b><span lang=EN-US> In some circumstances
for PIC18 project when stable-object mode (formerly called invariant mode) is
used, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> objects may not have been accessed correctly via a pointer.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unavailable global variables
(XC8-1359)</span></b><span lang=EN-US> In projects where functions have been
inlined by the compiler, some variables unrelated to those functions might
appear as &quot;Unavailable&quot; in the MPLAB X watch window.</span></p>

<p class=DescriptiveList><b><span lang=NL style='mso-ansi-language:NL'>Code
generator crash (XC8-1357)</span></b><span lang=EN-US> Certain questionable
code sequences were causing the code generator to crash. An internal error
message is now issue instead.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Output changes with each build
(XC8-1345)</span></b><span lang=EN-US> Code that uses structures with pointer
members has, on rare occasions, resulted in some pointer target lists that vary
with each build. This manifested itself in build sizes that varied with each
build when using identical source code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unsigned macOS installer
(XC8-1343, XC8E-79)</span></b><span lang=EN-US> The MPLAB XC8 installers for
macOS were not code signed, requiring the macOS security level to be lowered to
allow installation of the compiler. All macOS installers are now signed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect pointer assignment
(XC8-1341)</span></b><span lang=EN-US> In some situations with PIC18 projects,
the upper byte of a 2-byte pointer might have been incorrect assigned.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>The hanging of Cromwell (XC8-1339)</span></b><span
lang=EN-US> In some situations, possibly when using user-created libraries, the
cromwell application might have hung if it was unable to resolve relative file
names.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Apparent reset when using inline
functions (XC8-1335)</span></b><span lang=EN-US> In some instances where a
function using the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> specifier were not inlined, the function was incorrectly being
removed. This resulted in a call to address 0x0, which would have appeared like
a software reset.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect bit-field assignment
(XC8-1334)</span></b><span lang=EN-US> For some mid-range and baseline
projects, assignments to a 1-bit wide bit-field variable of an integer might
have stored an incorrect value in the bit-field.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Corrupted page-selection bits on
entry to interrupt (XC8-1333)</span></b><span lang=EN-US> This issue affected
enhanced baseline devices with interrupts. The page-selection bits in the
interrupt's STATUS register might have been in an unknown state upon entry. Any
code that relied on these bits might have been adversely affected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Illegal directive warning
(XC8-1329)</span></b><span lang=EN-US> The C preprocessor was emitting a
warning when it encountered an unrecognized preprocessor directive that was
excluded from compilation by an outer preprocessor conditional directive.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Errors when using EEPROM features
(XC8-1324)</span></b><span lang=EN-US> The compiler did not support EEPROM access
for those devices which used the NVMREG register interface. This has been added
a new feature in this release, see </span><span class=Hyperlink0><span
lang=EN-US style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#NewEepromAccess"><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>New
Features</span></span></a></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Local variables marked as </span></b><span
dir=RTL></span><b><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>‘</span><span lang=EN-US>out of scope</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’ </span><span
dir=LTR></span><span lang=EN-US><span dir=LTR></span>(XC8-1323)</span></b><span
lang=EN-US> On some rare occasions, some local variables would appear as </span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>‘</span><span lang=EN-US>out of scope</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’ </span><span
lang=EN-US>in the MPLAB X IDE watch window.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrongly formatted Messages from
OBJTOHEX (XC8-1317)</span></b><span lang=EN-US> The compiler utility OBJTOHEX
did not format its messages according to that specified by the driver options </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--errformat</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--warnformat</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--msgformat</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No error for multiple interrupt
functions (XC8-1316)</span></b><span lang=EN-US> The compiler was not detecting
multiple instances of an interrupt function at the same interrupt priority.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus NOPs placed after labels in
data space (XC8-1315)</span></b><span lang=EN-US> Compiling code for PIC18
devices that are affected by an errata workaround that require NOPs to be
inserted after labels might have had NOPs added after labels in some data space
psects. This might have triggered a message </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>(944)
data conflict at address...</span></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad indirect bit-field access
(XC8-1314) </span></b><span lang=EN-US>The wrong bank might have been selected
when indirectly accessing a 1-bit wide bit-field in a structure and
converting/assigning to a byte sized object in PIC18 projects. This issue was
likely to only occur where the structure involved was greater than 128 bytes in
size.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad copy of large structures
(XC8-1311)</span></b><span lang=EN-US> The code generated to copy structures
greater than 128 bytes in size might have corrupted data memory and not
correctly copied the upper structure members.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembler hangs with trivial ISR
(XC8-1308)</span></b><span lang=EN-US> PIC18 projects that defined an interrupt
function that contained only an infinite loop might have caused the assembler
to hang when optimizing this code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Misleading data usage in the MPLAB
X IDE (XC8-1305)</span></b><span lang=EN-US> Programs that used the software
stack may have shown an unusually large data usage in MPLAB X IDE that did not
match the data usage reported by the compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect allocation of local
objects (XC8-1304)</span></b><span lang=EN-US> For projects using the compiled
stack for auto objects and where function duplication was prevented using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#pragma
interrupt_level</span></span></span><span lang=EN-US>, stack allocations of
that non-duplicated function might have overlapped with that of other functions
in the main-line call-graph.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No warning given for invalid
floating-point specification (XC8-1302)</span></b><span lang=EN-US> The
compiler was mistakenly permitting the floating-point suffix, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>f</span></span></span><span
lang=EN-US>, to be applied to decimal integer literal constants.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Fletcher 8 checksums (XC8-1297)</span></b><span
lang=EN-US> Projects that used publicly-available or written-in-house
algorithms to perform the Fletcher 8 checksum algorithm (8-bit calculation;
16-bit result) might have seen that the checksum generated by their code did
not match that produced by Hexmate due to an overflow issue. The algorithm
implemented by Hexmate has been updated and its result confirmed to match that
produced b the code now published in the MPLAB XC8 User's Guide. If you do
require the old value produced by Hexmate for legacy projects that are being
recompiled with no code changes, use algorithm #9.</span></p>

<p class=DescriptiveList><b><span lang=NL style='mso-ansi-language:NL'>Parser
crash (XC8-1283)</span></b><span lang=EN-US> In certain circumstances for
extraordinary long C source lines, the compiler was crashing instead of exiting
gracefully.</span></p>

<p class=DescriptiveList><b><span lang=NL style='mso-ansi-language:NL'>Code
generator crash (XC8-1275)</span></b><span lang=EN-US> In rare circumstances,
projects that used the compiled stack and defined a function called only
indirectly from both main-line and interrupt code might have crashed the code
generator.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No warning given for redundant
pointer access (XC8-1274)</span></b><span lang=EN-US> The compiler was not
given any notification that some expressions involving pointers with no targets
were being optimized away by the compiler. Unassigned pointers might now
trigger messages 1498, 759 or 760.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing logical operation
(XC8-1271)</span></b><span lang=EN-US> For PIC18 projects that contain
expressions involving a right shift by 8 bits and a logical OR with a constant,
the resulting expression might have erroneously been optimized away. This only
affect projects compiled in PRO mode.</span></p>

<p class=DescriptiveList><b><span lang=IT style='mso-ansi-language:IT'>CMF
error (XC8-1257)</span></b><span lang=EN-US> Some programs that have multiple
user defined psects of the same name may produce the error </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>(1437)
CMF error: segment (text) already defined</span></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Too much warning (XC8-1231)</span></b><span
lang=EN-US> In some circumstances, message </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>(1467)
read-only target may be indirectly written via pointe</span></span></span><span
lang=EN-US>r was displayed excessively.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.21.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.35</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>MPLAB X IDE update</span></b><span
lang=EN-US> If you encounter the MPLAB X IDE error<span
style='mso-spacerun:yes'>  </span></span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>The program file could not be
loaded</span></span></span><span lang=EN-US><span style='mso-spacerun:yes'> 
</span>for projects that use the compiler</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s (default) ELF output, please update your IDE to at least version,
2.30. There was an issue in the ELF loader that triggered this error and
prevented<span style='mso-spacerun:yes'>  </span>projects from being debugged,
but which has been resolved. If you cannot update the IDE, switch your project
settings to COFF output.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Limited comment lines in listing
file (XC8-1294)</span></b><span lang=EN-US> The assemblers were limiting the
number of lines of comments in the assembly listing files to around 5000 lines.
All subsequent comments were not output.<span style='mso-spacerun:yes'> 
</span>This issue did not affect the generated code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash with invariant functions
(XC8-1285)</span></b><span lang=EN-US> For enhanced mid-range projects that
contained at least one function qualified as </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>invariant</span></span></span><span
lang=EN-US>, expressions involving a comparison with a pointer that had never
been assigned a value might have cause the code generator to crash.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Non-functioning error format
option (XC8-1282)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-E</span></span></span><span
lang=EN-US> option, when used without specifying a filename, was not toggling
the compiler warning and error message formats to the machine-readable form.
This issue did not affect use of this option when a filename was specified.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect data sizes in PIC18
memory summary (XC8-1277)</span></b><span lang=EN-US> The total number of data
bytes shown by the memory summary was higher than the size used by the program.
This affected only PIC18 projects and might have resulted in a summary showing
more than 100% utilization of the available data space.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Conditional assembly directives
(XC8-1266)</span></b><span lang=EN-US> The PIC18 assembler would have produced
an error if the assembler optimizers were enabled and the ELSIF directive was
used in inline assembly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code message initializing multi-dimensional array (XC8-1265)</span></b><span
lang=EN-US> Code for baseline and mid-range projects that defined
multi-dimensional </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>auto</span></span></span><span
lang=EN-US> arrays might have triggered a can't generate code error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect assignment of constant
to bit-field (XC8-1259)</span></b><span lang=EN-US> When assigning a constant
to a multi-bit structure bitfield in a PIC18 project, the value might have been
assigned to an address in the wrong data bank.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Using ternary operator with
bit-fields (XC8-1258)</span></b><span lang=EN-US> PIC18 projects using the
ternary operator (</span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>?:</span></span></span><span lang=EN-US>)
whose condition expression tested a single-bit bit-field and whose result was
assigned to a different bit within the same structure might have giving an
incorrect result, e.g. </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>bits.out = bits.in ? 0 : 1;</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Alert system configuration not
working (XC8-1256)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ERRORS</span></span></span><span
lang=EN-US> driver option, which limits the maximum number of errors per
application, and the use of environment variables that specify the message
formats, were not working correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect bank selection in
functions passed a byte (XC8-1255)</span></b><span lang=EN-US> If the first
instruction generated from the first statement in a function was a MOVFF
instruction, and that function</span><span dir=RTL></span><span lang=AR-SA
dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s first parameter was a byte that was stored in WREG, the compiler
output following the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>MOVFF</span></span></span><span
lang=EN-US> instruction might have been produced based on incorrect knowledge
of the currently set bank. This might have caused code failure in the code
following the MOVFF instruction in that function or in the code following a
call to that function.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>CPP crash, primarily under Windows
7 (XC8-1253)</span></b><span lang=EN-US> In rare and specific circumstances,
the preprocessor (CPP) might have crashed. This was only been reported under
some variants of Windows 7.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t generate code error calling external reentrant functions
(XC8-1251)</span></b><span lang=EN-US> C code calls to external (hand-written assembly)
functions that are declared as reentrant would have triggered a Can't Generate
Code message in PIC18 projects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined symbol error (XC8-1249)</span></b><span
lang=EN-US> In rare circumstances the PIC18 assembler optimizer might have
incorrectly removed some code labels. This might have resulted in an undefined
symbol error from the linker.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Phase error (XC8-1248)</span></b><span
lang=EN-US> A phase error might have been produced if the assembler optimizers
were enabled and a psect contained so much hand-written assembly or special
instructions (like </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>N<span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>OP</span></span></span></span><span
lang=EN-US> etc.) as to fill a program memory page on the device. A more
accurate Can</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t find space message is now issued in such (rare) circumstances.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing register definitions
(XC8-1239)</span></b><span lang=EN-US> Declarations for the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PLUSW</span></span></span><span
class=Code><i><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></i></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>PREINC</span></span></span><span
class=Code><i><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></i></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>POSTINC</span></span></span><span
class=Code><i><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></i></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>POSTDEC</span></span></span><span
class=Code><i><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></i></span><span
lang=EN-US> SFRs were missing from the device-specific header files for
PIC18FxxJ9x parts. Attempts to use these symbols in hand-written assembly code
would have resulted in an undefined symbol error. The missing definitions would
not have affected code produced by the compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inability to set breakpoint on
first statement (XC8-1232)</span></b><span lang=EN-US> In some situations it
was not possible to set a breakpoint on the first executable statement inside </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>main()</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Fixup error access bits (XC8-1230)</span></b><span
lang=EN-US> In some midrange PIC projects, comparison of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>bit</span></span></span><span
lang=EN-US> objects may have resulted in a fixup error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Right shift clobbering operand
(XC8-1224)</span></b><span lang=EN-US> Code in PIC18 projects that right
shifted the value held by a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>signed char</span></span></span><span
lang=EN-US> variable by 2 or 3 bit positions might have clobbered the variable
operand.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No .dep file produced (XC8-1220)</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--SCANDEP</span></span></span><span
lang=EN-US> option was not producing a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.dep</span></span></span><span
lang=EN-US> file in addition to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>.d</span></span></span><span
lang=EN-US> dependency file. The </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>.dep</span></span></span><span
lang=EN-US> file contains both user and system header file information (unlike
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>.d</span></span></span><span lang=EN-US>
file, which contains only user header file information).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Long subtraction bank selection
issue (XC8-1219)</span></b><span lang=EN-US> Code that performed a long
subtraction and assigned the result to a temporary variable might have failed
if the bank of the left subtraction operand was in the same bank as the
temporary result location, and the bank of the right subtraction operand was in
a different bank. This only affected non-enhanced mid-range PIC devices
operating in PRO mode.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus pointer target message
(XC8-1192)</span></b><span lang=EN-US> For those PIC devices which allow </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>eeprom</span></span></span><span
lang=EN-US>-qualified variables, a bogus error might have been issued if
assigning both </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>eeprom</span></span></span><span
lang=EN-US>-qualified structure members and non-</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>eprom</span></span></span><span
lang=EN-US>-qualified structure members to an object.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>(U)INT64 type defined but not
supported (XC8-1189)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>GenericTypeDefs.h</span></span></span><span
lang=EN-US> header allowed objects to be defined with the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>INT64</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>UINT64</span></span></span><span
lang=EN-US> types. These types defaulted to a 32-bit C type, which was
misleading. These types are no longer defined by the header.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Failure to break after inline
delay (XC8-1186)</span></b><span lang=EN-US> Attempts to break at, step over,
or run to the source line immediately following an inline delay built-in
function (e.g. </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__delay_ms()</span></span></span><span
lang=EN-US>) might have failed. This is a silicon issue which affects the
ability of some devices to stop execution at a hardware breakpoint that is
placed immediately following a branch instruction that branches to that breakpoint
location. Such an instruction was sometimes used by the compiler</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s inline delays. The compiler will no
longer use this instruction in delays when compiling for a device that is known
to exhibit this issue. This issue will affect any </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>BRA</span></span></span><span
lang=EN-US> instruction with the operand described. See also </span><span
class=Hyperlink0><span lang=EN-US style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><a href="#NewErrataWorkaround"><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>new errata workaround</span></span></a></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad Bit-field assignment
(XC8-1184)</span></b><span lang=EN-US> Code in PIC18 projects that performed an
assignment, assignment-OR, or assignment-AND of a one-bit-wide bitfield to another
one-bit-wide bitfield might have failed if the bit-fields were part of a
structure in an array.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t generator code error with const initialization (XC8-1171)</span></b><span
lang=EN-US> When trying to initialize a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US>-qualified object with a value expression that also contained a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US>-qualified object, a Can</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t generate code error message might have been issued.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Indirect calls from mainline and
interrupt code (XC8E-30, XC8-132)</span></b><span lang=EN-US> A function was
not able to be indirectly called from both main-line code and interrupt code
when compiling for PIC18 targets. This previous known issue has been corrected
and is now longer pertinent.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.22.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.34</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Code warnings with library code
(XC8-1227)</span></b><span lang=EN-US> With the warning level set to -3 or
lower, an </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>expression generates no code</span></span></span><span
lang=EN-US> warning might have been displayed for the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> (or other library) functions. These warnings are no longer emitted
for code that is part of a library function.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect structure addresses used
(XC8-1218)</span></b><span lang=EN-US> In baseline or midrange projects, code
that accessed a member of an absolute structure might have used an incorrect
address.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Interrupt routine may clobber temp
(XC8-1217)</span></b><span lang=EN-US> When compiling reentrant functions for
enhanced mid-range projects, the compiler was inadvertently setting a temporary
flag in memory that had not been allocated memory. This could have corrupted
other temporary variables. Use of this flag with the software stack was not
necessary and is no longer performed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong stack frame estimate
(XC8-1208)</span></b><span lang=EN-US> In some instances, particularly when
invariant optimization was turned on, the code generator did not detect if the
stack frame for a function was too large. This may have resulted in assembler
operand errors.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad call to subtype when disabling
libraries (XC8-1205)</span></b><span lang=EN-US> Using the compiler option to
disable C libraries resulted in the error </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>bad
call to subtype</span></span></span><span lang=EN-US>. The compiler requires
these libraries to be linked in at all times and the option to disable this
feature has been removed. See also </span><span class=Hyperlink0><span
lang=EN-US style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#Toc_MigrationIssues"><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>Migration
Issues</span></span></a></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad bank selection (XC8-1196)</span></b><span
lang=EN-US> Expressions involving indirect assignments and comparisons might
have evaluated incorrectly due to the wrong bank being accessed. This only
affected PIC18 devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Switch statement failure in lined
functions (XC8-1187)</span></b><span lang=EN-US> Functions which were
successfully inlined and which contained </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>switch()</span></span></span><span
lang=EN-US> statements might have failed. This would have affected only
mid-range devices and only when the chosen switch strategy (as indicated by the
assembler list file) was </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>direct_byte</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>jumptable</span></span></span><span
lang=EN-US>. Functions that contain </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>swit<span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>ch()</span></span></span></span><span
lang=EN-US> statements implemented with these strategies are no longer inlined.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Checksums not matching (XC8-1183)</span></b><span
lang=EN-US> When requesting a checksum for PIC18 projects, the checksum value
might not have agreed with runtime calculation of this value if there were
unused locations within the memory over which the checksum was calculated. The
option to fill unused memory is now automatically applied when using the
checksum option. This makes the checksum consistent with that calculated for
other devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inaccurate memory summary with
absolutes (XC8-1179)</span></b><span lang=EN-US> The memory summary of data
usage printed by the compiler was too large when there were absolute variables
that partially overlapped each other in memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Outside data space messages
(XC8-1177)</span></b><span lang=EN-US> In some circumstances PIC18 projects
using an SFR might have resulted in a warning that the SFR lay outside of
available data space.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Too many symbols error (XC8-1176)</span></b><span
lang=EN-US> The parser may have run out of space for symbols when compiling
complex modules. The number of symbols the parser can handle has been
increased.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Programming ELF file for
PIC18F6410 fails (XC8-1175)</span></b><span lang=EN-US> Programming a
PIC18F6410 might have failed when using the ELF/DWARF compiler output,
particularly when the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--runtime=+config</span></span></span><span
lang=EN-US> option was enabled.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t generate code error using memcpy (XC8-1173)</span></b><span
lang=EN-US> A can't generate code error message was sometimes emitted for calls
to </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>memcpy()</span></span></span><span lang=EN-US> when compiling for
enhanced mid-range devices.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Assembler
crash (XC8-1172)</span></b><span lang=EN-US> In some circumstances, the
PIC10/12/16 assembler could have crashed when processing a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>REPT</span></span></span><span
lang=EN-US> directive that contained a bit skip instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect address argument passed
to variadic function (XC8-1169)</span></b><span lang=EN-US> If there are more
than one variadic functions that each pass their argument list to the same
additional function and the argument list references pointers to objects in
different memory space, these pointers may be incorrectly passed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong %p printf output (XC8-1167)</span></b><span
lang=EN-US> When using the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>%p</span></span></span><span
lang=EN-US><span style='mso-spacerun:yes'>  </span></span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> placeholder to print an address and the address was 3-bytes wide,
the top byte of the address might not have been printed and subsequent </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> arguments misread and misprinted. This only affected projects
compiled for PIC18 targets.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Out of bounds message (XC8-1165)</span></b><span
lang=EN-US> Building PIC18 projects that used the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ROM</span></span></span><span
lang=EN-US> option together with the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--CODEOFFSET</span></span></span><span
lang=EN-US> option may have produced in an error stating that the ROM ranges
were out of bounds.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Driver crash with unusual file
name (XC8-1164)</span></b><span lang=EN-US> On Windows platforms the XC8 driver
might have crashed when an input file name had no extension.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incomplete support for _CLEAR_EEIF
macro (XC8-1163)</span></b><span lang=EN-US> Use of the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_CLEAR_EEIF()</span></span></span><span
lang=EN-US> macro for PIC18Fx7K90 devices resulted in compilation errors. This
macro now correctly supports these devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing bank selection with
absolute arrays (XC8-1162)</span></b><span lang=EN-US> When an array defined at
an absolute address is indexed with a variable that is also absolute, a bank
selection instruction might have been omitted, causing the wrong location to be
accessed. This only affected compilation for PIC18 targets.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect address initial value
(XC8-1161)</span></b><span lang=EN-US> For mid-range PICs, where the address of
a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>const</span></span></span><span lang=EN-US> object was required during
initialization of another object, the calculated address might have been
malformed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect compliment/subtraction
(XC8-1160)</span></b><span lang=EN-US> Expressions in PIC18 projects that
involved a complement, or possibly a subtraction (most often in Free mode),
might have produced incorrect results due to a badly-positioned, bank-selection
instruction following an INCFSx instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect relational comparison of
pointers with addresses (XC8-1158)</span></b><span lang=EN-US> Relational
comparison of some pointers with addresses might have failed for PIC18 targets
when the address had a different size to the pointer.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Inconsistent
preprocessor operations (XC8-1155)</span></b><span lang=EN-US> The results of
preprocessor right shift, division and modulus operations when the operands are
signed are implementation defined, but did not match the result of the
equivalent operations when performed by the code generator. Expressions in the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#if</span></span></span><span
lang=EN-US> preprocessor directive may have produced unexpected results. The
results from such preprocessor and code generator expressions now agree.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Functions called from interrupts
not inlined (XC8-1153)</span></b><span lang=EN-US> Functions defined with </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>i<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>nline</span></span></span></span><span lang=EN-US> and that were called
from an interrupt function might not have been inlined when this was possible.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Linker output in wrong directory
(XC8-1152)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>l.obj</span></span></span><span
lang=EN-US> temporary object file was always being placed in the current
working directory, and its location could not be changed by the compiler's </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--OUTDIR</span></span></span><span
lang=EN-US> option. It is now output in the same directory used by other
temporary files.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>memcpy copies incorrect number of
bytes (XC8-1151)</span></b><span lang=EN-US> For enhanced mid-range devices,
calls to the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>memcpy()</span></span></span><span
lang=EN-US> function that were encoded to use the inbuilt </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>memcpy</span></span></span><span
lang=EN-US> routine (speed optimizations enabled) may have failed to copy the
required number of bytes if the count argument was a variable rather than a
constant expression.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect memory savings report
(XC8-1150)</span></b><span lang=EN-US> When building for PIC18 devices in Free
Mode, the estimated savings of using PRO mode were sometimes calculated
incorrectly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad const object access when using
code offset (XC8-1149)</span></b><span lang=EN-US> The code produced for PIC18
projects using the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--codeoffset</span></span></span><span
lang=EN-US> option with an offset above 0xFFFF might have incorrectly accessed
any </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> objects defined in the project.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inaccurate delays (XC8-1148)</span></b><span
lang=EN-US> For older PIC18 devices that use the 4000 errata workaround, the
inbuilt </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_delay()</span></span></span><span
lang=EN-US> routines did not delay long enough.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Incorrect
long intialisation (XC8-1145)</span></b><span lang=EN-US> PIC18 projects built
in Free mode might not correctly initialize </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>long</span></span></span><span
lang=EN-US> objects if the initial value requires performing a 16-bit
multiplication. </span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad pointer comparison with NULL
(XC8-1144, XC8-1159, XC8-1170)</span></b><span lang=EN-US> In cases where a
pointer containing </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>NULL</span></span></span><span
lang=EN-US> was assigned to a larger-sized mixed-target pointer, the resulting
pointer might have had not compared equal to </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>NULL</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad indirect assignments
(XC8-1142)</span></b><span lang=EN-US> Expressions that involved cascading
assignments and where the source and destination operands were accessed
indirectly via a pointer might have been incorrect when compiling for an
enhanced mid-range device.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad code produced for indirect
access of arrays in structures (XC8-1141)</span></b><span lang=EN-US> The code
produced for complex controlling expressions in </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>if()</span></span></span><span
lang=EN-US> statements that indirectly accessed a structure member that that
was an array might have not correctly loaded the W register, causing code to
fail. This only affected PIC18 devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad shifts (XC8-1140)</span></b><span
lang=EN-US> Shift operations performed for mid-range devices might have failed
due to the WREG being clobbered during the operation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad pointer deference (XC8-1139)</span></b><span
lang=EN-US> In PIC18 projects where the generated code loaded the FSR register
with an address that was obtained via a pointer deference plus an offset, it
might have clobbered a previously loaded value of WREG and led to code failure.
This might have occurred for code that accessed an array/pointer inside a
structure, for example.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Cromwell crash (XC8-1137)</span></b><span
lang=EN-US> Programs that contained absolute variables whose name began with </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_B</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_H</span></span></span><span lang=EN-US>,
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>_I</span></span></span><span lang=EN-US> or </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_L</span></span></span><span
lang=EN-US> might have cause the cromwell application to crash.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect boolean assignment
(XC8-1136)</span></b><span lang=EN-US> In situations involving an assignment of
a boolean expression to a single-bit bit-field, the wrong value might have been
assigned.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undesirable psect created using
__section (XC8-1135)</span></b><span lang=EN-US> If a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> object was allocated a new section using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__section()</span></span></span><span
lang=EN-US> specifier, the new psect in which the object would have been
located used a psect flag that prevent it from being linked to an absolute
address using a linker option.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Assembler
hangs (XC8-1133)</span></b><span lang=EN-US> An interrupt function containing
only an infinite loop with an empty body might have caused the PIC18 assembler
to become stuck in a loop.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Incorrect
pointer initialisation (XC8-1131)</span></b><span lang=EN-US> Initialisation of
a pointer object (at its definition) may have been incorrect when the pointer
was assigned different targets during subsequent execution of the program and
these new targets were in different memory spaces to the initialisation object
whose address was taken.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad indirect call from interrupts
(XC8-1130)</span></b><span lang=EN-US> For mid-range devices (excluding
enhanced mid-range devices), calling a function indirectly from interrupt code
but not calling the same function indirectly from main-line code, might have
resulted in the wrong address being called.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Delays not using clearing watchdog
timer (XC8-1128)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_delaywdt()</span></span></span><span
lang=EN-US> (and related) delay functions did not use a CLRWDT instruction for
some requested delay values or times. A CLRWDT instruction is now always used.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong branch taken for comparison
of decremented value (XC8-1125)</span></b><span lang=EN-US> For expressions
which performed a relational comparison of a decremented variable with another
quantity, for example </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>if(x-- &lt;= y)</span></span></span><span
lang=EN-US>, the code may have taken the wrong branch if </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></span><span
lang=EN-US> was an </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>unsigned char</span></span></span><span
lang=EN-US> and had the value 0, or </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></span><span
lang=EN-US> was a </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>signed char</span></span></span><span
lang=EN-US> and had the value 0x80. Code would not have failed for equality
comparisons (</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>==</span></span></span><span lang=EN-US>
or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>!=</span></span></span><span lang=EN-US>) or for larger operand types.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect access of external
objects (XC8-1118)</span></b><span lang=EN-US> The compiler might have accessed
external objects (for example those defined in assembly code but used in C
code) in the wrong bank. This could have occurred in many situations; however,
this was unlikely to occur.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash defining large data objects
(XC8-1117)</span></b><span lang=EN-US> In programs with very large amounts of
initialized data the code-generator might have run out of memory creating its
internal data structures. The way the compiler allocates memory for these
internal objects has been refactored and improved.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unused functions trigger CGC
errors (XC8-1110)</span></b><span lang=EN-US> In rare situations where there
was a deep tree of unused functions, Can't Generate Code messages may have been
issued.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incomplete cascaded assignment
(XC8-1108)</span></b><span lang=EN-US> A complex statement that performed
multiple cascade assignments to </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>volatile</span></span></span><span
lang=EN-US> variables might have failed to correctly perform assignments to all
the variables.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect branch with inline
functions (XC8-1107)</span></b><span lang=EN-US> For PIC18 projects that used
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> specifier on functions that generated conditional branch instructions,
the destination label of some of these branches might have been incorrect.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect debugging for static
objects (XC8-1104)</span></b><span lang=EN-US> A deficiency in the compiler</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s debug information might have resulted
in debuggers confusing the displayed information for a static object if there
was more than one such object with the same name.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect signed relational
comparison (XC8-1103)</span></b><span lang=EN-US> Relational comparison of any
signed integers with constants, where the leading byte of the constant was
0x80, might have failed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undesirable access of bitfields
(XC8-1098)</span></b><span lang=EN-US> Code that accessed an 8-bit wide
bit-field was producing sub-optimal code. This may have caused a failure if
this was in a situation where the bit-field was an SFR that must be accessed in
a particular way to trigger a hardware event, such as for </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PMCON2bits.PMCON2</span></span></span><span
lang=EN-US> which controls aspects of the flash memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong structure names used in the
IDE (XC8-1095)</span></b><span lang=EN-US> If different structure types that
contain equivalent members (in terms of member type, size and order) each
contain a structure with the same name but with different member names, MPLAB X
might have shown the members of these types using the wrong names.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong integer-to-pointer
conversion (XC8-1090)</span></b><span lang=EN-US> When integer members of
structures were converted to pointers, the MSB of the integer might not have
been copied over to the destination pointer. This issue could have affected
mid-range devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning with const function
parameters (XC8-1086)</span></b><span lang=EN-US> When calling functions that
had parameters specified as </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US>, there might have been warning #1467 (pointer used for writes
includes read-only target &quot;*&quot;) produced when there was apparently no
pointer in use. This warning has been suppressed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inaccurate small literal
floating-point values (XC8-1083)</span></b><span lang=EN-US> 24-bit literal
floating-point values below approximately 5.88E-39 were assumed to be the value
0.0. This did not affect calculations involving float-point variables, nor any
32-bit floating-point values.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined temp symbol (XC8-1081)</span></b><span
lang=EN-US> When building for PIC18 devices and using the reentrant stack
model, the symbol </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>wtemp</span></span></span><span
lang=EN-US> might have been undefined when code operated on pointers that only
pointed to </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>NULL</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus unused variable warning
(XC8-1080)</span></b><span lang=EN-US> If all dereferences of a pointer
variable with only one target were optimized to direct memory accesses of that
target, the compiler would have misleadingly warned that this pointer was not
used.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Corrupted printf output (XC8-1079)</span></b><span
lang=EN-US> For PIC18 projects that made heavy use of the string functions </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>atof()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US>, the formatted output from </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>%s</span></span></span><span
lang=EN-US> placeholder might have had corrupted characters if the strings used
by these function were represented by a mix of 16- and 24-bit addresses.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Software stack not correctly
unwound after call (XC8-1078)</span></b><span lang=EN-US> A reentrant function
stores its return value on the stack. If this return value was used by some
calling expressions and not used by other calling expressions, then the value
was not removed from the stack for those cases where it was not used. This only
affected the functional integrity of the generated code when such calls
occurred within a loop. This behavior could also have affected debugging, such
as watching variables with automatic storage that were stored on the stack.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t find space for large object (XC8-1074)</span></b><span lang=EN-US>
The PIC18 code-generator might not have been able to allocate space for a large
aggregate object containing pointers if there were any absolute variables or
memory reservations in general-purpose banked memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad managed-stack call (XC8-1068)</span></b><span
lang=EN-US> The code-generator might have generated the wrong code for a
managed-stack function call (enabled with </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--runtime=+stackcall</span></span></span><span
lang=EN-US>), resulting in the error </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>(800) undefined symbol
&quot;entry__functionName</span></span></span><span lang=EN-US>, where </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>functionName</span></span></span><span
lang=EN-US> is the called function. PIC18 devices were not affected by this
issue.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>In-line assembly not preserved
(XC8-1063)</span></b><span lang=EN-US> The PIC18 assembler was not correctly
preserving hand-written in-line assembly code. The code might have been
modified by some compiler optimizations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong access of equated symbol
(XC8-1054)</span></b><span lang=EN-US> The first use of an equate (or set)
symbol in PIC18 assembly code might have produced an instruction with the wrong
RAM access bit. This was only ever likely to affect hand-written assembly code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect assignment-add
(XC8-1028)</span></b><span lang=EN-US> Expressions in PIC18 projects performing
an assignment-add (</span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>+=</span></span></span><span lang=EN-US>)
of a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>signed char</span></span></span><span
lang=EN-US> to a </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>signed short</span></span></span><span
lang=EN-US> and where these operands were in different banks might have
accessed the wrong address and produced an incorrect result.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Large addresses with __at() not
accepted (XC8-1025)</span></b><span lang=EN-US> The compiler did not permit
using values greater than 0x7FFF with </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__at()</span></span></span><span
lang=EN-US> in CCI mode. This limitation has been removed and large addresses
can now be used.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unable to write flash memory
(XC8-1020)</span></b><span lang=EN-US> The assembler</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s procedural abstraction optimization may have interfere with the
flash write unlock sequence used by mid-range PIC devices that can write to
their own flash program memory. This would have only been seen in PRO mode.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Free mode failure of multiply
called functions (XC8-1018)</span></b><span lang=EN-US> Expression containing
multiple calls to the same function, especially the functions associated with
division or multiplication, might have failed for PIC18 projects in Free mode.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Error issued for printf %p
placeholder (XC8-989)</span></b><span lang=EN-US> In some instances, using the</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>
printf()</span></span></span><span lang=EN-US><span style='mso-spacerun:yes'> 
</span></span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>%p</span></span></span><span lang=EN-US>
format specifier might have incorrectly caused the compiler to issue message
#975.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning for absolute object
overlap (XC8-988)</span></b><span lang=EN-US> The compiler did not produce a
warning if an absolute object was defined at an address that overlapped with
other absolute objects. A warning is now produced.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong ID location sizes shown
(XC8-987)</span></b><span lang=EN-US> The number of bytes of ID Location memory
shown in the memory summary was less than that used by the project.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>First byte-sized parameter to
reentrant function (XC8-980)</span></b><span lang=EN-US> For reentrant external
functions, passing a 1-byte argument as the first parameter may have produced
incorrect results or an inability to generate code. Enhanced mid-range devices
resolve this by passing such an argument via the software stack, not in WREG.
Argument passing for PIC18 devices still operates the same way, but changes
were made to ensure it works correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inaccurate small floating-point
results (XC8-971)</span></b><span lang=EN-US> Operations that produced
floating-point results whose IEEE-format exponent value prior to packing were
small (approximately less than 14 for 24-bit doubles; 22 for 32-bit doubles)
may have been corrupted by the floating-point pack routines.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong offsetof() result (XC8-952)</span></b><span
lang=EN-US> For enhanced mid-range devices, the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>offsetof()</span></span></span><span
lang=EN-US> macro might have truncated its result to a single byte when used on
members of large (&gt; 255 byte) structures.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Driver crash with malformed
options (XC8-948)</span></b><span lang=EN-US> When compiling on Windows
platforms, if </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--chip=</span></span></span><span
lang=EN-US> was omitted when providing the chip name (i.e. the chip name was
listed without the option wrapper), the driver might have crashed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compiler crash with pointer
conversion (XC8-944)</span></b><span lang=EN-US> Under some circumstances, code
that contained an unsafe conversion between pointer types, would have crashed
the compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect function sizes shown in
map file (XC8-933)</span></b><span lang=EN-US> Interrupt function sizes
reported in the map file were often incorrect if the body of the interrupt
function was located away from the interrupt vector. Inaccurate sizes might
also have been reported for ordinary functions if the psect that contained
their code was split into several smaller psects. A more accurate means of
obtaining function sizes has been employed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect conversion of pointer to
integer (XC8-628)</span></b><span lang=EN-US> In some cases where a one-byte
pointer is cast and assigned to 2-byte integer the compiler would generate
incorrect code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Failure to extract modules
(XC8-465)</span></b><span lang=EN-US> Using LIBR to extract modules from
library files produced an error when the modules were originally stored with
path information.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incomplete structure
initialization (XC8-280)</span></b><span lang=EN-US> If the first members of a
non-auto structure was written to by an assignment in a function, the remaining
members might not have been cleared (or initialized if they are assigned a
value at their definition).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning issued when buddy function
is called (XC8-246)</span></b><span lang=EN-US> The compiler now warns of
potential code failure when it detects that a function has called one of its </span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>‘</span><span lang=DE style='mso-ansi-language:DE'>buddies</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span dir=LTR></span><span lang=EN-US><span dir=LTR></span>.
Compiled-stack functions that can be called indirectly by the same function
pointer are known as buddies. All buddies have their parameter memory aligned
so that their parameters can be loaded without knowing exactly which function
was called. A function calling a buddy will corrupt its own parameters. This
does not affect functions that use the software stack.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Variables not initialized
(XC8-228, XC8-1168)</span></b><span lang=EN-US> If the first use of a variable
is in a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>switch()</span></span></span><span
lang=EN-US> controlling expression and there were no conditional branches prior
to this statement in the function, the variable might not have been initialized
(either cleared or assigned a non-zero value) at startup.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Error produced for empty
initialisation list (XC8-225)</span></b><span lang=EN-US> The compiler was
producing an error for initial value lists that consisted solely of an empty
pair of braces. A warning is now issued in such situations and the initial
values are assumed to be zero.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No warning for absolutes
out-of-bounds (XC8-186, XC8-187)</span></b><span lang=EN-US> Absolute objects
positioned at an address that did not exist in the device did not elicit a
warning from the compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Pointer arrays in COFF not shown
correctly (XC8-178)</span></b><span lang=EN-US> Arrays of pointers, in certain
circumstances, appeared incorrectly in MPLAB's (X or 8) watch window when using
COFF output. The functionality of code was unaffected. The representation of
pointers in COFF still has limitations, and it is recommended you use ELF/DWARF
output for debugging where possible.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect expansion of macro next
to ## (XC8-96)</span></b><span lang=EN-US> If the preprocessing token following
a ## operator matched a defined macro then the token was being expanded. The C
Standard indicates that such tokens must not be expanded.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.23.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.33</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Wrong bank access in
indirectly-called function (XC8-1124)</span></b><span lang=EN-US> Some
functions might not have selected the correct bank when they were called
indirectly. This could occur when there was a relatively complex expression to
determine the function address. This only affected enhanced mid-range devices
devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Indirect function call corrupts
function parameters (XC8-1123)</span></b><span lang=EN-US> When performing an
indirect call to a function and the function pointer itself had to be read
indirectly, a temporary variable might have been allocated memory that had the
same address as the already-loaded parameters. This would corrupt the
parameters and result in code failure. This only affected enhanced mid-range
devices devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembler crashes when inlining
code (XC8-1119)</span></b><span lang=EN-US> If a function was specified as </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> and this function called other functions that were also inline, the
assembler may have entered an endless loop. The same symptom may have occurred
if the inlined function contained a loop.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Float/double size in invariant
libraries (XC8-1109)</span></b><span lang=EN-US> The size of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>float</span></span></span><span
lang=EN-US>/</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>double</span></span></span><span
lang=EN-US> types in an instruction-invariant library were those specified when
the library was linked with a project, not on the sizes specified when the
library was built.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Instruction-invariant
optimizations falsely enabled (XC8-1102)</span></b><span lang=EN-US> When the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>all</span></span></span><span
lang=EN-US> suboption to </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--OPT</span></span></span><span
lang=EN-US> was used, the instruction-invariant optimizations were also
enabled. This optimization is now only enabled if it is explicitly requested
via a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>+invariant</span></span></span><span
lang=EN-US> suboption. Note that for some projects, MPLAB X IDE used </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--OPT=all</span></span></span><span
lang=EN-US> as the base to the optimizations option. For these projects using
the 1.32 compiler, customers would have inadvertently used the
instruction-invariant optimizations. </span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incomplete instruction-invariant
coverage (XC8-1101)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>invariant</span></span></span><span
lang=EN-US> sub-option of the driver option </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--OPT</span></span></span><span
lang=EN-US>, was not forcing all functions to be invariant.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Improper access of objects
assigned linear-memory address (XC8-1096)</span></b><span lang=EN-US> For
enhanced mid-range PIC devices, code generated for absolute objects that were
given an address in the linear address space and whose size was smaller than
the size of a bank, may have been accessed incorrectly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t generate code in switch expression (XC8-1041)</span></b><span
lang=EN-US> For PIC18 devices, the compiler may not have been able to generate
code when the first element of a larger-than-a-bank-sized array was accessed in
a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>switch()</span></span></span><span lang=EN-US> controlling expression.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code generator crashes trying to
handle recursive call (XC8-1033)</span></b><span lang=EN-US> For PIC18 or
enhanced mid-range devices, which support reentrancy, the compiler may have
crashed in some projects involving recursive function calls.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong bank selected for comparison
statements (XC8-1031, XC8-1040)</span></b><span lang=EN-US> For PIC18 projects
using the compiled stack, an </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>if()</span></span></span><span
lang=EN-US> statement comparing a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>signed char</span></span></span><span
lang=EN-US> variable with a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>signed int</span></span></span><span
lang=EN-US> variable may have failed. When the variables being compared resided
in a bank different to that used for temporary variables, the bank of the
temporary may not have been selected, resulting in the comparison failing. This
problem is known to have affected the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> library routine.</span></p>

<h2 style='margin-left:32.4pt;text-indent:-32.4pt;mso-list:l5 level2 lfo2'><![if !supportLists]><span
lang=FR style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>5.24.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE style='mso-ansi-language:DE'>Version 1.32</span></h2>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect pointer assignment
(XC8-1067)</span></b><span lang=EN-US> In some cases the code-generator was
incorrectly assigning to a 3-byte pointer a 1-byte address that was a member of
a structure and which was also accessed by a pointer.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrectly initialized structures
(XC8-1057)</span></b><span lang=EN-US> For PIC18 devices, when initializing
structures that contained a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>char</span></span></span><span
lang=EN-US> array with a string less than the size of the array, the
initialization may have caused structure members following the array to be
corrupted.</span></p>

<p class=DescriptiveList><b><span lang=NL style='mso-ansi-language:NL'>Code
generator crash (XC8-1056)</span></b><span lang=EN-US> In rare circumstances,
complex projects that made heavy use of function pointers may have caused the
code generator to crash.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad short long addition result
(XC8-1052, XC8-1064)</span></b><span lang=EN-US> For PIC18 devices, the result
of </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>short long</span></span></span><span lang=EN-US> additions when the
operands were in different banks may have been incorrect.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Software UART writes not working
(XC8-1048)</span></b><span lang=EN-US> The PIC18 peripheral library function </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>WriteUART()</span></span></span><span
lang=EN-US> was not sending the necessary start and stop bits and also
truncated the data sent out to the TX pin.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Assembler
crash (XC8-1046)</span></b><span lang=FR> </span><span lang=EN-US>In rare
circumstances for baseline and mid-range targets, when procedural abstraction
optimizations were enabled, the assembler may have crashed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembly errors when using LOCAL
macro labels (XC8-1043)</span></b><span lang=EN-US> In rare instances, use of
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>LOCAL</span></span></span><span
lang=EN-US> directive in assembly macros may have resulted in a syntax or
lexical error. This would affect macros where the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>LOC<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>AL</span></span></span></span><span lang=EN-US> directive was the first
token in the macro definition.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong bank selected with
complement (XC8-1035)</span></b><span lang=EN-US> In some cases for PIC18
targets the compiler was selecting the wrong bank when performing a bitwise
complement of a word-sized object in banked memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect memory access (XC8-1023)</span></b><span
lang=EN-US> In extremely rare instances, code that accessed memory locations
may have accessed them in the wrong bank.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad call to typeSub() error
(XC8-1021, XC8-981, XC8-1027)</span></b><span lang=EN-US> In rare situations,
complicated expressions which indirectly called functions via a pointer and
where that pointer was a member of a structure that was passed to a function as
an argument, a 'bad call to typeSub' error might have occurred.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad indirect structure member
access (XC8-1006)</span></b><span lang=EN-US> Indirect access of pointer
members within a structure may have failed if the structure pointer had been
previously assigned a function return value. This only affected PIC18 devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad bank selected in addition
(XC8-1005)</span></b><span lang=EN-US> For PIC18 targets, where an unsigned
byte was added to a 2-byte location and the destination and two addition
operands were in different banks, the operands might have been read from the
wrong bank, which would have corrupted the result.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Parser crash after emitting errors
(XC8-998, XC8-1037, XC8-982)</span></b><span lang=EN-US> Situations, such as
where a function declaration was badly formed or there were other errors in the
source code, might have caused the parser to crash after generating one or more
errors indicating the offending line of code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></b><b><span
lang=IT style='mso-ansi-language:IT'>t Generate Code error (XC8-947)</span></b><span
lang=IT> </span><span lang=PT style='mso-ansi-language:PT'>A Can</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>t Generate Code message may have been
issued for baseline parts when a single-byte pointer was indirectly assigned to
a two-byte destination pointer.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Driver crash when using unorthodox
memory reservation option (XC8-916)</span></b><span lang=EN-US> When reserving
memory on an enhanced mid-range PIC, if the reservation range included the
device</span><span dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:
"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";mso-hansi-font-family:
"Times Roman"'><span dir=RTL></span>’</span><span lang=EN-US>s common memory
the compiler's driver might have crashed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined symbol errors using
interrupt_level pragma (XC8-871)</span></b><span lang=EN-US> When using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>interrupt_level</span></span></span><span
lang=EN-US> pragma with functions called indirectly, there may have been
undefined symbols, such as </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>i0fpbase</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>fp__funcName</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warnings (XC8-870, XC8-863,
XC8-787)</span></b><span lang=EN-US> Warnings indicating a degenerate or
mismatched comparison were sometimes issued in situations where this was not
the case. This was most likely when the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sizeof</span></span></span><span
lang=EN-US> operator was used in expressions and an offset was subtracted from
this operator</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s value. In other instances, an unused-variable warning was issued
for temporary symbols generated by the compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Cromwell crash (XC8-217)</span></b><span
lang=EN-US> In rare situations, the cromwell application may have crashed for
large projects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></b><b><span
lang=IT style='mso-ansi-language:IT'>t Generate Code error (XC8-176)</span></b><span
lang=IT> </span><span lang=EN-US>In some instances, the compiler was not able
to generate code for an initializer that implicitly converted an address to an
integer type.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code generator crash with multiple
assignments (XC9-172)</span></b><span lang=EN-US> Large chains of assignments
caused the code generator to crash (e.g. </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>a=b=c=d=...</span></span></span><span
lang=EN-US>). This has been corrected for the case where the intermediate
destinations have no side-effects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>External memory missing for 18F97J94
(UDBC-740)</span></b><span lang=EN-US> No external memory was specified for
this device in the relevant INI file. This prevented some compiler memory
options from allowing you to add extra memory when building. </span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>5.25.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.31</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Note about Debugging (MPLABX-2129)</span></b><span
lang=EN-US> Note that an issue in MPLAB X IDE has resulted in poor debugging
experiences when using MPLAB XC8 and source code that uses inlined functions.
At times, more than one step action is required to advance one C source line,
and sometimes stepping might have resulted in jumps to unexpected parts of the
program. This has been corrected in version 2.05 of the IDE.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad address formation (XC8-1017)</span></b><span
lang=EN-US> For enhanced mid-range devices, the formation of the upper byte of
an address might have been incorrect when the target was in banks higher then
bank 1. This might have affected increment/decrement of a pointer; loading a
temporary variable from a software-stack-based pointer; or indirect assignment
of a pointer.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad pointer assignment (XC8-1015)</span></b><span
lang=EN-US> For enhanced mid-range devices, where a pointer is assigned to
another pointer, the source pointer is byte-wide and on the software stack
(reentrant mode), and the destination pointer is 2-bytes wide and is <i>not</i>
on the software stack, then the upper byte of the destination pointer may be
loaded with an incorrect value.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inline delays causing crash
(XC8-1009)</span></b><span lang=EN-US> In situations where the inline delay
routine was used and no code followed in the same function that performed a
call or jump to another page, the delay may have jumped to the wrong location
and the program crash.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No warnings for stack overflow
(XC8-1012)</span></b><span lang=EN-US> A warning indicating an overflow of the
data stack was not produced for some reentrant functions which defined too much
stack-based variables. A warning is now issued. Note that the MPLAB XC8 User</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>s Guide incorrectly lists the PIC18
stack limit as 255 bytes. This limit is 127 bytes.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined/redefined symbols for
reentrant functions (XC8-1011)</span></b><span lang=EN-US> For functions
compiled using the reentrant model, some assignments may have defined the wrong
local symbol for a branch. Errors indicating undefined or multiply defined
symbols, or relative branch/call offsets out of range may have been issued by
the compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Indirect access of structure
members (XC8-1010)</span></b><span lang=EN-US> In some instances, pointer
arithmetic on the address of structure members could be calculated incorrectly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect pointer size with return
statements (XC8-999)</span></b><span lang=EN-US> In rare instances, pointers
returned by functions might have been made the wrong size.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code errors with pointer structure members (XC8-451)</span></b><span
lang=EN-US> Where a pointer is a member of a structure, it may have been made
larger than necessary, or code that dereferenced it might have been less than
optimal. In some situations, the compiler might have issued Can</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>t Generate Code messages when
dereferencing the pointer.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Program resets (XC8-970)</span></b><span
lang=EN-US> Under some circumstances inlining nested functions calls might have
resulted in a call to reset and program failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Debug information missing from
.asm modules (XC8-1003)</span></b><span lang=EN-US> Line number information was
missing in generated COF files for assembly files that used a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.asm</span></span></span><span
lang=EN-US> file extension. Files with a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.as</span></span></span><span
lang=EN-US> extension were not affected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad labels for switch code
(XC8-996)</span></b><span lang=EN-US> For PIC18 devices, if a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>switch</span></span></span><span
lang=EN-US> statement was used in a reentrant function that was called by an
interrupt function, the code generator created invalid label names for the
cases.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Syntax error with stack-object
assignments (XC8-997)</span></b><span lang=EN-US> Expressions involving
multiple assignments of stack objects in reentrant functions on PIC18 devices,
might have resulted in a syntax error from the assembler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrectly merged code (XC8-994)</span></b><span
lang=EN-US> When a statement in the true part of an </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>if</span></span></span><span
lang=EN-US> statement and a statement in the false (else) part was the same
except for a conversion (cast) of a symbol from signed to unsigned (or vice
versa), the compiler might incorrectly consider these statements identical and
merge the generated code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Overlap of interrupt code
(XC8-983, XC8-945)</span></b><span lang=EN-US> On an enhanced baseline devices
with oscillator calibration enabled in the runtime startup code and an
interrupt service routine defined, a linker warning (596) about segment overlap
might have been issued. The warning would have indicated generated code that
was corrupted and could result in code failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Overlap of interrupt code
(XC8-979)</span></b><span lang=EN-US> Programs compiled for PIC18 targets that
include a low- and high-priority interrupt function might have had the psects </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>intcode</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>intcodelo</span></span></span><span
lang=EN-US> overlap. This was especially the case when compiling in Free or
Standard modes.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Byte comparison failure (XC8-978,
XC8-990)</span></b><span lang=EN-US> Comparison of a byte expression with a
constant might have failed when compiling for PIC18 devices. This would have
only affected expressions whose results were stored in temporary variables. The
temporary variable might have been incorrectly accessed in common memory when
it was located in banked memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad pointer assignment (XC8-977)</span></b><span
lang=EN-US> For PIC18 targets, when assigning from one pointer to another and
the destination pointer was 2-bytes wide, the upper byte of the pointer might
have been cleared rather than assigned the correct value.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Syntax error with left shifts (XC8-973,
XC8-974)</span></b><span lang=EN-US> Some PIC18 expressions involving a left
shift of a single bit quantity by a constant value might have produced a syntax
error due to a malformed assembler instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad parameter load (XC8-959)</span></b><span
lang=EN-US> In rare instances, where a function call is required to obtain the
argument to another function, there may be a corruption of the called-second
function</span><span dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:
"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";mso-hansi-font-family:
"Times Roman"'><span dir=RTL></span>’</span><span lang=PT style='mso-ansi-language:
PT'>s parameters.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Cromwell crash (XC8-966)</span></b><span
lang=EN-US> Programs that contain an inline-qualified function that was
successfully inlined by the compiler and with no </span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>‘</span><span
lang=EN-US>outlined</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’ </span><span
lang=EN-US>version generated, might have caused cromwell to crash during
ELF/DWARF generation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad call to typeSub error with
pointers (XC8-960)</span></b><span lang=EN-US> For code that defined function
pointers and these pointers were not assigned a valid address of an object, the
error </span><span dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:
"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";mso-hansi-font-family:
"Times Roman"'><span dir=RTL></span>‘</span><span lang=EN-US>Bad call to
typeSub() </span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>‘</span><span
lang=EN-US>might have been produced.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembler crash with large
routines (XC8-955)</span></b><span lang=EN-US> For midrange PIC devices
compiling extremely large routines that would never actually fit on the target
device, the assembler might have crashed. A memory error is now reported in
such circumstances.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Ignored __section specifier
(XC8-562, XC8-951, XC8-950, XC8-852, XC8-851)</span></b><span lang=EN-US> In
some instances, the use of the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__section</span></span></span><span
lang=EN-US> specifier was ignored, or might have resulted in the wrong section
being used. This would have occurred when objects using custom sections were
used across multiple source modules. Bogus warnings issued when using this
specifier have also been suppressed. The previous limitations associated with
use of the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__section</span></span></span><span
lang=EN-US> specifier have been lifted as a result of this fix. You no longer
need use the specifier with declarations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Driver crash when adjusting memory
ranges (XC8-936)</span></b><span lang=EN-US> When complex memory reservation
ranges were specified (particularly those that contained duplicate or
overlapping ranges) or when hand-written assembly code defined absolute psects,
the compiler driver may have crashed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code generator crash when using
regused pragma (XC8-928)</span></b><span lang=EN-US> If the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>regused</span></span></span><span
lang=EN-US> pragma was used with with no registers specified, the compiler
might have crashed. This only affected compilation for baseline and all
midrange devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Driver crash when reserving common
memory (XC8-1014)</span></b><span lang=EN-US> When reserving addresses for an
enhanced midrange device and the addresses were within the common memory range,
the compiler driver might have failed an assertion.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Looping around allocGlobals error
(XC8-832, XC8-991, XC8-946)</span></b><span lang=EN-US> In some instances where
a structure contained a pointer member, the error 'looping around allocGlobals'
may have been issued.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Non-detection of multiple use of
codeoffset (XC8-509)</span></b><span lang=EN-US> When compiling for PIC18
devices, using more than one </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--CODEOFFSET</span></span></span><span
lang=EN-US> option triggered an error; when compiling for all other devices, it
was silently ignored. Now, for all devices, the duplicate option is ignored
provided it does try to move the origin of ROM lower than it is currently set;
otherwise, a warning is produced.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Seemingly insane can</span></b><span
dir=RTL></span><b><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>t find space messages (XC8-502)</span></b><span
lang=EN-US> Bogus can't find space errors might have been produced for
structure or array objects that contained pointers, even though there was ample
memory remaining. The message would have been triggered by objects whose size
(assuming the pointers were 3-bytes wide) was larger than 256 bytes, but whose
final size was less than 256 (after the pointers sizes were determined).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing warning (XC8-491)</span></b><span
lang=EN-US> The compiler was not producing a warning when code applied the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sizeof</span></span></span><span
lang=EN-US> operator to objects of incomplete type e.g. an array with no
declared size.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Error messages referencing
inappropriate source code (XC8-490, XC8-207)</span></b><span lang=EN-US> Some
error and warning messages are not related to specific lines of code; however,
even in these circumstances the compiler would print a file name and line
number (which would typically be the last file and line of source processed).
Some messages now include the string &quot;Non line specific message:&quot;
instead of a filename to ensure it is clear that there is no single statement
that is at fault.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning when comparing
function types (XC8-464)</span></b><span lang=EN-US> The compiler might have
issued warnings indicating a mismatch in type when comparing a function that
has an empty parameter list and a function that has a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>void</span></span></span><span
lang=EN-US> parameter (all else being equal). These are now considered
equivalent types.</span></p>

<p class=DescriptiveList><b><span lang=NL style='mso-ansi-language:NL'>Parser
crash (XC8-460)</span></b><span lang=EN-US> When erroneous code such as the
following (attempted use of an incomplete structure definition) was
encountered:</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>struct a {</span></p>

<p class=Code0><span lang=ES-TRAD>int f;</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>/* missing
close-curly } */;</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>struct a b;</span></p>

<p class=DescriptiveList><span lang=EN-US>the parser component crashed instead
of terminating gracefully.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Memory errors when using sort
function (XC8-449)</span></b><span lang=EN-US> The buffer size used by the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sort</span></span></span><span
lang=EN-US> function has been reduced for non-PIC18 devices to prevent can't
find space messages on some devices. Consider adding the source for this
function to your project if you want to customize the buffer size for your
application and device.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Detection of square bracket misuse
(XC8-443)</span></b><span lang=EN-US> The compiler will now flag an error if
square, array-subscript brackets (as opposed to round brackets) have been
mistaken used to call a function.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>In-line assembly degrading
debugging (XC8-329)</span></b><span lang=EN-US> Setting breakpoints on lines of
code appearing after </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#asm</span></span></span><span
lang=EN-US> ... </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#endasm</span></span></span><span
lang=EN-US> blocks was often not possible, or breakpoints did not match the
correct assembly instructions. Use of </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>asm()</span></span></span><span
lang=EN-US> statements did not cause this issue.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code when calling functions via initialized pointers
(XC8-238)</span></b><span lang=EN-US> The compiler better handles situations
where pointers containing NULL were been used to call functions, or absolute
(literal constant value) functions were called. A warning might be triggered if
such a call is made.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Spurious warnings concerning
invalid variable locations (XC8-221)</span></b><span lang=EN-US> If the warning
level threshold was lowered, spurious warnings about library functions were
being printed. Messages appeared similar to &quot;invalid variable location detected:
___aslmul - ___aslmul (warning)&quot;</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembly crash with in-line
assembler (XC8-182)</span></b><span lang=EN-US> In some instances when in-line
assembly contained a GOTO instruction, the assembler may have crashed. This
affected only PIC18 targets.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code messages with comparisons (XC8-164)</span></b><span
lang=PT style='mso-ansi-language:PT'> A Can</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code error might have been issued for complex relational
(greater than) comparisons of </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>int</span></span></span><span
lang=EN-US> types.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Failure with indirect comparison
(XC8-13)</span></b><span lang=EN-US> Code that indirectly accessed any 4-byte
object and performed a == or != comparison might have failed. This might be
expected when integer or floating point quantities were converted to boolean
values.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing symbol when calling
functions indirectly (XC8-968)</span></b><span lang=EN-US> When compiling for
any baseline or midrange device, functions that are only called indirectly and
only from an interrupt might not have been added to the indirect function
calling table. This would have resulted in an undefined symbol error.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>5.26.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.30</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrectly merged code (XC8-924)</span></b><span
lang=EN-US> When a statement in the true part of an </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>if</span></span></span><span
lang=EN-US> statement and a statement in the false (else) part was the same
except for a conversion (cast) of a symbol, the compiler might incorrectly
consider these statements identical and merge the generated code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>MPLAB X Watch objects in wrong
memory space (XC8-935)</span></b><span lang=EN-US> In some instances,
uninitalized (BSS) variables would be reported as being in program memory in
the MPLAB X watch window, and the wrong value displayed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Build delay</span></b><span
lang=EN-US> The compiler</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s license manager (XCLM) was updated to revision 1.23. This disables
the RLM option to automatically query the network for a network server when a
node locked file was not found. This will prevent a several-second delay with
each invocation of the compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Recursive call to function error
(XC8-913)</span></b><span lang=EN-US> In some instances the compiler falsely
reported that a compiler library function was called recursively.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Reset to main in debugger
(XC8-926, XC8-1008)</span></b><span lang=EN-US> The compiler produced a
debugging image lacked sufficient information to support the MPLAB X feature
that breaks the debugger at main() on restart. Note that changes to resolve
these issues were also made in MPLAB X IDE and will be available in the v2.06
release.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad right shift (XC8-938)</span></b><span
lang=EN-US> For all devices, some expressions involving a right shift of an
unsigned object that was cast to be a signed object, might have produced an
incorrect result.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad pointer access (XC8-908)</span></b><span
lang=EN-US> Dereferencing a pointer with program and data space targets may
have resulted in the wrong value. This issue is known to have caused bad output
when using printf().</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Copying const structures (XC8-806)</span></b><span
lang=EN-US> Code that indirectly copied (via a pointer) a structure larger than
4 bytes in size to another structure may have failed if the source structure
was in program memory and the source pointer had both RAM and program memory
targets. This affected PIC18 devices only.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Duplicate advisory messages
printed (XC8-840)</span></b><span lang=EN-US> Advisory messages might have been
issued twice when compiling code in some situations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad code after indirect data
memory access (XC8-839)</span></b><span lang=EN-US> Code which indirectly
accessed RAM using an FSR may have overwritten the content of WREG, resulting
in subsequent code failure. This would have only affected enhanced mid-range
devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Truncation of Operand Value
messages when accessing linear objects (XC8-837, XC8-889)</span></b><span
lang=EN-US> For enhanced mid-range devices that accessed objects placed in
linear memory, the wrong address may have been accessed. The warning
&quot;truncation of operand value&quot; might have been issued for such code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compiler crash when copying
structure pointers (XC8-779)</span></b><span lang=EN-US> When casting a pointer
to a structure to another structure pointer, the compiler may have become stuck
in a recursive loop (and ultimately crash) if the source and destination
structure types both had a self-referential pointer member at the same member position
in the structure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>String labels (STR_x) defined more
than once (XC8-527)</span></b><span lang=EN-US> Some string labels may have
been reused resulting in a multiply defined label error from the compiler.
String labels look similar to </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>STR_2</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>STR_10</span></span></span><span
lang=EN-US> etc.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code errors when casting structure pointers (XC8-722)</span></b><span
lang=EN-US> This error may have been issued when casting pointers to packed
structures to other pointer types.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inappropriate pointer warning
issued (XC8-599)</span></b><span lang=EN-US> The message </span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman";mso-ansi-language:AR-SA'><span
dir=RTL></span>“</span><span lang=EN-US>a pointer to eeprom cannot also point
to other data types” may have been issued in some situations that were not
appropriate.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Linker errors when adjusting
program memory ranges (XC8-522)</span></b><span lang=ES-TRAD style='mso-ansi-language:
ES-TRAD'> If compiling for an enhanced mid-range device and overriding the
default program memory with an option similar to: </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ROM=0-7ff</span></span></span><span
lang=EN-US> (options in which the default memory is removed and new ranges are
specified), the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>STRING</span></span></span><span
lang=EN-US> linker class was not being allocated the specified memory. Linker
errors such as 'psect &quot;strings&quot; not specified in -P option' might
have resulted and string objects might have be linked at invalid addresses.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined symbols using interrupt_level
pragma (XC8-535, XC8-133, XC8-3)</span></b><span lang=EN-US> If a function was
only called in interrupt code and the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>interrupt_level</span></span></span><span
lang=EN-US> pragma was applied to it, it was not output at all, resulting in
&quot;undefined symbol&quot; errors.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Bad
Pointer conversion (XC8-761)</span></b><span lang=EN-US> Implicit conversion of
a 2-byte pointer to a 3-byte pointer might have failed in some situations. The
upper byte of the destination pointer was always being cleared.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad pointer comparisons (XC8-604)</span></b><span
lang=EN-US> In some situations, comparisons of 3-byte pointers with </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>NULL</span></span></span><span
lang=EN-US> may have been incorrectly performed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Errors using ## preprocessor
operator (XC8-526)</span></b><span lang=EN-US> When expanding preprocessor
macros whose expansion involved the concatenation operator, ##, and the
argument to such a macro was a floating-point number which had a sign character
and one and only one exponent digit (e.g. 1.23e+1), the expansion may have
failed and generated compile-time errors.</span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Bad
Pointer conversion (XC8-761)</span></b><span lang=EN-US> Implicit conversion of
a 1-byte pointer to a 3-byte pointer might have failed in some situations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Driver crash when reserving memory
(XC8-688)</span></b><span lang=EN-US> The compiler may have crashed if
reserving program memory that included all the configuration memory. It is now
no longer possible to reserve any of the configuration, idloc, or useridloc
memory using the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--ROM</span></span></span><span
lang=EN-US> option. These address ranges are masked from any range specified
using this option.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code errors and __section specifier (XC8-506)</span></b><span
lang=EN-US> Indirectly accessing objects defined using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__section()</span></span></span><span
lang=EN-US> specifier may have produced this error for any mid-range or
baseline device.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Find Space messages (XC8-85)</span></b><span lang=EN-US> In
situations (typically when writing bootloaders) where the entire memory which
is normally allocated to a linker class is reserved, the linker might have
displayed error messages indicating that psects could not be allocated memory,
even if those psects had a size of zero. These errors are now suppressed in
this situation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembler crash with missing
labels (XC8-123)</span></b><span lang=EN-US> The assembler may have crashed if
optimising code that had jumps or calls to labels that were not defined in the
assembly code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code errors (General) (XC8-505)</span></b><span
lang=EN-US> The compiler now performs an extra code generation step before
issuing these errors. This might suppress such errors for expression that
involve (implicit or explicit) function calls and register allocation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Looping Around allocGlobals error
(XC8-844)</span></b><span lang=EN-US> Some expressions created temporary
variables which were not correctly allocated memory. This caused an endless
loop which resulted in a &quot;looping around allocGlobals&quot; error to be
produced.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Corruption of const data (XC8-865)</span></b><span
lang=EN-US> The psects that contained absolute </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> objects were being scanned by the assembler and errata NOPs added
after any label in those psects. This corrupted the data these psects held. The
names of the psects used to hold these data have changed from ending in </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_text</span></span></span><span
lang=EN-US> to ending in </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>_const</span></span></span><span
lang=EN-US> and they are no longer scanned by the assembler. This issue only
affected devices that required the FETCH or 4000 errata workarounds (see table
at the end of this document).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>General code failure (XC8-866)</span></b><span
lang=EN-US> Some code sequences involving </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>char</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>int</span></span></span><span lang=EN-US>
types may fail, particularly when casting from one type to another. This only
affected mid-range and baseline devices. While a general fault, it was unlikely
to affect programs.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code when indirectly calling functions (XC8-867)</span></b><span
lang=EN-US> This error messages might have been issued when calling functions
via a pointer which is initialized only with a literal constant or NULL. This
issue only affected PIC18 devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compilation of source files with
the same name (XC8-768)</span></b><span lang=EN-US> An error was generated when
compiling an MPLAB X IDE project that contained two or more C source files with
the same filename (but stored in different directories). Such projects are now
allowed to compile. Operation on the command-line is similarly less restricted,
provided there will be no clash between the intermediate P1 files generated
from these source files.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Complement operator used with
boolean results (XC8-167)</span></b><span lang=EN-US> The complement of a
boolean value, for example </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>~( ! foobar)</span></span></span><span
lang=EN-US>, was returning a boolean type rather than the integral promoted
type. This may have produced incorrect values in expressions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Error reading CMF (XC8-872)</span></b><span
lang=EN-US> A user defined psect (either in assembly or created with the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__section()</span></span></span><span
lang=EN-US> directive) that was not associated with a linker class (either in a
command-line option or in the psect directive) produced a CMF file that could
not be read by the Cromwell application. It caused Cromwell to emit the message
&quot;error reading CMF: no token at index 6&quot;.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Arguments to indirect calls not
correctly passed (XC8-242)</span></b><span lang=EN-US> If more than one
function was called indirectly via the same pointer and these functions had
pointer parameters, in some instances the parameters might not have be passed
correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incomplete memory summary
(XC8-503)</span></b><span lang=EN-US> Psects that are created using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__section()</span></span></span><span
lang=EN-US> specifier did not appear in the memory summaries issued by the
compiler. These are now included in an </span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman";mso-ansi-language:AR-SA'><span
dir=RTL></span>“</span><span lang=EN-US>unclassed” part of the psect listing.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code errors with structure pointer members (XC8-417)</span></b><span
lang=EN-US> In some situations, code involving pointers defined in structures
produced Can</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code messages. This was most prevalent when the pointer
was passed to a function as an argument.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bank selection issue with bitfield
member (XC8-877)</span></b><span lang=EN-US> When accessing a bit-field located
at position 6 in the structure, and the expression contains another memory
object in another bank, a bank selection instruction may have been omitted
resulting in the wrong bit-field location being accessed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect XOR of single bit-field
object (XC8-842)</span></b><span lang=EN-US> XORing single-bit-wide bit-field
objects with the value 1 was always producing the value 1.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect memory reservation with
user-defined RAM psects (XC8-466)</span></b><span lang=EN-US> The compiler was
reserving memory during the C code generation step for psects in hand-written
assembly code that were not absolute and overlaid. Only absolute and overlaid
psects should memory reserved at the code generation stage, as described in the
XC8 User</span><span dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:
"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";mso-hansi-font-family:
"Times Roman"'><span dir=RTL></span>’</span><span lang=EN-US>s Guide. This may
have resulted in bogus out-of-memory errors.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code failure with shift and type
conversion in the same expression (XC8-887)</span></b><span lang=EN-US>
Expressions that involve a variable being shifted by multiples of 8 and a
conversion to smaller integer type (whether implicit or a cast) may have
accessed the variable in the wrong bank and led to code failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Truncation of Operand Value
messages with compound assignments (XC8-873)</span></b><span lang=EN-US>
Compound assignments of a constant to objects that are in linear memory, e.g. </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>a=<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>b=100;</span></span></span></span><span lang=EN-US> might have produced
a warning &quot;truncation of operand value&quot; message with subsequent code
failure. This only affected enhanced mid-range devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect delays and Truncation of
Operand Value messages (XC8-843) </span></b><span lang=EN-US>When using the
inbuilt delay routine </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>_delay()</span></span></span><span
lang=EN-US> and delay values above 1792, the delay time may have been in error
and warning messages indicating truncation of operand value may have been issued.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad Fill assignment (XC8-890)</span></b><span
lang=EN-US> In some instances when the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--CHECKSUM</span></span></span><span
lang=EN-US> option was being used, a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--FILL </span></span></span><span
lang=EN-US>option was implicitly created by the driver to ensure consistent
checksum results. The fill command passed to Hexmate was not correctly formed
and resulted in a Hexmate error: (941) bad &quot;-FILL&quot; assignment.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Parser crash on division/modulus
by zero (XC8-886, XC8-888)</span></b><span lang=EN-US> Some preprocessor
expressions involving a division or modulus by a literal value of zero were not
being detected and crashed the parser. The parser now issues an error message
for such situations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Illegal sized arrays accepted
(XC8-898)</span></b><span lang=EN-US> Array declarations that specified an
array size and the size expression involved the sizeof() operator were not
flagged as an error if the size expression evaluated to be a negative value. An
error is now issued for such code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing warning or error messages
(XC8-899)</span></b><span lang=EN-US> Some warnings issued by the compiler may
have been lost and not appear during a build. It is possible that builds with
this compiler release will produce more warnings than with previous builds.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Address of objects returning NULL
(XC8-76)</span></b><span lang=EN-US> For programs with less than 256 bytes of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> data (const objects being placed in the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>smallconst</span></span></span><span
lang=EN-US> psect), taking the address of a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> object may have compared equal to </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>NULL</span></span></span><span
lang=EN-US>. The first byte of the space allocated to the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>smallconst</span></span></span><span
lang=EN-US> psect is now reserved so that this situation can no longer occur.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Error when using booleans in
integer expressions (XC8-131)</span></b><span lang=EN-US> The unary </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>+</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-</span></span></span><span lang=EN-US>
operators may now be used with either </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>bit</span></span></span><span
lang=EN-US> variables or operators that produce a boolean value (such as </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>==</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>!</span></span></span><span lang=EN-US>
and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&gt;</span></span></span><span
lang=EN-US>). The boolean values are promoted to an </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>int</span></span></span><span
lang=EN-US> then used in the usual way.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Negative signs with negative
floating-point values (XC8-135)</span></b><span lang=EN-US> In some instances,
the negative sign was not being printed for negative floating-point values.
Note that the printf code is customized with each build based on the
placeholder your program uses, so not all programs would have been affect by
this issue.<b><o:p></o:p></b></span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>5.27.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.21</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect indirect access of
absolute objects (XC8-847)</span></b><span lang=EN-US> Pointers assigned the
address of absolute objects might have been too small to correctly access the
target object. This only affected PIC18 devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong pointer sizes (XC8-824, 791,
830)</span></b><span lang=EN-US> In some situations pointers may have assumed
incorrect sizes which lead to code failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad code after addition (XC8-823)</span></b><span
lang=EN-US> Code which required the addition of an stack-object address with a
small literal constant may have clobbered the value in held in WREG. Any
subsequent code relying on WREG may have failed. This only affected enhanced
mid-range PIC devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Over-enthusiastic optimization of
goto to branch instructions (XC8-808)</span></b><span lang=EN-US> Regardless of
the state of the optimization option, the PIC18 assembler would always consider
changing GOTO instructions to branch instructions for hand-written assembly
modules (this did not affect in-line assembly code).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembler crash with GOTO
instruction (XC8-805)</span></b><span lang=EN-US> In some instances, the use of
a constant literal address as the operand of a GOTO instruction caused the
PIC18 assembly optimizer to crash. This is only likely to have affected
hand-written assembly code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Syntax errors with bit expressions
(XC8-810)</span></b><span lang=EN-US> Assigning the result of an AND between
two bit types to a bit type destination, may have resulted in syntax errors.
This only affected PIC18<span style='mso-spacerun:yes'>  </span>targets.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compiler crash with assembly-only
projects (XC8-822)</span></b><span lang=EN-US> For projects that contain only
hand-written assembly code, the compiler driver may have crashed. This only
affected compilers running under the Window OS.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Spurious message when building
(XC8-783)</span></b><span lang=EN-US> Programs containing functions with
identifiers ending in </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>alt</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>nosup</span></span></span><span
lang=EN-US> could have caused the compiler driver to emit messages making
reference to </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>process_nosup_syms</span></span></span><span
lang=EN-US>. The messages relate to a &quot;mistaken identity&quot; of symbols
used by the linker to convey specific linking information; they do not indicate
wrongly generated code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembly optimizer alters code
sequences affecting volatile SFRs (XC8-798)</span></b><span lang=EN-US> The
assembly optimizer can partially abstract code sequences. Typically, this is of
no concern, but for time-sensitive instruction sequences (e.g. special
instruction sequences to initiate a flash write), this may cause unexpected
behavior. The compiler has been updated to ensure that access of all volatile
special function registers are not abstracted. This only affects mid-range PIC
devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembler optimization produces
bad code for if() statements (XC8-825)</span></b><span lang=EN-US> When an if()
expressions involved two tests for equality and the body of the if() was an
assembly sequence that was only 1 instruction long, an assembly optimization
may have corrupted this code sequence causing code failure. This only affected
PIC18 devices where assembler optimizations were enabled.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong bank access with shift code
(XC8-828)</span></b><span lang=EN-US> Code involving right shifts of long
objects, where the object being shifted and the variable containing the shift
amount are in different banks, was not correctly registering the bank selected.
Subsequent code may have accessed the wrong memory location. This only affected
PIC18 target devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash when using large command
lines (XC8-845)</span></b><span lang=EN-US> Executing the compiler with command
line arguments totaling more than 8192 characters in length may have caused the
compiler driver to crash.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong bank access in code loops
(XC8-567)</span></b><span lang=EN-US> For some code sequences that contained
loops, tracking the currently selected bank when it was changed inside the loop
may have failed. This would have caused wrong variable locations to be accessed
on subsequent iterations of the loop.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong pad values used with
download option (XC8-760, 762)</span></b><span lang=EN-US> The </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>download</span></span></span><span
lang=EN-US> suboption to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--RUNTIME</span></span></span><span
lang=EN-US> option pads certain records in the HEX file. The pad values used
for mid-range and baseline devices were specified using the wrong byte order.
This may have led to programming errors. This issue did not affect the
operation of the code in any way.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash when using #fi directive
(XC8-771)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#fi</span></span></span><span
lang=EN-US> preprocessor directive is valid when using C18 compatibility mode.
Outside of this mode, use of this directive should flag an error. Instead, the
preprocessor was crashing when this directive was encountered.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incomplete initialization of
absolute const arrays (XC8-770)</span></b><span lang=EN-US> When compiling for
PIC18 devices, the uninitialized elements or members of partially initialized
absolute </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> array or aggregate objects, may not have been zeroed. This issue
did not affect objects that were not absolute.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect byte return value from
functions (XC8-769)</span></b><span lang=EN-US> For functions that returned a
byte and which did not use the regular call stack (this implies that the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>stackcall</span></span></span><span
lang=EN-US> suboption to </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--RUNTIME</span></span></span><span
lang=EN-US> was enabled), expressions that used this return value may have read
it from the wrong location. This would have resulted in incorrect results from
expression that used the return value.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Recursive function call error
(XC8-437)</span></b><span lang=EN-US> Code using the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>modf()</span></span></span><span
lang=EN-US> library function may have triggered the error message <i>recursive
function call to &quot;___ftpack&quot;</i>. The source code for this function
has been modified so that this message is no longer generated.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Function return value corrupts
other data or is corrupted by other code (XC8-344)</span></b><span lang=EN-US>
Insufficient memory was allocated for a function's return value if that value
was greater than the size of the auto-parameter block for that function.
Specifically this issue only affected PIC18 functions which returned a pointer
type and when the size of this pointer was larger than 1 byte in size. This
return value may have corrupted other memory locations or have been corrupted
itself by other functions or interrupt routines.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect pointer size calculated
for duplicated function's return value (XC8-461)</span></b><span lang=EN-US> If
a function returning a pointer was duplicated because it was called from more
than one call graph, there were instances where the size of the pointer
returned by the function were incorrect.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inlined code crashes (XC8-804)</span></b><span
lang=EN-US> If code that was inlined (specified </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>inline)</span></span></span><span
lang=EN-US>contained more than one jump or more than one call to the same
destination label, then only the first jump or call instruction was fixedup to
use the new inlined label. If the execution path in the inlined code took any
of the latter jump or call paths, this would have caused execution to crash.
This issue has been corrected and inlined functions may contain multiple jumps
or calls to the same destination label.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Failure to load ELF file in MPLAB
X IDE (XC8-784)</span></b><span lang=EN-US> If </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> functions where used in a program, the ELF files produced may not
have loaded into the Windows version of MPLAB X IDE.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't find space for zero bytes
message (XC8-800)</span></b><span lang=EN-US> The use of some </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>bit</span></span></span><span
lang=EN-US> SFRs on 16F1xxx enhanced PIC devices (for example </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>SEG43COM3</span></span></span><span
lang=EN-US> on the 16F1947) may have resulted in a compiler error indicating
that it couldn't find space for zero bytes.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing errata workaround NOP
instructions (XC8-803)</span></b><span lang=EN-US> The assembler failed to
insert a NOP instruction at the entry point of an assembly function defined for
PIC18 devices that suffers from the FETCH or 4000 errata issues.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>5.28.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.20</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad conditional code (XC8-640)</span></b><span
lang=EN-US> An error in an assembler optimization that dealt with a
bit-test-and-skip instructions and FSR manipulations caused the sense of some
conditional control statements to be inverted.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Phase errors (XC8-590, XC8-691,
XC8-49)</span></b><span lang=EN-US> The assembler optimizer was removing
redundant page selection instructions, but other parts of the assembler where
not taking this into account. This created a mismatch in expected and actual sizes
of some jump instructions which led to phase errors being produced. This issue
affected hand-written and compiler-generated assembly code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Absolute function placement
(XC8-203)</span></b><span lang=EN-US> The address specified for functions made
absolute was rounded down to the nearest 0x10 value. So, for example, if you
attempted to place a function at address 0x56, it was actually located at
address 0x50. This only affected programs compiled for PIC18 devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Missing errata NOP instructions
(XC8-692)</span></b><span lang=EN-US> The assembler was not correctly adding in
NOP instructions that form part of the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>fetch</span></span></span><span
lang=EN-US> errata workarounds for some PIC18 devices. (See the user's guide </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ERRATA</span></span></span><span
lang=EN-US> option section for more information.) Delay routines that required
these instructions were known to run too fast. A consequence of this fix is
that code size will increase for devices that require the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>fetch</span></span></span><span
lang=EN-US> errata workarounds.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong UINT24_MAX value (XC8-565)</span></b><span
lang=EN-US> The value for this </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>&lt;stdint.h&gt;</span></span></span><span
lang=EN-US> macro was higher by 1 than it should have been.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad variable access after calls
(XC8-694)</span></b><span lang=EN-US> The compiler was, on occasion, placing a
bank selection instruction before the call to a routine. This bank selection
was not properly being tracked and may have resulted in incorrect access of
objects once in the called function.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assertion failure using --ROM or
--RAM options (XC8-517)</span></b><span lang=EN-US> When attempting to
reserving memory that was outside your target device's on-chip memory, these
options may have caused an assertion failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Invalid access via pointer
(XC8-643)</span></b><span lang=EN-US> In some situations, the compiler was not
detecting that the upper TBLPTR register was being changed from its assumed
state. As a result, code that dereferenced a pointer with both RAM and ROM
targets may have corrupted this register and triggered a subsequent failure in
the code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembler crash with bad options
(XC8-510)</span></b><span lang=EN-US> If options were passed directly to the
assembler application but no file names were present, the assembler issued an
error and continued processing. The error produced in this situation is now a
fatal error to prevent the crash. This issue would have only affected users
driving the assembler directly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assembler crash when specifying
functions as inline (XC8-589)</span></b><span lang=EN-US> In some instances,
when a function was declared </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> the assembler crashed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code message associated with unused objects (XC8-636)</span></b><span
lang=EN-US> In cases where a pointer was not used but was assigned the address
of an object, this message may have been emitted. Optimizations associated with
such code are now restricted and the message will not be issued.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Parser crash with enumerated types
(XC8-637)</span></b><span lang=EN-US> The parser may have crashed when scanning
code associated with enumerated types. This may have been associated with
taking the address of enumerated objects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Qualifiers silently ignored for
local objects (XC8-670)</span></b><span lang=EN-US> Objects which are local to
a function (including </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>auto</span></span></span><span
lang=EN-US> and static local objects) cannot be qualified as </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>far</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>near</span></span></span><span
lang=EN-US>. The compiler was not indicating that the specifier was being
ignored. A warning is now issued for such definitions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Absolute addresses silently
ignored for local objects (XC8-652)</span></b><span lang=EN-US> Objects which
are local to a function (including </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>auto</span></span></span><span
lang=EN-US> and static local objects) cannot be made absolute. The compiler was
not indicating that the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>@</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__at()</span></span></span><span
lang=EN-US> construct was being ignored. A warning is now issued for such
definitions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Linear memory allocation of
objects (XC8-501)</span></b><span lang=EN-US> Absolute objects that specified a
linear memory address may not have been allocated correctly if the object's
equivalent banked addresses mapped into the common memory. This only affected
enhanced mid-range devices and objects that were not large enough to be
automatically allocated to linear memory. The compiler now correctly allocates
these objects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Identical case label values in a
switch statement (XC8-493)</span></b><span lang=EN-US> The compiler was not
detecting the use of more than one identical </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>case</span></span></span><span
lang=EN-US> label value inside a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>switch()</span></span></span><span
lang=EN-US> statement. This is now correctly identified and will trigger an
error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>__</span></b><b><i><span lang=DE
style='mso-ansi-language:DE'>DEVICENAME</span></i><span lang=EN-US>__ not
defined (XC8-659)</span></b><span lang=EN-US> This predefined macro was not
being defined by the compiler. This is now defined unconditionally.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Procedural abstraction of in-line
assembly code (XC8-660)</span></b><span lang=EN-US> The assembler optimizer was
performing procedural abstraction on assembly code that was placed in-line with
C code. The optimizer should not perform <i>any</i> optimization of in-line
assembly code. The optimizer has been prevented from performing these
optimizations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>BSR register not recognized by
regsused pragma (XC8-663)</span></b><span lang=EN-US> Any attempt to list the
BSR register in the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>regsused</span></span></span><span
lang=EN-US> pragma would have resulted in an error. This has been corrected and
this register may now be used with this pragma for those devices that implement
this register.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Allocation of PIC18 far variables
(XC8-582)</span></b><span lang=EN-US> In some instances, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>far</span></span></span><span
lang=EN-US>-qualified variables may have been linked at address 0, not in the
memory defined as the far RAM.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Indexing array with constant
expression failure (XC8-648)</span></b><span lang=EN-US> With enhanced
mid-range devices only, any operation that involved adding a integer constant
to an address (typically this will be an array access with a constant integer
index) may have caused subsequent code to fail. Such code was not correctly
reporting its use of WREG.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Initialization of large objects on
enhanced mid-range device (XC8-672)</span></b><span lang=EN-US> Initialization
of large objects (such as arrays or structures) that contained a pointer may
not have been assigned the appropriate values by the runtime startup code. This
only affected PIC16F1xxx devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Uninitialized const objects not
assigned zero (XC8-553)</span></b><span lang=EN-US> If </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> objects were not initialized, they were not being automatically
assigned the value 0 by the compiler. These objects had no memory reserved for
them at all and this may have resulted in them appearing to overlap with other </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> objects. This is now corrected; any </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> object that does not have an initial value is implicitly assigned 0
by the compiler. </span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assertion failure reserving RAM
(XC8-662)</span></b><span lang=EN-US> In some instances, reserving RAM when
using any non-enhanced mid-range part using the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--RAM</span></span></span><span
lang=EN-US> option would result in an assertion failure<span
style='mso-spacerun:yes'>  </span></span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>hi &gt;= lo</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Integers allowed with specifiers
(XC8-549)</span></b><span lang=EN-US> The integer constants usable with
specifiers such as </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__at()</span></span></span><span
lang=EN-US> were limited to 16-bit values. These values can now be specified as
32-bit values.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Multiply defined symbols (XC8-516)</span></b><span
lang=EN-US> If code used the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__section()</span></span></span><span
lang=EN-US> specifier with variables, there may have been symbols contained in
the runtime startup code that were defined more than once, producing an error.
(Such symbols might be </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>clear_ram</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>clrloop</span></span></span><span
lang=EN-US>, for example.) This duplication has been corrected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>__mediumconst symbol undefined
(XC8-621)</span></b><span lang=EN-US> In some circumstances, particularly when
using the peripheral library, the compiler may have produced an undefined
symbol error for </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__mediumconst</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Functions not inlined (XC8-521)</span></b><span
lang=EN-US> When a function qualified as </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>inline</span></span></span><span
lang=EN-US> was called from </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>main()</span></span></span><span
lang=EN-US>, it was never inlined and a regular call was made. Inlining should
now take placed for any suitably qualified function called from </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>main()</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect return instruction
(XC8-525)</span></b><span lang=EN-US> For some baseline devices (most notably the
12F529T39A and 12F529T48A), the compiler may have attempted to use the
non-existent </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>RETURN</span></span></span><span
lang=EN-US> instruction instead of a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>RETLW</span></span></span><span
lang=FR style='mso-ansi-language:FR'> instruction.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Partial access to ID locations
(UDBC-678)</span></b><span lang=EN-US> The compiler did not allow access to the
entire ID location for devices that implement this memory as being 14-bits wide
(e.g., the PIC16F1503). This has been corrected and you may now program all the
bits of these ID locations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code failure accessing absolute
objects straddling a bank (XC8-601)</span></b><span lang=EN-US> The wrong bank
may have been selected when accessing absolute objects that straddle a bank
boundary. Code may have failed when accessing the addresses in banks following
that of the bank of the object's base address.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>5.29.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.12</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compile times and crash (XC8-127)</span></b><span
lang=EN-US> A sorting issue related to pointer variables may have significantly
increased the compilation time of projects. Not all projects were affected by
this issue. This issue may also have caused the code generator to run out of
memory, or even crash in some situations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compile times (XC8-498)</span></b><span
lang=EN-US> A further issue affecting compilation times was corrected. This
issue affected the assembler when </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--ASMLIST</span></span></span><span
lang=EN-US> was used. (This option is on by default when using the IDE.)</span></p>

<p class=DescriptiveList><b><span lang=DA style='mso-ansi-language:DA'>Installer
operation</span></b><span lang=EN-US> The installer program was not correctly
setting the write permissions for some files. This was reported on Windows XP,
but may have affected other platforms.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bank selection issue (XC8-494)</span></b><span
lang=EN-US> In an expression such as: </span></p>

<p class=Code0><span lang=ES-TRAD>A = B + C; </span></p>

<p class=DescriptiveListcont><span lang=EN-US style='font-family:"Times Roman"'>where
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>A</span></span></span><span lang=EN-US style='font-family:"Times Roman"'>
and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>C</span></span></span><span lang=EN-US
style='font-family:"Times Roman"'> are </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>unsigned</span></span></span><span
lang=EN-US style='font-family:"Times Roman"'> 16-bit objects in different banks
and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>B</span></span></span><span lang=EN-US
style='font-family:"Times Roman"'> is an </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>unsigned
char</span></span></span><span lang=EN-US style='font-family:"Times Roman"'>, a
bank select instruction may have been omitted resulting is the wrong value
being assigned to the destination variable.</span><span lang=EN-US
style='font-family:"Times Roman";mso-fareast-font-family:"Times Roman";
mso-bidi-font-family:"Times Roman"'><o:p></o:p></span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>5.30.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.11</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compilation times (XC8-441)</span></b><span
lang=EN-US> Large projects, particularly those targeting PIC18 devices, may
have experienced increased compilation times. This was due to the compiler
processing more symbols. A new option has been added, and enabled by default,
to limit the symbol list. The new option is </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--PARSER</span></span></span><span
lang=EN-US>. See the New Features section for more information.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Looping around
pointGraphComplete() Error (XC8-442)</span></b><span lang=EN-US> A
non-deterministic pointer-related issue was causing this error to be printed,
and terminating compilation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Debugging absolute objects
(XC8-447)</span></b><span lang=EN-US> Some SFRs and absolute addressed objects
residing in RAM would appear as being located in program memory during a MPLAB
X or v8 debugging session. The content of these values would, thus, be
incorrect. Absolute symbols should now appear to be located in their correct
memory space and their contents shown correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Parsing of config pragma arguments
(XC8-452)</span></b><span lang=EN-US> The parsing of arguments to the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#pragma
config</span></span></span><span lang=EN-US> directive was erratic when it came
to quoted arguments. The quote character ' </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&quot;</span></span></span><span
lang=EN-US> ' is now a token delimiter and you may quote the arguments to this
pragma, e.g. </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&quot;WDTEN=ON&quot;</span></span></span><span
lang=EN-US> Doing so will avoid any macro substitutions by the preprocessor. If
you have defined macros for </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>ON</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>OFF</span></span></span><span lang=EN-US>
or any other token used by the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>config</span></span></span><span
lang=EN-US> pragma, consider quoting the pragma arguments or moving the pragmas
to a module that is not exposed to your macros.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect access of array of
strings (XC8-454)</span></b><span lang=EN-US> Code which used a variable to
access an element of a string array may have failed when the index was
non-zero.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unsupported short long message
using CCI (XC8-429)</span></b><span lang=EN-US> When using the CCI, a warning
may have been issued indicating that the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>short
long</span></span></span><span lang=EN-US> type was not supported. The header
files that referenced this type have been updated and use a plain long type
when compiling for the CCI.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined symbols with bitwise
operations (XC8-424)</span></b><span lang=EN-US> Some bitwise operations, for
example </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>|</span></span></span><span lang=EN-US>
or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>&amp;</span></span></span><span lang=EN-US>, when used in functions
that were in the interrupt call graph, may have produced code that contained
references to undefined temporary symbols. Such symbols would look similar to </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>i2u49_41</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code with printing floats (XC8-108)</span></b><span
lang=EN-US> For some placeholders associated with </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>float</span></span></span><span
lang=EN-US> types, a Can</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code error may have been triggered with (</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>s</span></span></span><span
lang=EN-US>)</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>printf</span></span></span><span
lang=EN-US>. This has been corrected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Detection of incomplete types
(XC8-109)</span></b><span lang=EN-US> The parser was not detecting definitions
using incomplete types, for example:</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>typedef struct
foo foo_t;<span style='mso-spacerun:yes'>  </span>// where foo has not been
defined</span></p>

<p class=Code0><span lang=ES-TRAD>foo_t x;</span></p>

<p class=DescriptiveListcont><span lang=EN-US style='font-family:"Times Roman"'>Code
which is defined in such a way will now trigger an error from the parser.</span><span
lang=EN-US style='font-family:"Times Roman";mso-fareast-font-family:"Times Roman";
mso-bidi-font-family:"Times Roman"'><o:p></o:p></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code for library string routines (XC8-413)</span></b><span
lang=EN-US> Some string library functions may have caused &quot;Can</span><span
dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;
mso-ascii-font-family:"Times Roman";mso-hansi-font-family:"Times Roman"'><span
dir=RTL></span>’</span><span lang=EN-US>t Generate Code errors&quot;. These
have been adjusted to ensure correct compilation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assignment to volatile bytes
(XC8-427)</span></b><span lang=EN-US> In some operating mode, when assigning
'1' to a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>volatile</span></span></span><span
lang=EN-US> byte variable, it may not have been updated atomically (with one
write rather than clear and increment instruction). This problem did not affect
absolute objects and may have only caused runtime problems if the byte was
accessed from main code and interrupt.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>--ROM option</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--ROM</span></span></span><span
lang=EN-US> option was not processing its arguments correctly which may have
resulted in it not reserving the memory specified.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>5.31.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.10</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Using far with Functions<span
style='mso-spacerun:yes'>  </span>(XC8-337)</span></b><span lang=EN-US> If the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>far</span></span></span><span
lang=EN-US> qualifier was used with functions, it confused the compiler into
thinking the function identifier was that of a variable destined for RAM. This
may have triggered an error, if no far memory was defined, or caused a runtime
code failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Non-functional --ADDRQUAL
option<span style='mso-spacerun:yes'>  </span>(XC8-293)</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>reject</span></span></span><span
lang=EN-US> suboption of this option was not working correctly for PIC10/12/16
device. The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>require</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>request</span></span></span><span
lang=EN-US> suboptions were not working correctly for PIC18 devices. This
option should now work as expected for all devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Conversion of integer to bit-field
(XC8-353)</span></b><span lang=EN-US> The compiler was treating single-bit
bit-fields as a boolean rather than an integer quantity when it came to
assignment. Code that assigned a byte or larger integer to a single-bit
bit-field may have failed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code for Duplicated Functions (XC8-358)</span></b><span
lang=EN-US> The compiler may have issued Can</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code error messages in situations where a function was
duplicated in interrupt and main-line code and this function used pointers.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Handling of incomplete types
(XC8-374)</span></b><span lang=EN-US> The parser was producing incorrect type
information where a type used in a declaration was, at that point, incomplete,
e.g. if you used a structure tag in a declaration, but that tag had not been
defined. The code generator would subsequently crash if such incomplete type
information was encountered. types should always be defined before they are
used, but the compiler will no longer crash on such situations.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Testing of volatile bytes
(XC8-388)</span></b><span lang=EN-US> The code that tested </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>volatile</span></span></span><span
lang=EN-US> bytes variables for (in)equality was using a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>MOVF
x,f</span></span></span><span lang=EN-US> instruction. This was not in keeping
with the spirit of the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>volatile</span></span></span><span
lang=EN-US> keyword and could also play havoc with certain registers, such as
the TMR0 register, on some baseline devices, such as the 10F222, which require
a read delay after being written. This code sequence is no longer used and
access of SFRs will be well behaved.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Pointer assignment failure
(XC8-342, XC8-343)</span></b><span lang=EN-US> In some circumstances,
assignment of a structure member address to a pointer may have resulted in an
incorrect destination pointer size being determined by the compiler. This would
have resulted in subsequent pointer dereferences being invalid. This problem
was detected only with assignments to pointer parameters as part of a function
call, but could have potentially occurred elsewhere.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Pointer access failure with
duplicated functions (XC8-377)</span></b><span lang=EN-US> If a function that
has a pointer parameter is called from main-line and interrupt code (i.e. it is
duplicated by the code generator), the compiler may have issued a &quot;looping
around allocGlobals&quot;, or &quot;Can</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code&quot; error message. In other situations, the code
may have compiled, but accesses to the pointer may have been incorrect. The
issue could have affected any device with interrupts.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined btemp symbol (XC8-371)</span></b><span
lang=EN-US> In some circumstances, exacerbated by the use of a debugger and
devices with small amounts of RAM, the internal compiler symbol </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>btemp</span></span></span><span
lang=EN-US> may not have been defined and an error results. This symbol is now
correctly defined.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect access of high program
memory (XC8-363)</span></b><span lang=EN-US> The compiler was not correctly
setting the TBLPTRU register for accesses of absolute-addressed </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>const</span></span></span><span
lang=EN-US> data located above 0xFFFF in PIC18 program memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect configuration bit/user
ID settings (XC8-385)</span></b><span lang=EN-US> Attempts to program the
configuration bit or user ID settings may have failed due to a sorting bug that
may have resulted in the bits being programmed in the wrong order. The issue
was inconsistent, but could affect all devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Improved error relating to IDLOC
(XC8-384)</span></b><span lang=EN-US> If non-hex digits were used in for any
nibble in the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>IDLOC()</span></span></span><span
lang=EN-US> macro a confusing error was issued. A new message (#1436) has been
created for this situation. </span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>5.32.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.01</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Looping around allocGlobals error
(XC8-318)</span></b><span lang=EN-US> This error may have been triggered, but
is not specific to any particular code sequence. The compiler has been updated
to ensure this trigger will not result in this error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Access of char arrays (XC8-304)</span></b><span
lang=EN-US> If the index expression used with an array of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>char</span></span></span><span
lang=EN-US> consists of a non-constant expression (e.g. a plain variable) from
which is subtracted a constant (e.g. </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>myArray[idx-1]</span></span></span><span
lang=EN-US>), then the index calculation may have been incorrect and the wrong
element accessed. This issue mostly affected PIC18 devices and arrays no larger
than a bank. It may have affected enhanced mid-range parts with array sizes
larger than 256 bytes. The issue has been resolved for all devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code jumps to wrong location
(XC8-295)</span></b><span lang=EN-US> If the assembler optimizer is enabled,
assembly code that directly wrote to the program counter may have been
abstracted which may have caused a jump to the wrong location and code failure.
C code affected would produce a lookup table of some description, but it
unlikely that C code would trigger this issue. Hand-written assembly would only
be affected if the option to optimize assembly source files was enabled.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Duplicated SFRs (XC8-319)</span></b><span
lang=EN-US> Some SFR bit-field structures had duplicate entries in the
device-specific header files and have been removed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bit objects on baseline devices</span></b><span
lang=EN-US> Uninitialized global bit objects may not have been zeroed for
baseline devices, and in some instances, the generated startup code may have
corrupted other memory locations or caused the device to restart.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Call graph inconsistencies</span></b><span
lang=EN-US> The call depth of some functions was not correctly indicated in the
call graph shown in the assembly list file. The total amount of auto, parameter
and temporary variable usage was also incorrectly displayed for some functions
in the call graph.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wide bit-fields in header files
(XC8-289)</span></b><span lang=EN-US> Some header files were being generated
with SFR bit-fields that were wider than a byte. This is not allowed by the
compiler. Such definitions are no longer contained in the header files.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong external memory access
(XC8-286)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--EMI</span></span></span><span
lang=EN-US> options was not correctly being processed and this may have meant
that access to external memory may have been incorrect. Only several PIC18
devices have such memory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Error on assembly directives after
including header file (XC8-285)</span></b><span lang=EN-US> After including the
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>xc8.inc</span></span></span><span lang=EN-US> header file into assembly
code, some assembly directives, e.g. the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>DS</span></span></span><span
lang=EN-US> directive, may have generated an error. This was due to SFR names
conflicting with the directive's name. The header files will on longer use any
SFR name that conflicts with a directive. This will mean that SFR names may not
always match those listed in the device data sheet.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad access at start of function
(XC8-94)</span></b><span lang=EN-US> The code at the beginning of function
could have accessed the wrong address (bank) for a variable if the compiled
stack was built up over multiple banks and WREG was used to pass a function
argument. </span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect RAM ranges with 12F1501
(XC8-274)</span></b><span lang=EN-US> The RAM ranges associated with this
device did not reserve the memory from 50-6F. Allocation of user-defined
objects to this memory may have caused code failure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad results with 24-bit
expressions (XC8-227)</span></b><span lang=EN-US> The code generated for some
arithmetic and bitwise operations involving 24-bit integers were missing some
necessary bank selections which may have generated wrong results.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compiler crash with conditional
operator (XC8-117)</span></b><span lang=EN-US> Assigning a pointer the result
of an expression using nested conditional statements could have caused the
compiler to crash for PIC18 devices.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad results with long arithmetic
(XC8-241)</span></b><span lang=EN-US> The results of some long arithmetic
expressions may not be correctly assigned due to a bank selection bug.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Build errors in MPLAB X IDE
(XC8-101, XC8-104)</span></b><span lang=EN-US> Source file paths that contained
spaces were being written to the dependency files without the spaces escaped.
This resulted in these files containing erroneous targets and dependancies
which may have resulted in incorrect builds. In addition, the preprocessor
would generating a dependency file for assembly modules incorrectly assuming
that the intermediate file to have a &quot;.p1&quot; extension and not
&quot;.obj&quot; resulting in the same behavior.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash with compiler-domain symbols
(XC8-18)</span></b><span lang=EN-US> User-define variables and functions should
never start with an underscore character as such symbols are in the compiler's
domain. Inappropriate use of these symbols in a program, however, was leading
to a compiler crash. The crash no longer will occur; however, you should
continue to avoid using symbols beginning with an underscore.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>MPLAB X IDE plugin</span></b><span
lang=EN-US> Previously the XC8 MPLAB IDE plugin overwrote the HI-TECH Universal
Plugin such that the universal plugin no longer appeared in the toolsuite list.
This is no longer the case. The XC8 v1.01 installer will install and reinstate
both the XC8 and universal plugins so that they will both be selectable from
the IDE.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad if() code (XC8-58)</span></b><span
lang=EN-US> In some instances the assembler optimizer would incorrectly move </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>MOVLW</span></span></span><span
lang=EN-US> instructions which could cause some logical expressions (such as
those used by if statements) to be incorrectly evaluated.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Not honoring message disable
(XC8-62)</span></b><span lang=EN-US> When compiling for PIC10/12/16 targets the
assembler was not honoring the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--MSGDISABLE</span></span></span><span
lang=EN-US> option. Thus, it was impossible to disable warning messages
produced by this application. This issue did not affect other applications or
any application when compiling for PIC18 targets.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad call to subtype() Error
(XC8-73)</span></b><span lang=EN-US> In some instances where a function has a
pointer type as its first parameter but the function is never called, a
&quot;bad call to typeSub()&quot; error may occur.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect optimizations involving
carry bit (XC8-77)</span></b><span lang=EN-US> The assembly optimizer may have
incorrectly moved instructions that set the carry bit above other code that
would subsequently clear carry before it was being used.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad optimization of indirect
access (XC8-95)</span></b><span lang=EN-US> In some situations, expressions
with the form </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>*ptr = *ptr op A;</span></span></span><span
lang=EN-US> may fail. In particular it is the optimization of
assignment-operations when the destination is an indirect access which can lead
to incorrect results.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad right shift code (XC8-105)</span></b><span
lang=EN-US> In some instances for PIC18 targets, the code generated for
right-shift a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>signed long</span></span></span><span
lang=EN-US> operand would access the wrong file registers, giving an incorrect
result.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Memory reservation using
--CODEOFFSET (XC8-230)</span></b><span lang=EN-US> This option should have
reserved memory in all linker classes associated with program memory. It was
only reserving this memory from the CODE class but not for other classes that
hold const objects. This was unlikely to cause issues since const objects are
typically not allocated to low address; however, all classes are now adjusted.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Badly optimized if() code (XC8-75)</span></b><span
lang=EN-US> The assembler optimizer may have procedurally abstracted code that
erroneously contained return-style instructions. This may have caused code such
as </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>if()</span></span></span><span lang=EN-US> statements to be ignored and
fail. This has now been corrected.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=FR style='mso-ansi-language:FR'>Redundant
MOVLP instructions (XC8-49)</span></b><span lang=SV style='mso-ansi-language:
SV'> Redundant </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>MOVLP</span></span></span><span
lang=EN-US> instructions were being produced for some call sequences for Enhanced
mid-range devices.</span></p>

<p class=Heading2noTOC style='margin-left:32.4pt;text-indent:-32.4pt;
mso-list:l5 level2 lfo2'><![if !supportLists]><span lang=DE style='mso-fareast-font-family:
Helvetica;mso-hansi-font-family:"Arial Unicode MS";mso-bidi-font-family:Helvetica'><span
style='mso-list:Ignore'>5.33.<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span></span><![endif]><span
lang=DE>Version 1.00</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning on -B option
(XC8-11)</span></b><span lang=EN-US> If compiling under MPLAB v8, in some
instances a warning indicating that the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-B</span></span></span><span
lang=EN-US> option was defunct was issued. This option is indeed defunct, but
the compiler has been adjusted so that this is not produced when compiling
under the IDE.</span></p>

<p class=DescriptiveList><b><span lang=NL style='mso-ansi-language:NL'>Parser
crash (PICC18-618)</span></b><span lang=EN-US> If an unexpected attribute was
used with function definitions, e.g. </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>__attribute__ ((const))</span></span></span><span
lang=EN-US>, the parser crashed instead of giving an error. This has now been
corrected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Parser crash (PICC-684, PICC-688,
PICC18-596, PICC18-607, PICC18-616, PICC18-619, PICC18-620, PICC18-621)</span></b><span
lang=EN-US> In some circumstances, the parser would crash when encountering
illegal or unusual source code. This has been seen with code that accesses some
structure members, passing malformed arguments to functions, or with
non-prototyped (K&amp;R) function definitions. Changes to the parser should
prevent the application crashing.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad code associated with negation
(PICC-652)</span></b><span lang=EN-US> In certain cases, negating a 16-bit
integer may have overwritten WREG. This has been corrected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash on structure with no members
(PICC-597)</span></b><span lang=EN-US> If a structure was defined that had no
members, the parser application crashed. This has been rectified.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Arrays of structures in MPLAB not
watchable (PICC-544, PICC18-593)</span></b><span lang=EN-US> In some
circumstances, the watch window in MPLAB IDE v8 would show elements of a
structure array correctly. Changes have been made to the compiler output to
correct this.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Redirecting function using psect
pragma (PICC-514)</span></b><span lang=EN-US> There were instances where use of
the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#pragma psect</span></span></span><span
lang=EN-US> would not appear to work as the name of the psect being redirected
was changing as a result of psect merging by the assembler optimizer. A new
system of identifying mergable and splittable psects was introduced, which will
assist in reducing this problem.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>MPLAB IDE popup about source code
using #include (PICC18-565, PICC18-566)</span></b><span lang=EN-US> If you are
using any of the printf family of functions, an MPLAB IDE popup may have
appeared warning that &quot;The project contains source files that use the #include
directive from within a function to include source code&quot;. Although this
would not have affected normal debugging operations in this particular
instance, the trigger for message has been adjusted so that this message will
no longer be produced.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Zeroing of config bits
(PICC18-600)</span></b><span lang=EN-US> If you used the PIC18 pragma to
program only the lower byte of a configuration location, the compiler may have
zeroed the upper byte rather than use the default configuration value. Ideally,
all configuration words should be specified in your programs or the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--RUNTIME
</span></span></span><span lang=EN-US>option to program the device with the
default config words should be enabled. However, this zeroing of he upper byte
will no longer occur.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined symbol with empty loops
(PICC18-524)</span></b><span lang=EN-US> The compiler an remove some condition
code if the state of variables used in the controlling expressions are know. In
some instances, where the true or false statements were an empty loop (e.g. </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>while</span></span></span><span
lang=EN-US>), the compiler may have deleted a label that was still being
referenced by other code. This would have produced an undefined symbol, which
might look something like </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>l9</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash with undefined functions
(PICC18-532)</span></b><span lang=EN-US> If function that were not defined were
assigned as the target of a function pointer, the compiler may have crashed.
This crash has been fixed and now the linker will report the symbols as being
undefined, as expected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Errors indicated in unused files
(PICC-428)</span></b><span lang=EN-US> When an error indicating a variable is
too large is emitted, the name of the file that contained the variable
definition may have indicated a source file that was not in the project, such
as a library file.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Assignment to structure ignored
(PICC-433)</span></b><span lang=EN-US> In situations where an assignment is
made to a structure is followed by an assignment to a bitfield within that
structure, the initial assignment may be removed. This would only occur in PRO
mode. This has now been fixed and the compiler notes the distinction between
the objects accessed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compiler crash and old library
modules (PICC-573)</span></b><span lang=EN-US> The compiler may have crashed is
some library modules were used from the SOURCES directory of the compiler. This
directory no longer include files from non-OCG compilers, as they are not
compatible to OCG compilers and will not compile.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undefined ?Fake symbol (PICC-589,
PICC-581)</span></b><span lang=EN-US> This error may have occurred for code
that indirectly called a external function defined in assembly code or was part
of another build. Only functions that returned a value in memory would be
affected by this issue. The error is no longer produce, but you are required to
define a symbol that represents the memory location where the return value will
be stored. See the User's Guide on External Functions for more information.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Linker crash with assembler
optimizers (PICC-648)</span></b><span lang=EN-US> If the assembler optimizers
(psect merging) were enabled, in some situations the linker would crash if a
psect was removed but was still referenced by a directive. This has been
corrected and all assembly optimizations may be employed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Compiler crash with bad memory
ranges (PICC-608)</span></b><span lang=EN-US> If a memory range was specified
using the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--RAM</span></span></span><span
lang=EN-US> option, or its equivalent in MPLAB IDE, and that range was
excessively large, the compiler my have produced an assertion failure. In such
situations, the compiler now prints a more informative error.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Cromwell error with MCPxxxx
targets (PICC-642)</span></b><span lang=EN-US> If compiling for an MCP device,
an error relating to the &quot;prefix list&quot; would have been triggered.
This has been corrected and compilation can be performed for these devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Cromwell crash (PICC-493)</span></b><span
lang=EN-US> Cromwell may have crashed if encountering information generated
from static bit objects that are absolute.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash with malformed warning
pragma (PICC-610)</span></b><span lang=EN-US> If the message number(s) were
omitted from the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#pragma warning disable</span></span></span><span
lang=EN-US> directive, the compiler crashed. An error is now emitted if this
situation is encountered.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Read of write-only registers
(PICC-658)</span></b><span lang=EN-US> If an attempt was made to read a
Baseline device write-only register, e.g. </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>TRIS</span></span></span><span
lang=EN-US>, the compiler would produce a Can</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code error message. A more specific message is now
produced alerting you to the offending operation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code (PICC-683, PICC-499)</span></b><span lang=EN-US> The
compiler was not able to generate code for some expressions involving logical
or bitwise operation on </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>bit</span></span></span><span
lang=EN-US> objects. This has been corrected.</span></p>

<p class=DescriptiveList><b><span lang=NL style='mso-ansi-language:NL'>Prototype
for eeprom_write (PICC-675)</span></b><span lang=EN-US> The prototype for </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>eeprom_write</span></span></span><span
lang=EN-US> incorrectly stated that this function returned a value. This was
not correct and the prototype now indicates a return type of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>void</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>CLRWDT appearing in _delay output
(PICC-460)</span></b><span lang=EN-US> For some delay values, the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_delay</span></span></span><span
lang=EN-US> in-line function for PIC18 targets only produced </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>CLRWDT</span></span></span><span
lang=EN-US> instructions as part of the delay. This has been corrected and a </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>NOP</span></span></span><span
lang=EN-US> is used instead. For PIC18 targets, you have a choice of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>_delay</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_delaywdt</span></span></span><span
lang=EN-US> to implement in-line delays, which do not use and use,
respectively, the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>CLRWDT</span></span></span><span
lang=EN-US> instruction as part of the delay.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Optimization of volatile bits
(PICC-606)</span></b><span lang=EN-US> The compiler was not generating the
appropriate information to prevent the assembler optimizer from optimizing
access to volatile bit objects. Although the code would have been functionally
correct, subsequent optimizations may have caused runtime failures. This
correct information is now generated and volatile bit access will not be
optimized unexpectedly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>vprintf and vsprintf linker errors
(PICC-524, PICC-619)</span></b><span lang=EN-US> Trying to use either of these
functions may have resulted in the undefined symbols </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__doprint</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_vprintf</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>_vsprintf</span></span></span><span
lang=EN-US>. These routines are now fully supported in the libraries and can be
called.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Upper bound of mktime (PICC18-126)</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>mktime</span></span></span><span
lang=EN-US> function had a upper limit of the year 2020; higher values would
return incorrect results. This limit has now been extended to the year 2038.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad call to subtype with regsused
pragma (PICC18-392)</span></b><span lang=EN-US> If using the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>regsused</span></span></span><span
lang=EN-US> pragma for a function before the definition of that function, this
error occurred. This has been corrected and the pragma can be used at any point
in the source code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Looping around allocGlobals error
(PICC-570)</span></b><span lang=EN-US> This error may have occurred in some
situations, particularly when </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>NULL</span></span></span><span
lang=EN-US> pointers were being assigned in the source code. This has been
corrected.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Read of wrong array element
(PICC-542)</span></b><span lang=EN-US> When reading a const array using a
constant index, in some situations, the wrong element may be read. This bug did
not affect array access using a variable or other expression as the index.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Memory allocation</span></b><span
lang=EN-US> An improved memory allocation scheme is used when variables are
qualified as being in a particular bank or near and the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ADDRQUAL</span></span></span><span
lang=EN-US> option is set to require. This will reduce the likelihood of Can't
find space errors from the linker.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Code generator crash with
undefined functions (PICC18-532)</span></b><span lang=EN-US> If a function
pointer was assigned the address of a function that is defined in external
code, the code generator may have crashed. External functions might include
those defined in assembly source code. This only affect PIC18 targets. </span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code errors with nested structures (PICC-628)</span></b><span
lang=EN-US> This error may have occurred for code that accessed bit-fields
within structures that themselves were members of other structures.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No stack allocated to function
error (PICC-611, PICC-485, PICC-416, PICC-637)</span></b><span lang=EN-US> This
error is now unlikely to be triggered by code. It was most likely to occur with
complex expressions, particularly involving floating-point arithmetic.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code errors with short long types (PICC-632)</span></b><span
lang=EN-US> Some assignment operations on short long types, e.g. </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>|=</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&amp;=</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>*= </span></span></span><span lang=EN-US>etc
may have triggered a &quot;Can</span><span dir=RTL></span><span lang=AR-SA
dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code&quot; error when compiling for baseline or mid-range
parts. The ability to generate code for such expressions has been enhanced.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Parser crash with bad identifiers
(PICC-622)</span></b><span lang=EN-US> The parser (</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>p1</span></span></span><span
lang=EN-US>) may have crashed if certain keywords were used as a variable identifier,
e.g. if you were to try to define a variable with the name </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>eeprom</span></span></span><span
lang=EN-US>. A crash may also have occurred if reserved keywords were used in
place of variables in expressions. The crash has been corrected, but variable
identifiers cannot be reserved keywords.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Symbol defined more than once for
in-line assembly (PICC-563)</span></b><span lang=EN-US> If the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>REPT</span></span></span><span
lang=EN-US> macro was specified in in-line assembly, the code generator was
generating additional labels multiple times. This triggered an error indicating
the symbol was defined more than once. This has been corrected and </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>REPT</span></span></span><span
lang=EN-US> can safely be used in in-line assembly code.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>RAM ranges for 16(L)F1507</span></b><span
lang=EN-US> The RAM ranges available when selecting this device extended
further than the physical device implementation. This has been corrected.</span></p>

<span lang=EN-US style='font-size:12.0pt;font-family:"Arial Unicode MS",sans-serif;
color:black;mso-style-textoutline-type:none;mso-style-textoutline-outlinestyle-dpiwidth:
0pt;mso-style-textoutline-outlinestyle-linecap:flat;mso-style-textoutline-outlinestyle-join:
bevel;mso-style-textoutline-outlinestyle-pctmiterlimit:0%;mso-style-textoutline-outlinestyle-dash:
solid;mso-style-textoutline-outlinestyle-align:center;mso-style-textoutline-outlinestyle-compound:
simple;mso-ansi-language:EN-US;mso-fareast-language:EN-GB;mso-bidi-language:
AR-SA'><br clear=all style='mso-special-character:line-break;page-break-before:
always'>
</span>

<p class=DescriptiveList><span lang=EN-US><o:p>&nbsp;</o:p></span></p>

<h1 style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l5 level1 lfo2'><a
name="Toc_KnownIssues"><![if !supportLists]><span style='mso-hansi-font-family:
"Arial Unicode MS"'><span style='mso-list:Ignore'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-US style='mso-fareast-font-family:
"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:
EN-US'>Known Issues</span></a></h1>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>The following
are limitations in the compiler's operation. These may be general coding
restrictions, or deviations from information contained in the user's manual.
The bracketed label(s) in the title are that issue's identification in the
tracking database. This may be of benefit if you need to contact support. Those
items which do not have labels are limitations that describe </span><i><span
lang=IT style='mso-ansi-language:IT'>modi operandi</span></i><span lang=EN-US
style='mso-ansi-language:EN-US'> and which are likely to remain in effect
permanently.</span></p>

<h3 style='margin-left:29.9pt;text-indent:-29.9pt;mso-list:l5 level2 lfo14'><![if !supportLists]><span
lang=EN-US style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>6.1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>MPLAB X IDE Integration</span></h3>

<p class=DescriptiveList><b><span lang=EN-US>MPLAB X IDE update</span></b><span
lang=EN-US> If you encounter the MPLAB X IDE error </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>The
program file could not be loaded</span></span></span><span lang=EN-US> for
projects that use the compiler</span><span dir=RTL></span><span lang=AR-SA
dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s (default) ELF output, please update your IDE to at least version
2.30. There was an issue in the ELF loader that triggered this error and prevented<span
style='mso-spacerun:yes'>  </span>projects from being debugged, but which has
been resolved. If you cannot update the IDE, switch your project settings to
COFF output.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>MPLAB IDE integration</span></b><span
lang=EN-US> If Compiler is to be used from MPLAB IDE, then you must install
MPLAB IDE prior to installing Compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>MPLAB X IDE library builds</span></b><span
lang=EN-US> See the </span><span class=Hyperlink0><span lang=EN-US
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><a href="#LibraryBuilds"><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>New
Features</span></span></a></span></span><span lang=EN-US> section for
information pertaining to debugging library files.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong referenced values shown
(XC8-1758)</span></b><span lang=EN-US> Where a structure contains a member that
is a pointer to another structure and that other structure contains a function
pointer member, the IDE watch view might incorrectly show the values contained
in the other structure.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong parameter location shown
(XC8-1565)</span></b><span lang=EN-US> In some cases, where the definitions of
a function's</span><span lang=PT style='mso-ansi-language:PT'> parameters </span><span
lang=EN-US>were spread over multiple lines and the argument of the first
parameter was originally stored in WREG, the debug information relating to the
location of the parameter might have been incorrect and the IDE indicated an
address </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>WREG0 (CPU)</span></span></span><span
lang=EN-US>, even if the parameter was moved to memory. As a workaround,
consider placing the name of the function and its first parameter on the same
source line, or use the option </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>-Xxc8 -W--dwarf-use-loclists=never</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Debugging problems when using of
macro for header name (XC8-1438)</span></b><span lang=EN-US> When including a
header file whose name is specifier as a preprocessor macro, can result in
incorrect line number information in the debugging files which would affect the
ability to set breakpoints and step code. This issue only affects projects
using the P1 parser.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't find space with absolutes
(XC8-1327)</span></b><span lang=EN-US> In projects that used absolute addressed
objects in program memory, a &quot;cannot find space&quot; error might have
occurred, as a result of the</span><span lang=FR style='mso-ansi-language:FR'>
assembler</span><span lang=EN-US>'s</span><span lang=NL style='mso-ansi-language:
NL'> psect-merging </span><span lang=EN-US>optimization. In such case, the
issue can be worked-around by either disabling psect-merging (i.e. using the
option </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-Wa,-no_merge</span></span></span><span
lang=EN-US>) or by reserving the program memory occupied by those objects
(using </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-mrom</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-mreserve</span></span></span><span
lang=EN-US>).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>CMF error for maverick code
(XC8-1279)</span></b><span lang=EN-US> Code or data that is not explicitly
placed into a psect will become part of the default (unnamed) psect. Projects
containing assembly code that were placed in such a psect caused the compiler
to emit the error &quot;(1437) CMF error: no psect defined for the line&quot;.
As a workaround, place the assembly code in an appropriate psect. Using the
default psect at any time is not recommended.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Use of XC8 in MPLAB IDE v8 is now
deprecated (XC8-1228)</span></b><span lang=EN-US> As of MPLAB XC8 v1.34, the
use of MPLAB 8 IDE is deprecated, and the installation of the DLL files that
the IDE used to interface to XC8 are removed from the compiler installer.</span></p>

<p class=DescriptiveList><a name=ElfLimitations></a><b><span lang=EN-US>ELF
debugging issues</span></b><span lang=EN-US> Not all aspects of the ELF/DWARF
debugging file have been implemented. MPLAB XC8 version 1.30 implements DWARF
version 3 which allows for improved debugging. Only MPLAB X IDE supports ELF,
but you must ensure that you are using a version of this IDE that can process
ELF files produced by the compiler. The following are some of the issues that
may not work as expected with this release of the compiler.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><b><span
lang=EN-US>Unused variables (XC8-747)</span></b><span lang=EN-US> will not be
identified in the ELF file.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><b><span
lang=EN-US>Constant propagation optimizations (XC8-744)</span></b><span
lang=EN-US> may affect which variables are watchable in the IDE or the values
that are indicated in the Watch window.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><b><span
lang=EN-US>In-line C functions (XC8-748)</span></b><span lang=EN-US> will not
be debuggable.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><b><span
lang=EN-US>Procedural abstraction (XC8-749)</span></b><span lang=EN-US> will
affect the operation of breakpoints.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><b><span
lang=EN-US>External memory variables (MPLABX-2004, MPLABX-2255, and others)</span></b><span
lang=EN-US> will not be displayed correctly in the Watch window.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>The <i>type</i> name (as opposed to the object's name) that appears
for an anonymous structure or union typedef or an enumerated typedef will be
shown as &quot;.&quot; in the Watch window.</span></p>

<p class=BodyBullet style='margin-left:27.0pt;text-indent:-9.0pt;mso-list:l4 level2 lfo10'><![if !supportLists]><span
lang=EN-US style='mso-hansi-font-family:"Arial Unicode MS";position:relative;
top:1.0pt;mso-text-raise:-1.0pt'><span style='mso-list:Ignore'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>The <i>type</i> name displayed for an identifier that was declared
using a typedef type will be the identifier's semantic type rather than its typedef
type in the Watch window.</span></p>

<h3 style='margin-left:29.9pt;text-indent:-29.9pt;mso-list:l5 level2 lfo14'><![if !supportLists]><span
lang=EN-US style='mso-fareast-font-family:Helvetica;mso-hansi-font-family:"Arial Unicode MS";
mso-bidi-font-family:Helvetica'><span style='mso-list:Ignore'>6.2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span></span><![endif]><span
lang=EN-US>Code Generation</span></h3>

<p class=DescriptiveList><b><span lang=PT style='mso-ansi-language:PT'>Incorrect</span><span
lang=EN-US>ly formatted zero output (XC8-2703)</span></b><span lang=EN-US> The
C99 standard library formatted printing functions will attach a hexadecimal </span><span
lang=ES-TRAD style='mso-ansi-language:ES-TRAD'>prefix (</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>0x</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>0X</span></span></span><span lang=EN-US>)
when the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#</span></span></span><span lang=EN-US>
flag is used with hexadecimal format specifiers (</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></span><span
lang=EN-US> or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>X</span></span></span><span lang=EN-US>)
and when printing a value of zero, for example </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>%#x</span></span></span><span
lang=EN-US> should print </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>0</span></span></span><span
lang=EN-US>, not </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>0x0</span></span></span><span lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Char type not flexible (XC8-2668)</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-fsigned-char</span></span></span><span
lang=EN-US> (or </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>-fno-unsigned-char</span></span></span><span
lang=EN-US>) options current are silently ignored. The type of a plain char is
unsigned char. The values for the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>CHAR_MAX</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>CHAR_MIN</span></span></span><span
lang=EN-US> macros reflect this.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Build error on complex structures
(XC8-2663)</span></b><span lang=EN-US> When building code that contains
structures that have other structures as members, the compiler might give a
conflicting declaration error if those structures are declared in multiple
modules and the order in which they appear differs.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Indescribable error messages
(XC8-2656)</span></b><span lang=EN-US> On selecting a new DFP that was released
after the compiler version being used, there might appear error messages that
state that an error/warning as been generated but that no description is
available. In such situations the DFP is triggering a message that the compiler
is not aware of but which will become available in a future release.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>strtod incorrectly sets endptr
(XC8-2652)</span></b><span lang=EN-US> In instances where a subject string for
conversion by </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>strtod()</span></span></span><span
lang=EN-US> contains what appears to be a floating-point number in exponential
format and there is an unexpected character after an </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>e</span></span></span><span
lang=EN-US> character, then the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>endptr</span></span></span><span
lang=EN-US> address, if provided, will point to the character after the &nbsp;</span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>e</span></span></span><span
lang=EN-US> and not the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>e</span></span></span><span
lang=EN-US> itself. For example:</span></p>

<p class=Code0><span lang=ES-TRAD>strtod(&quot;100ex</span><span lang=EN-US
style='mso-ansi-language:EN-US'>y</span><span lang=RU style='mso-ansi-language:
RU'>&quot;</span><span lang=EN-US style='mso-ansi-language:EN-US'>, &amp;endptr</span><span
lang=ES-TRAD>)</span><span lang=EN-US style='mso-ansi-language:EN-US'>;</span></p>

<p class=DescriptiveListcont><span lang=EN-US>will result in </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>endptr</span></span></span><span
lang=EN-US> pointing to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></span><span
lang=EN-US> character.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>strtof returns zero for
hexadecimal floats (XC8-2626)</span></b><span lang=EN-US> The library functions
</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>strtof()</span></span></span><span lang=EN-US> et al and </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>scanf()</span></span></span><span
lang=EN-US> et al, will always convert a hexadecimal floating-point number that
does not specify an exponent to zero. For example:</span></p>

<p class=Code0><span lang=ES-TRAD>strtof(</span><span lang=EN-US
style='mso-ansi-language:EN-US'>&quot;0x1&quot;</span><span lang=ES-TRAD>,
&amp;endptr);</span></p>

<p class=DescriptiveListcont><span lang=EN-US>will return the value 0, not 1.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Zero divide by zero (XC8-2602)</span></b><span
lang=EN-US> The result of a floating-point expression that uses runtime values
of zero divided by zero returns Infinity, not NaN.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>IDE doesn't show all instructions
(XC8-2597)</span></b><span lang=EN-US> Only the first instruction of a
multi-instruction assembly pseudo-instruction (e.g. </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>BANKSEL</span></span></span><span
lang=EN-US>) might appear in the MPLAB </span><span lang=DA style='mso-ansi-language:
DA'>X </span><span lang=EN-US>IDE disassembly view. This does not affect the
generates code or how it executes.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Crash with structure
initialization (XC8-2595, XC8-2594)</span></b><span lang=EN-US> The compiler
might crash or give a too many initializers error with code that attempts to
initialize an array of structures with designated initializers, for example:</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>static const
struct</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>  </span>{ uint8_t id; const char * name; uint8_t
voltage_threshold; }</span></p>

<p class=Code0><span lang=PT style='mso-ansi-language:PT'>struct_params[] = {</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>  </span></span><span lang=PT style='mso-ansi-language:
PT'>[1] =</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'><span
style='mso-spacerun:yes'>    </span></span><span lang=PT style='mso-ansi-language:
PT'>{4u, &quot;test&quot;, 128u},</span></p>

<p class=Code0><span lang=ES-TRAD>};</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Mis-printed floating-point values
(XC8-2586)</span></b><span lang=EN-US> The printf functions might sometime
print a colon character instead of a digit for floating-point values, for
example printing </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>0.0:</span></span></span><span
lang=EN-US> instead of </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>0.10</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Capital L modifier ignored
(XC8-2582)</span></b><span lang=EN-US> The printf length modifier </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>L</span></span></span><span
lang=EN-US> applied to a floating-point conversion specifier will be ignored by
the compiler. To ensure the conversion takes place use a small </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>l</span></span></span><span
lang=EN-US> (el) instead. Any warnings that result can be safely ignored.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Structure copy failure (XC8-2579) </span></b><span
lang=EN-US>Code in PIC18 projects that assigns a structure might fail when the
source structure is in program memory and access via a pointer.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Recursive calls incorrectly
indicated (XC8-2451)</span></b><span lang=EN-US> The compiler might indicate
that a function has been recursively called when indirectly called via a
pointer that is also used to hold other function addresses at other times in
the program. The compiler considers the targets of a pointer over the entire
lifetime of the pointer object, which might fool the compiler into believing
that recursion has taken place.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Not this array size (XC8-2445)</span></b><span
lang=EN-US> Const-qualified arrays of bytes with a size of exactly 0x8000 will
trigger an error indicating that the array dimension must be larger than zero.
Larger or smaller arrays will compiler correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect tracking of double
indirection (XC8-2444)</span></b><span lang=EN-US> When a pointer variable is
assigned an address indirectly via another pointer, the assigned address might
not be correctly tracked by the compiler, resulting in an incorrect pointer
size being used.<span style='mso-tab-count:1'>    </span></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad array access (XC8-2286)</span></b><span
lang=EN-US> For projects that target PIC18 devices and that use expressions
reading large arrays that can span multiple banks, array accesses using a
constant array index might have used the wrong instruction. Using a pointer to
the array (rather than the array identifier) and the same index will work correctly.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Read of volatile objects not
performed (XC8-2273)</span></b><span lang=EN-US> If the true and false
statements for an </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>if()</span></span></span><span
lang=EN-US> statement are identical, the compiler will try to simplify such
situations. If the controlling expression inside the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>if()</span></span></span><span
lang=EN-US> accesses seemingly redundant </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>vo<span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>latile</span></span></span></span><span lang=EN-US> objects, code to
access to these objects might be incorrectly removed.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Indirect function calls not
encoded (XC8-2003)</span></b><span lang=EN-US> In some cases, the compiler is
not detecting that function pointers that are members of a structure have been
initialized, and it will fail to encode subsequent function calls made using
that pointer. The compiler might or might not issue a warning regarding the
missed calls.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Wrong CRC write order (XC8-1997)</span></b><span
lang=EN-US> The multi-byte CRCDATA register must be written in a specific byte
order to ensure that the data is latched correctly. There is no guarantee that
this will take place for C code that writes to this register as a whole. Code
should instead write to the individual registers within CRCDATA (T, U, H, and L
registers) in the intended order.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad tail merge optimization
(XC8-1978)</span></b><span lang=EN-US> In rare circumstances where two or more
PIC18 code sequences immediately before a jump to the same destination contain
instructions that differ only in the banked/common access bit, these sequences
might be incorrectly merged into one.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Undetected Division by zero in
assembly (XC8-1960)</span></b><span lang=EN-US> Division of a literal constant
by zero is not being detected in the assembler, which may cause the assembler
to crash.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Right shift wrong (XC8-1941)</span></b><span
lang=EN-US> Right-shifting a </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>signed long</span></span></span><span
lang=EN-US> variable by 16 bits can omit the sign extension, producing an
incorrect result.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect pointer arithmetic
(XC8-1940)</span></b><span lang=EN-US> Incrementing to a pointer to an array,
e.g. </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>char (*ptr) [32]</span></span></span><span
lang=EN-US>,<span style='mso-spacerun:yes'>  </span>should add a value being
the size of the array. Instead, it is adding the size of the array's elements.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Static function diagnostics
(XC8-1938)</span></b><span lang=EN-US> Depending on the order of the input C
files, one may or may not get an </span><span dir=RTL></span><span lang=AR-SA
dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman";mso-ansi-language:AR-SA'><span
dir=RTL></span>“</span><span lang=EN-US>undefined symbol” error for a function
defined as </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>static</span></span></span><span
lang=EN-US> in one file but used and declared </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>extern</span></span></span><span
lang=EN-US> in another, but undefined at link-time.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Incorrect array sizes (XC8-1934)</span></b><span
lang=EN-US> When compiling C99 programs, the compiler may make incorrect
assumptions about the size of pointers used to define the size of an auto
array.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inappropriate and missing types
(XC8-1886)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>&lt;stdint.h&gt;</span></span></span><span
lang=EN-US> header used by C99 builds defines (</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>u</span></span></span><span
lang=EN-US>)</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>int_fast16_t</span></span></span><span
lang=EN-US> as being types with a size of 4 bytes, whereas a type with a width
of 2 bytes would be the fastest types. The (</span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>u</span></span></span><span
lang=EN-US>)</span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>int_fast24_t</span></span></span><span
lang=EN-US> types are missing entirely.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Case ranges ignored (XC8-1855)</span></b><span
lang=EN-US> When the Clang front end is used for building, it silently ignores
case ranges in </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>switch</span></span></span><span
lang=EN-US> statements and matches only the initial case value in the range.
Clang is used when building for the C99 standard.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Unsupported directive (XC8-1817)</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>DDW</span></span></span><span lang=EN-US>
assembly directive is not supported.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning for absolute
functions (XC8-1809)</span></b><span lang=EN-US> Functions that are made
absolute might trigger the warning </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>(1262) object &quot;*&quot; lies
outside available data space</span></span></span><span lang=EN-US> when
compiling for devices that have vectored interrupts, e.g. a PIC18F25K42. This
warning can be ignored.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Excessive consumption of decimals
(XC8-1790)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>A</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>E</span></span></span><span lang=EN-US>, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>F</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>G</span></span></span><span lang=FR
style='mso-ansi-language:FR'> conversion specifiers </span><span lang=EN-US>in
the C99 </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>scanf()</span></span></span><span
lang=EN-US> functions will consume </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>p</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>P</span></span></span><span lang=EN-US>
characters in decimal numbers.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Special float strings not recognized
(XC8-1789)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>A</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>E</span></span></span><span lang=EN-US>, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>F</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>G</span></span></span><span lang=FR
style='mso-ansi-language:FR'> conversion specifiers </span><span lang=EN-US>in
the C99 </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>scanf()</span></span></span><span
lang=EN-US> functions do not recognize strings representing infinity and NaN
(not a number).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Character set conversions not
supported (XC8-1785)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>%[]</span></span></span><span
lang=EN-US> character-set conversion </span><span lang=FR style='mso-ansi-language:
FR'>specifiers</span><span lang=EN-US> in the C99 </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>scanf()</span></span></span><span
lang=EN-US> functions are not supported.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>White space not counted (XC8-1784)</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>%n</span></span></span><span lang=FR
style='mso-ansi-language:FR'> conversion-specifier </span><span lang=EN-US>in
the C99 </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>scanf()</span></span></span><span
lang=EN-US> fails to count white-space in the input string.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Error not set for string
conversions (XC8-1782)</span></b><span lang=EN-US> The C99 </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>strtod()</span></span></span><span
lang=EN-US> family of functions (including </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>strtof()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>strtold()</span></span></span><span
lang=EN-US>) do not set </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>errno</span></span></span><span
lang=EN-US> to </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>ERANGE</span></span></span><span
lang=EN-US> for values outside the representable range.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Scanning hex floating-point
(XC8-1781)</span></b><span lang=EN-US> The C99 </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>scanf()</span></span></span><span
lang=EN-US> </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>a</span></span></span><span lang=EN-US>, </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>e</span></span></span><span
lang=EN-US>, </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>f</span></span></span><span lang=EN-US>,
and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>g</span></span></span><span lang=EN-US>
conversion specifiers will only convert the leading zero of any hexadecimal
floating-point constant. This results in an assignment of zero to the function
arguments which receive the converted input, and the remainder of the string
from the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>x</span></span></span><span lang=EN-US>
character is scanned according to the format string.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>fmod() and zero (XC8-1641)</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>fmod()</span></span></span><span
lang=EN-US> library function is non-compliant when second argument is zero.
Currently, it returns the first argument in this case. It should return either
trigger a domain error or return zero.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can't generate code for floating-point
operations (XC8-1613, XC8-1614)</span></b><span lang=EN-US> Expression that
perform operations on the results of two complex floating-point expression,
e.g.<span style='mso-spacerun:yes'>  </span>use of the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>||</span></span></span><span
lang=EN-US> operator in the following</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>(( ! *pd2) - d2) || (((f1)-- )
&gt;= *pf3))</span></span></span><span lang=EN-US>, might trigger can't
generate code error messages.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>String literal expressions
(XC8-1610)</span></b><span lang=EN-US> Accessing a character of a string
literal might produce an error message when using the initialize an object,
e.g. </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>volatile int a = &quot;abc&quot;[1];</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Too many side-effects (XC8-1587)</span></b><span
lang=EN-US> Incorrect PIC18 code is being generated for expressions involving
compound assignment operators and where the lefthand side has side-effects. In
this cases, the side-effects of the lefthand side will occur twice.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>IDLOC value truncation (XC8-1570)</span></b><span
lang=EN-US> The IDLOC values for some devices, e.g. PIC18F8723, are currently
limited to being 4-bits wide. The truncation can be removed by editing the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>.cfgdata</span></span></span><span
lang=EN-US> file (located in the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>dat</span></span></span><span
lang=EN-US> directory) corresponding to your device, and changing the mask
value, bolded in this example:</span></p>

<p class=Code0><span lang=ES-TRAD>CWORD:200000:<b>F</b>:FF:IDLOC0</span></p>

<p class=DescriptiveListcont><span lang=EN-US>to the required value, for
example:</span></p>

<p class=Code0><span lang=ES-TRAD>CWORD:200000:<b>FF</b>:FF:IDLOC0</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Register over-writes with
recursive functions (XC8-1563)</span></b><span lang=EN-US> In some binary
expressions or sub-expressions located in a recursively-called function, the
compiler may allocate a static register to one sub-tree that might be clobbered
by a recursive function call made in the other sub-tree. In this case, the
compiler will now emit a warning message to indicate that the register might be
corrupted.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bad intermediate code from
typedefs (XC8-1560)</span></b><span lang=EN-US> In some cases where a member of
a structure has a typedefed type that is used in a previous definition before
the structure, the code generator will emit the error message &quot;bad
intermediate code&quot;. This can possibly be worked-around by ensuring that the
structure is the first definition to use the typedef'd type.</span></p>

<p class=FreeForm style='margin-top:0cm;margin-right:0cm;margin-bottom:10.0pt;
margin-left:28.3pt;text-indent:-1.0cm;tab-stops:28.0pt 56.0pt 84.0pt 112.0pt 140.0pt 168.0pt 196.0pt 224.0pt 252.0pt 280.0pt 308.0pt 336.0pt'><b><span
lang=EN-US style='font-family:"Times Roman";mso-ansi-language:EN-US'>Non-removal
of unused variables (XC8-1480)</span></b><span lang=EN-US style='font-family:
"Times Roman";mso-ansi-language:EN-US'> If a global variable is defined outside
of library code and has had its address taken by a non-library function that is
not called, the variable has memory allocated, even if it has not otherwise
been used.</span><span style='font-family:"Times Roman";mso-fareast-font-family:
"Times Roman";mso-bidi-font-family:"Times Roman"'><o:p></o:p></span></p>

<p class=DescriptiveList><b><span lang=IT style='mso-ansi-language:IT'>Device
oscillator calibration (XC8-1280)</span></b><span lang=EN-US> Oscillator
calibration using </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>--RUNTIME=+config</span></span></span><span
lang=EN-US> will not work with new devices that obtain their calibration
constant from a calibration word stored in flash program memory, such as the
MCP19114/5 devices. Disable this runtime sub-option and refer to the device
data sheet for instructions.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bogus warning of arithmetic
overflow when subtracting (XC8-1270, XC8-1585)</span></b><span lang=EN-US> A
warning regarding an </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>arithmetic overflow in constant
expression</span></span></span><span lang=EN-US> might be issued by the
compiler when building using the C90 standard and the expression contains a
literal subtraction. This warning can usually be ignored. A recent change in
the default wanting level imposed by the MPLAB X IDE has seen this compiler
warning issued more frenetically by the compiler. Building the project with the
C99 standard selected will alleviate the issue entirely.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Inline assembly not output in PRO
mode (XC8-1268)</span></b><span lang=EN-US> In PRO mode, inline assembly code
enclosed in </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#asm</span></span></span><span lang=RU
style='mso-ansi-language:RU'> - </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>#endasm</span></span></span><span
lang=EN-US> is simply not output by the code generator. The presence of any
instruction in an </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>asm(&quot;&quot;);</span></span></span><span
lang=EN-US> statement before the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>#asm</span></span></span><span
lang=EN-US> assembly results in the correct behaviour. Alternatively, you can
place the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#asm</span></span></span><span
lang=EN-US> block inside braces </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>{ }</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Warning on conversion to shorter
type (XC8-1246)</span></b><span lang=EN-US> In some instances when building
using the C90 standard, the compiler might issue a (752) conversion to shorter
data type warning where this is not expected. Building using the C99 language
standard will alleviate this issue entirely.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Printing spaces to width
(XC8-1214)</span></b><span lang=EN-US> When using a </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>%d</span></span></span><span
lang=EN-US> placeholder and a width specifier, the C90 implementation of </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> function did not print leading spaces in the output when the
printed value had few characters that the specified width, so for example the
format string </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&quot;%04.2d&quot;</span></span></span><span
lang=EN-US> might print &quot;</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>77</span></span></span><span
lang=EN-US>&quot; instead of &quot;</span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='mso-spacerun:yes'> 
</span>77</span></span></span><span lang=EN-US>&quot;. The C99 </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> function is not affected by this issue.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Functions called from in-line
assembly(XC8-1180)</span></b><span lang=EN-US> The code generator will not be
able to identify a C function called only from in-line assembly code if the
definition for that C function is placed before the assembly call instruction
in the source file. Placing the function definition after the call is
acceptable. If the function cannot be identified, no code will be generated for
the function and the linker will issue undefined symbol errors.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Printf modifiers 'h' and 'L'
ignored (XC8-1166)</span></b><span lang=EN-US> </span><span lang=PT
style='mso-ansi-language:PT'>A </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> conversion specification that uses the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>h</span></span></span><span
lang=EN-US> or L modifiers will result in the specification itself being
printed, e.g. </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>%hx</span></span></span><span lang=EN-US>
will print </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>hx</span></span></span><span lang=EN-US>.
This does not affect the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> in the C99 libraries.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Messy cleanup (XC8-1087)</span></b><span
lang=EN-US> Running an XC8 ports-support uninstaller might leave behind several
directories in the compiler</span><span dir=RTL></span><span lang=AR-SA
dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>s main directory.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Redefinition of intrinsic
functions (XC8-1061)</span></b><span lang=EN-US> It not possible to replace a
standard library function which uses the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>intrinsic</span></span></span><span
lang=EN-US> pragma with a user-defined function with the same name. Examples of
standard library functions that might use this pragma are: all of the inline
delay functions (such as </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>_delay()</span></span></span><span
lang=EN-US>), </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>memcpy()</span></span></span><span
lang=EN-US>, and </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__va_start()</span></span></span><span
lang=EN-US>.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span></b><b><span
lang=IT style='mso-ansi-language:IT'>t generate code error (XC8-1055)</span></b><span
lang=IT> </span><span lang=EN-US>Interrupt code which indirectly calls a
function and uses the return value of this call as a parameter to another
function has been seen to trigger can</span><span dir=RTL></span><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t generate code errors. Split the statement so the call is made and
the result assigned to a temporary variable. Pass the temporary variable to the
subsequent call.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Accessing flash data memory
(XC8-1047)</span></b><span lang=EN-US> None of the supplied flash library
routines or macros associated with flash support those devices that utilize
flash data memory. Devices without flash data memory are not affected by this
limitation.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Persistent memory check functions
(XC8-1029)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>persist_check()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>persist_validate()</span></span></span><span
lang=EN-US> functions that were provided previously do not work with the new
memory allocations schemes used by the compiler. These functions have been
removed from the libraries and are not available for use.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t generate code errors (XC8-1022)</span></b><span lang=EN-US> In
Free and PRO modes, code which indirectly accesses nested structure members
might produce can</span><span dir=RTL></span><span lang=AR-SA dir=RTL
style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";
mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=IT style='mso-ansi-language:IT'>t generate code errors.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Indirect function calls (XC8-1000)</span></b><span
lang=EN-US> For midrange and baseline devices, there is a limit on the number
of functions that can be called indirectly via a pointer. Typically this will
be about 120 functions, but this limit is dependent on where the functions are
linked. Code might crash if this limit is exceeded. This does not affect
enhanced mid-range devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Multiple-assignment expressions
(XC8-995)</span></b><span lang=EN-US> The compiler can crash when compiling a
statement that involves multiple assignments and the assignment operands have
side effects (such as referencing </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>volatile</span></span></span><span
lang=EN-US> objects), e.g. </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>a = b = c = d = e =...</span></span></span><span
lang=EN-US> Break up offending statements into many small ones.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Fedora path variable (XC8-474)</span></b><span
lang=EN-US> The path variable will not be updated when non-root users install
the compiler under Fedora. If you wish for the compiler driver to be in your
path, update your path variable manually after installation of the compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>No static local specifiers
(XC8E-313)</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__near</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__far</span></span></span><span
lang=EN-US> object specifiers cannot be used with </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>static</span></span></span><span
lang=EN-US> local objects.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Absolute variables in access bank
memory (XC8E-138)</span></b><span lang=EN-US> PIC18 projects that locate
absolute variables in the lower addresses of the access bank RAM might trigger
a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>can’t find space error</span></span></span><span lang=EN-US> for the
psect </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>temp</span></span></span><span
lang=EN-US> in class </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>COMRAM</span></span></span><span
lang=EN-US>. If a project must define absolute objects, try locating them at a
higher address.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Absolute initialized variables
(XC8E-63)</span></b><span lang=EN-US> Variables which are absolute and which
are not const cannot be initialized. The following example will not generate an
error, but will not work as expected. Define the variable as absolute and
initialize it in main-line code.</span></p>

<p class=Code0><span lang=EN-US style='mso-ansi-language:EN-US'>unsigned int
varname @ 0x0200=0x40; // will not work as expected</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Bank qualifiers (XC8E-62)</span></b><span
lang=EN-US> Only </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>bank<span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>x</span></span></span></span><span
lang=EN-US> qualifiers for data banks 0 through 3 are supported by the
compiler. (These are enabled using the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>--ADDRQUAL</span></span></span><span
lang=EN-US> option). Use absolute variables to place objects in other banks, if
required.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>In-line assembly and labels
(XC8E-61)</span></b><span lang=EN-US> Functions which are called from both
main-line and interrupt code should not contain in-line assembly that defines
assembly labels. Such labels will not be assigned the usual duplication prefix
(</span><span class=Code><span lang=EN-US style='font-size:11.0pt;color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'><span
style='color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'>i1</span></span></span><span lang=EN-US>, </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>i2</span></span></span><span
lang=EN-US> etc) and will result in multiply-defined symbol errors.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Switch strategies (XC8E-20)</span></b><span
lang=EN-US> There is only one possible switch strategy currently available for
PIC18 devices. It uses the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>space</span></span></span><span
lang=EN-US> switch type. New strategies will be introduced in future compiler
versions so that PIC18 devices have similar options to the baseline/mid-range
devices.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Stack overflow (XC8E-11)</span></b><span
lang=EN-US> When the managed stack is used (the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>stackcall</span></span></span><span
lang=EN-US> suboption to the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>--RUNTIME</span></span></span><span
lang=EN-US> option is enabled) in some situations the stack may overflow
leading to code failure. With this option enabled, if a function call would
normally overflow the stack, the compiler will automatically swap to using a
lookup table method of calling the function to avoid the overflow. However, if
these functions are indirect function calls (made via a pointer) the compiler
will actually encode them using a regular call instruction and when these calls
return, the stack will overflow. The managed stack works as expected for all
direct function calls, and for all indirect calls that do not exceed the stack
depth.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Time zones</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>&lt;time.h&gt;</span></span></span><span
lang=EN-US> library functions assume GMT and do not support local time zones,
thus </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>localtime()</span></span></span><span
lang=EN-US> will return the same time as </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>gmtime()</span></span></span><span
lang=EN-US>, for example.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Haven't got time</span></b><span
lang=EN-US> The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>time()</span></span></span><span
lang=EN-US> function is implemented for PIC devices, but always returns -1 (as
described in the <i>Microchip Unified Standard Library Reference Guide</i> for
situations when the target environment cannot determine the current time).</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Non-reentrant library functions</span></b><span
lang=EN-US> Some library functions, for example the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>printf()</span></span></span><span
lang=EN-US> family of functions, are not reentrant and may fail if multiple
instances of them are active at the same time. This limitation exists even if
you specify a reentrant stack setting.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Redirecting bss variables</span></b><span
lang=EN-US> If the </span><span class=Code><span lang=EN-US style='font-size:
11.0pt;color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>#p<span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>ragma psect</span></span></span></span><span
lang=EN-US> directive is used to redirect objects that normally reside in any
of the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>bss</span></span></span><span lang=EN-US>
psects, the runtime startup code will not be aware of this and will clear the
memory that the variables would have ordinarily be allocated. At such an early
stage, this should not affect program execution, but if all bss objects are
redirected, an undefined symbol error will occur with PIC18 devices. Consider
using the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__section()</span></span></span><span
lang=EN-US> specifier.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Installer execution</span></b><span
lang=EN-US> On both macOS and Linux, it is necessary to run the installer as
root or with superuser privileges (using </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sudo</span></span></span><span
lang=EN-US>, for example). If the installer is started without superuser
privileges on macOS, it will exit and display an informative message. In the
same situation on Linux, the installer will fail when it attempts to write to
directories for which it does not have adequate rights. The messages displayed
will relate to these access failures. For correct operation, run the installer
via </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>sudo</span></span></span><span
lang=EN-US>, or as the root user, on these systems.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>PATH environment variable</span></b><span
lang=EN-US> On Linux systems, the installer, by default, updates the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PATH</span></span></span><span
lang=EN-US> environment variable to include paths to the new executables being
installed. If the installer is run via </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sudo</span></span></span><span
lang=EN-US>, the default action will update the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PATH</span></span></span><span
lang=EN-US> variable of the user executing the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>sudo</span></span></span><span
lang=EN-US> command. If the installer is run by root, the installer will only
update root's </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>PATH</span></span></span><span
lang=EN-US> variable, and not the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>PATH</span></span></span><span
lang=EN-US> variables of ordinary users. If installing the compiler while
logged in as root, a better choice is to update <i>all</i> user </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PATH</span></span></span><span
lang=EN-US> variables. Alternatively, skip the step to update the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PATH</span></span></span><span
lang=EN-US> variable in the installer, and manually update the </span><span
class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>PATH</span></span></span><span
lang=EN-US> variables of users who will use the software.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>PIC12F529T39A/T48A memory
restrictions</span></b><span lang=EN-US> The previous limitation which
restricted memory to the first 4 RAM banks for user-defined variables has been
lifted. Note, however, that the compiler will not allow you to define objects
that span multiple banks on these devices.<b><o:p></o:p></b></span></p>

<p class=DescriptiveList><b><span lang=EN-US>Psect pragma and data psects</span></b><span
lang=EN-US> As described in the manual, the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>#pragma
psect</span></span></span><span lang=EN-US> directive should not be used to
move initialized variables that would normally be located in one of the 'data'
psects. The initial values in program memory and space for the variables
themselves in RAM must be built up in a strict order. Using this pragma will
violate this assumption. Consider using the </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__section()</span></span></span><span
lang=EN-US> specifier.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Copying compiler header files</span></b><span
lang=EN-US> The header files shipped with the compiler are specific to that
compiler version. Future compiler versions may ship with modified header files.
If you copy compiler header files into your project, particularly if you modify
these files, be aware that they may not be compatible with future versions of
the compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Can</span></b><span dir=RTL></span><b><span
lang=AR-SA dir=RTL style='font-family:"Arial Unicode MS",sans-serif;mso-ascii-font-family:
"Times Roman";mso-hansi-font-family:"Times Roman"'><span dir=RTL></span>’</span><span
lang=EN-US>t Generate Code messages</span></b><span lang=EN-US> When compiling
for baseline devices, some complex expressions may cause compile-time errors
(712) Can</span><span dir=RTL></span><span lang=AR-SA dir=RTL style='font-family:
"Arial Unicode MS",sans-serif;mso-ascii-font-family:"Times Roman";mso-hansi-font-family:
"Times Roman"'><span dir=RTL></span>’</span><span lang=EN-US>t Generate Code
for this expression. The expressions should be simplified to work around this.
This may require the use of additional variables to store intermediate results.
This is most likely with long integer or floating-point arithmetic and
particularly those devices with less than 4 bytes of common memory available.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Option and tris register access</span></b><span
lang=EN-US> For baseline devices, the </span><span class=Code><span lang=EN-US
style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'>OPTION</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>TRIS</span></span></span><span
lang=EN-US> registers must be written as a byte. Writing individual bits is not
supported.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>PIC17 support</span></b><span
lang=EN-US> PIC 17 devices (for example, 17C756) are not supported by this
compiler.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Configuration words</span></b><span
lang=EN-US> (PIC18 parts only) The new device support introduced in PICC18
v9.80 will not automatically program the default values into the configuration
words when no value is specified. If your project does not program all
configuration words explicitly, select the option &quot;Program the device with
default config words&quot; in the Linker tab.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>Specifying configuration words on
PIC10/12/16 devices</span></b><span lang=EN-US> The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__PROG_CONFIG()</span></span></span><span
lang=EN-US> and </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__CONFIG()</span></span></span><span
lang=EN-US> macros can be used to specify the configuration words on
PIC10/12/16 devices as well as PIC18 devices, but only when building for C90.
The </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
mso-style-textfill-fill-alpha:100.0%'>__PROG_CONFIG()</span></span></span><span
lang=EN-US> macro must use a literal constant argument; you cannot use the
configuration setting symbols with this macro. The </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>__CONFIG()</span></span></span><span
lang=EN-US> macro must only use the predefined configuration setting symbols
and you may not not use a literal value with this macro.</span></p>

<p class=DescriptiveList><b><span lang=EN-US>rfPIC12 parts</span></b><span
lang=EN-US> To use the rfPIC12 parts, for example the rfPIC12C509AF, you will
need to specify to the compiler a part name in a format similar to RF509AF, for
example. You can also use an alias like 12C509AF, for example. The full part
name is also not appropriate when compiling from MPLAB IDE.</span></p>

<p class=FreeForm><span style='font-family:"Times Roman";mso-fareast-font-family:
"Times Roman";mso-bidi-font-family:"Times Roman"'><o:p>&nbsp;</o:p></span></p>

<h1 style='margin-left:18.0pt;text-indent:-18.0pt;mso-list:l5 level1 lfo2'><a
name="Toc_MicrochipErrata"><![if !supportLists]><span style='mso-hansi-font-family:
"Arial Unicode MS"'><span style='mso-list:Ignore'>7.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span></span><![endif]><span lang=EN-US style='mso-fareast-font-family:
"Arial Unicode MS";mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:
EN-US'>Device</span></a><span style='mso-bookmark:Toc_MicrochipErrata'><span
lang=IT style='mso-fareast-font-family:"Arial Unicode MS";mso-bidi-font-family:
"Arial Unicode MS";mso-ansi-language:IT'> Errata</span></span></h1>

<p class=FreeForm><span style='font-family:"Times Roman";mso-fareast-font-family:
"Times Roman";mso-bidi-font-family:"Times Roman"'><o:p>&nbsp;</o:p></span></p>

<p class=Body><span lang=EN-US style='mso-ansi-language:EN-US'>For 8-bit PIC
devices, this release of the XC8 compiler recognizes the published silicon
errata issues listed in the table below. Some of these issues have been
corrected and no longer apply in recent silicon revisions. Refer to Microchip's
device errata documents for details on which issues are still pertinent for
your silicon revision. The compiler's chip configuration file records which
issues are applicable to each device. Specific errata workarounds can be
selectively enabled or disabled via the driver's </span><span class=Code><span
lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>-merrata</span></span></span><span
lang=EN-US style='mso-ansi-language:EN-US'> command line option. All these
errata are PIC18 specific, except for the CLOCKSW and BRANCH errata, which
applies to enhanced mid-range devices.</span></p>

<p class=Body><o:p>&nbsp;</o:p></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0 width=623
 style='margin-left:5.4pt;background:#BDC0BF;border-collapse:collapse;
 mso-table-layout-alt:fixed;border:none;mso-border-alt:solid black 1.0pt;
 mso-yfti-tbllook:1184;mso-padding-alt:0cm 5.4pt 0cm 5.4pt;mso-border-insideh:
 1.0pt solid black;mso-border-insidev:1.0pt solid black'>
 <thead>
  <tr style='mso-yfti-irow:0;mso-yfti-firstrow:yes;height:15.5pt'>
   <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
   padding:5.0pt 5.0pt 5.0pt 5.0pt;height:15.5pt'>
   <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
   mso-bidi-font-family:"Arial Unicode MS"'>Name</span></p>
   </td>
   <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
   border-left:none;mso-border-left-alt:solid black 1.0pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;
   height:15.5pt'>
   <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
   mso-bidi-font-family:"Arial Unicode MS"'>Description</span></p>
   </td>
   <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
   border-left:none;mso-border-left-alt:solid black 1.0pt;padding:5.0pt 5.0pt 5.0pt 5.0pt;
   height:15.5pt'>
   <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
   mso-bidi-font-family:"Arial Unicode MS"'>Workaround details</span></p>
   </td>
  </tr>
 </thead>
 <tr style='mso-yfti-irow:1;height:90.5pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:90.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>4000</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:90.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Execution of some flow control
  operations may yield unexpected results when instructions vector code
  execution across the 4000h address boundary.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:90.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Each block of program code is not
  allowed to grow over the 4000h address boundary. Additional NOP instructions
  are inserted at prescribed locations.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:2;height:135.5pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:135.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>FASTINTS</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:135.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>If a high-priority interrupt occurs
  during a two-cycle instruction which modifies WREG, BSR or STATUS, the fast-
  interrupt return mechanism (via shadow registers) will restore the value held
  by the register before the instruction.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:135.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Additional code reloads the shadow
  registers with the correct values of WREG, STATUS and BSR.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:3;height:68.5pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:68.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>LFSR</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:68.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>Using the </span><span class=Code><span lang=EN-US
  style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
  mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'>lfsr</span></span></span><span
  lang=EN-US style='font-family:"Times New Roman",serif;mso-bidi-font-family:
  "Arial Unicode MS";mso-ansi-language:EN-US'> instruction to load a value into
  a specified FSR register may also corrupt a RAM location.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:68.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>The compiler will load FSR registers without using
  the </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
  color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
  100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
  mso-style-textfill-fill-alpha:100.0%'>lfsr</span></span></span><span lang=FR
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:FR'> instruction.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:4;height:105.0pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:105.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>MINUS40</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:105.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Table read operations above the user
  program space (&gt;1FFFFFh) may yield erroneous results at the extreme low
  end of the device’s rated temperature range (-40o C).</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:105.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>Affected library sources employ additional </span><span
  class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
  mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>nop</span></span></span><span
  lang=EN-US style='font-family:"Times New Roman",serif;mso-bidi-font-family:
  "Arial Unicode MS";mso-ansi-language:EN-US'> instructions at pre- scribed
  locations.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:5;height:97.45pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:97.45pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>RESET</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:97.45pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=PT style='font-family:
  "Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:
  PT'>A </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
  color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
  100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
  mso-style-textfill-fill-alpha:100.0%'>goto</span></span></span><span
  lang=EN-US style='font-family:"Times New Roman",serif;mso-bidi-font-family:
  "Arial Unicode MS";mso-ansi-language:EN-US'> instruction placed at the reset
  vector may not execute.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:97.45pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>Additional </span><span class=Code><span lang=EN-US
  style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
  mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'>nop</span></span></span><span
  lang=EN-US style='font-family:"Times New Roman",serif;mso-bidi-font-family:
  "Arial Unicode MS";mso-ansi-language:EN-US'> instruction inserted at reset
  vector if following instruction is </span><span class=Code><span lang=EN-US
  style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
  mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'>goto</span></span></span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:6;height:105.0pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:105.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>BSR15</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:105.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Peripheral flags may be erroneously
  affected if the BSR register holds the value 15, and an instruction is
  executed that holds the value C9h in its 8 least significant bits.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:105.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>Compiler avoids generating </span><span class=Code><span
  lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
  mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movlb
  15</span></span></span><span lang=EN-US style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:EN-US'>
  instructions. A warning is issued if this instruction is detected.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:7;height:97.45pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:97.45pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>DAW</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:97.45pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>The DAW instruction may improperly
  clear the CARRY bit (STATUS&lt;0&gt;) when executed.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:97.45pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>The compiler is not affected by this
  issue.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:8;height:90.5pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:90.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>EEDATARD</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:90.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>When reading EEPROM, the contents of
  the EEDATA register may become corrupted in the second instruction cycle
  after setting the RD bit (EECON1&lt;0&gt;).</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:90.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>The </span><span class=Code><span lang=EN-US
  style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:black;
  mso-style-textfill-fill-alpha:100.0%'><span style='color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'>EEPROM_READ</span></span></span><span
  lang=EN-US style='font-family:"Times New Roman",serif;mso-bidi-font-family:
  "Arial Unicode MS";mso-ansi-language:EN-US'> macro read EEDATA immediately.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:9;height:90.5pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:90.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>EEADR</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:90.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>The result returned from an EEPROM
  read operation can be corrupted if the RD bit is set immediately following
  the loading of the EEADR register.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:90.5pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>The compiler is not affected by this
  issue.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:10;height:65.0pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:65.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>EE_LVD</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:65.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Writes to EEPROM memory may not
  succeed if the internal voltage reference is not set.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:65.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>No workaround applied</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:11;height:65.0pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:65.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>FL_LVD</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:65.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Writes to program memory may not
  succeed if the internal voltage reference is not set.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:65.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>No workaround applied</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:12;height:96.3pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:96.3pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>TBLWTINT</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:96.3pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>If a peripheral interrupt occurs during a </span><span
  class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
  mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>tblwt</span></span></span><span
  lang=EN-US style='font-family:"Times New Roman",serif;mso-bidi-font-family:
  "Arial Unicode MS";mso-ansi-language:EN-US'> operation, data can be
  corrupted.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:96.3pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>Library routine </span><span class=Code><span
  lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
  mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>flash_write()
  </span></span></span><span lang=EN-US style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:EN-US'>will
  temporarily disable all applicable interrupt-enable bits before execution of
  a </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
  color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
  100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
  mso-style-textfill-fill-alpha:100.0%'>tblwt</span></span></span><span
  lang=FR style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:FR'> instruction.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:13;height:147.7pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:147.7pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>FW4000</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:147.7pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Self write operations initiated from
  and acting upon a range within the same side of the 4000h boundary may fail
  based on sequences of instructions executed following the write.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:147.7pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>No workaround applied</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:14;height:97.0pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:97.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>RESETRAM</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:97.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Data in a RAM location can become
  corrupted if an asynchronous reset (e.g. WDT, MCLR event) occurs during a
  write operation to that location.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:97.0pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>A warning will be issued if the
  length nvram psect is greater than zero bytes (persistent variables populate
  this psect).</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:15;height:76.9pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:76.9pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>FETCH</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:76.9pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Instruction fetches can become corrupted
  after certain code sequences.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:76.9pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=PT style='font-family:
  "Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:
  PT'>A </span><span class=Code><span lang=EN-US style='font-size:11.0pt;
  color:black;mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:
  100.0%'><span style='color:black;mso-style-textfill-fill-color:black;
  mso-style-textfill-fill-alpha:100.0%'>nop</span></span></span><span
  lang=EN-US style='font-family:"Times New Roman",serif;mso-bidi-font-family:
  "Arial Unicode MS";mso-ansi-language:EN-US'> instruction as added after </span><span
  class=Code><span lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
  mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>tblrd</span></span></span><span
  lang=EN-US style='font-family:"Times New Roman",serif;mso-bidi-font-family:
  "Arial Unicode MS";mso-ansi-language:EN-US'> instructions, returns,
  destinations of calls and gotos, and ISR vector addresses.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:16;height:85.35pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>CLOCKSW</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>An instruction may be corrupted when
  switching from INTOSC to an external clock source. (Enhanced mid-range
  devices)</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Switch to high-power mode
  immediately after reset.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:17;height:85.35pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>BRANCH</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>The PC might become invalid when
  restoring from an interrupt during a BRA or BRW instruction. (Enhanced
  mid-range devices)</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Branch instructions are avoided.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:18;height:85.35pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>BRKNOP2</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>Hardware breakpoints might be
  affected by branch instruction.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>Use 2 nops instead of </span><span class=Code><span
  lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
  mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>BRA
  &lt;pc+1&gt;</span></span></span><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:19;height:85.35pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>NVMREG</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>The program will access data flash
  rather than program flash memory after a reset, affecting runtime startup
  code.</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>The runtime startup code adjusts the
  NVMCON register to ensure that program memory is accessed by table read
  instructions.</span></p>
  </td>
 </tr>
 <tr style='mso-yfti-irow:20;mso-yfti-lastrow:yes;height:85.35pt'>
  <td width=208 valign=top style='width:155.65pt;border:solid black 1.0pt;
  border-top:none;mso-border-top-alt:solid black 1.0pt;background:transparent;
  padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS"'>BSR63</span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>Corrupted execution of </span><span class=Code><span
  lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
  mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movff</span></span></span><span
  lang=EN-US style='font-family:"Times New Roman",serif;mso-bidi-font-family:
  "Arial Unicode MS";mso-ansi-language:EN-US'> instruction when the BSR holds
  63 </span></p>
  </td>
  <td width=208 valign=top style='width:155.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  mso-border-top-alt:solid black 1.0pt;mso-border-left-alt:solid black 1.0pt;
  background:transparent;padding:5.0pt 5.0pt 5.0pt 5.0pt;height:85.35pt'>
  <p class=FreeForm style='margin-bottom:4.0pt'><span lang=EN-US
  style='font-family:"Times New Roman",serif;mso-bidi-font-family:"Arial Unicode MS";
  mso-ansi-language:EN-US'>Compiler avoids generating </span><span class=Code><span
  lang=EN-US style='font-size:11.0pt;color:black;mso-style-textfill-fill-color:
  black;mso-style-textfill-fill-alpha:100.0%'><span style='color:black;
  mso-style-textfill-fill-color:black;mso-style-textfill-fill-alpha:100.0%'>movlb
  63</span></span></span><span lang=EN-US style='font-family:"Times New Roman",serif;
  mso-bidi-font-family:"Arial Unicode MS";mso-ansi-language:EN-US'>
  instructions. A warning is issued if this instruction is detected.</span></p>
  </td>
 </tr>
</table>

<p class=FreeForm style='margin-bottom:12.0pt'><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>
